<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0CCh Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0cch.com/"/>
  <updated>2018-07-08T07:40:08.748Z</updated>
  <id>http://0cch.com/</id>
  
  <author>
    <name>0CCh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow入门 —— mnist</title>
    <link href="http://0cch.com/2018/07/07/tensorflow-mnist/"/>
    <id>http://0cch.com/2018/07/07/tensorflow-mnist/</id>
    <published>2018-07-07T07:07:41.000Z</published>
    <updated>2018-07-08T07:40:08.748Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>自从有tensorflow这样的平台工具横空出世，机器学习的代码编写逐渐变的平民化了。我们不需要太多的数学理论知识就能够完成一些机器学习的项目。比如在使用tensorflow的时候，我们只需要定义好损失函数，tensorflow会自动的帮我们完成反向传播改善参数。我们所需要做的就是合理利用tensorflow创建模型。</p><p>当然，我并不是在鼓动初学者跳过数学原理部分，而是认为，如果没有数学基础，入门就死磕原理容易产生挫败感导致放弃。这样就不如先接触简单的项目，在有了一定的体会后，再回头去看看数学原理的东西，这样会更容易接受。比如，当能用tensorflow完成对mnist的训练之后，再去理解反向传播这四个公式，应该会更有感觉。</p><span>$$\begin{align}\delta^L &amp;= \nabla_a C \odot \sigma&apos;(z^L) \tag{1} \\\delta^l &amp;= ((w^{l+1})^T \delta^{l+1}) \odot \sigma&apos;(z^l) \tag{2}\\\frac{\partial C}{\partial b^l_j} &amp;= \delta^l_j \tag{3}\\\frac{\partial C}{\partial w^l_{jk}} &amp;= a^{l-1}_k \delta^l_j \tag{4}\end{align}$$</span><!-- Has MathJax --><p>接下来相信看看这份代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># step1</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"."</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2</span></span><br><span class="line">INPUT_PARAMETERS = <span class="number">784</span></span><br><span class="line">L1_PARAMETERS = <span class="number">300</span></span><br><span class="line">W1 = tf.Variable(tf.truncated_normal([INPUT_PARAMETERS, L1_PARAMETERS], stddev=<span class="number">0.1</span>))</span><br><span class="line">b1 = tf.Variable(tf.truncated_normal([L1_PARAMETERS], stddev=<span class="number">0.1</span>))</span><br><span class="line">W2 = tf.Variable(tf.truncated_normal([L1_PARAMETERS, <span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">b2 = tf.Variable(tf.truncated_normal([<span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, INPUT_PARAMETERS])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># step4</span></span><br><span class="line">hidden1 = tf.nn.sigmoid(tf.matmul(x, W1) + b1)</span><br><span class="line">y =  tf.matmul(hidden1, W2) + b2</span><br><span class="line"></span><br><span class="line"><span class="comment"># step5</span></span><br><span class="line">loss = (tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span><br><span class="line">    logits=y, labels=y_)))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.3</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step6</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step7</span></span><br><span class="line">loss_array = []</span><br><span class="line">accuracy_array = []</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">        _, step_loss = sess.run([train_step, loss], feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">            step_accuracy = accuracy.eval(&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)</span><br><span class="line">            loss_array.append(step_loss)</span><br><span class="line">            accuracy_array.append(step_accuracy)</span><br><span class="line">            print(step_loss, step_accuracy)</span><br><span class="line"></span><br><span class="line">loss_array.append(step_loss)</span><br><span class="line">accuracy_array.append(step_accuracy)</span><br><span class="line">print(step_loss, step_accuracy)</span><br><span class="line"></span><br><span class="line">plt.plot([i*<span class="number">500</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(loss_array))], loss_array, <span class="string">'b-'</span>,</span><br><span class="line">          [i*<span class="number">500</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(accuracy_array))], accuracy_array, <span class="string">'r-'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>step1：</strong>read_data_sets是tf提供读取mnist数据的函数，运行时会有函数过时的警告提示，但是不用管它，因为用起来完全没有问题。one_hot参数在这里很重要，他将实际的标签值转化为一个向量，例如，将标签值3，转化成表示0-9是否置位的向量：\( \left(\begin{array}{cccccccccc}0;0;0;1;0;0;0;0;0;0;\end{array}\right)^T \)</p></blockquote><blockquote><p><strong>step2：</strong>创建权重和偏置，创建方法有很多，我用的是期望为0，标准差为0.1的随机分布。</p></blockquote><blockquote><p><strong>step3：</strong>创建输入层和标签的placeholder，大概的意思是占住空间，以方便后续数据喂给模型。</p></blockquote><blockquote><p><strong>step4：</strong>实际上是向前传播 \( z = w^{T}x\,+\,b\)，\( a = sigmoid(z)\)，其中sigmoid是\( \frac{1}{1+\exp(-z)}\)。这里可能有一个疑问，第二个隐藏层到输出层，没有使用sigmoid函数。原因继续往下看就知道了。</p></blockquote><blockquote><p><strong>step5：</strong>计算损失函数，调用了tf的sigmoid_cross_entropy_with_logits，这个函数把交叉熵和sigmoid的计算放在了一起，所以上面不需要去计算sigmoid了。这样做的好处很明显，就是方便我们修改从最后一个隐藏层到输出层的激活函数，比如将sigmoid_cross_entropy_with_logits替换为softmax_cross_entropy_with_logits，那么我们最后一个激活函数就变成了softmax。最后设置学习率并且把我们的损失函数传给梯度下降类的最小化函数中，tf就会自动的帮我们优化参数，从而最小化损失值了。</p></blockquote><blockquote><p><strong>step6：</strong>使用测试数据去计算模型的识别准确率</p></blockquote><blockquote><p><strong>step7：</strong>最后一步，我们将数据分为小份，随着迭代，逐步喂给模型。然后记录损失和准确率的变化，并做图。</p></blockquote><p>这里我们为了简单，没有使用softmax，dropout和正则化等优化方法，所以识别率只达到了90%，不过作为一个入门来说已经够了。</p><p><a href="/uploads/2018/07/2018-07-07-tensorflow-mnist.png"><img src="/uploads/2018/07/2018-07-07-tensorflow-mnist.png" alt="2018-07-07-tensorflow-mnist"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;自从有tensorflow这样的平台工具横空出世，机器学习的代码编写逐渐变的
      
    
    </summary>
    
      <category term="machinelearning" scheme="http://0cch.com/categories/machinelearning/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习练习题1</title>
    <link href="http://0cch.com/2018/06/22/machine-learning-ex1/"/>
    <id>http://0cch.com/2018/06/22/machine-learning-ex1/</id>
    <published>2018-06-22T08:13:28.000Z</published>
    <updated>2018-06-23T09:19:53.825Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>掐指一算，已经有三个月没有更新blog了。因为最近一直在学习机器学习的内容，所以没空也没有新鲜的技术值得写下来分享。还好经过一段时间的积累（学习线性代数和概率论），机器学习这块内容也算是入门了。这是机器学习的第一个习题，线性回归。用最直白的话来说，就是用函数去拟合数据分布，从而达到预测新数据的效果。需要的知识是矩阵的计算，最小二乘法以及求偏微分。</p><p>关键的公式只有两个：<br><span>$$\begin{align}Cost(\theta) = \frac{1}{2m}\,\sum^{m}_{i=1}\,(h_\theta(x^{i})-y^{i})^2 \tag{1}\\\theta_{j} = \theta_{j}-\alpha\frac{1}{m}\,\sum^{m}_{i=1}(h_\theta(x^{i})-y^{i})\frac{\partial{h_\theta(x^{i})}}{\partial{\theta_{j}}}\tag{2}\end{align}$$</span><!-- Has MathJax --></p><p>那么最后需要确定的只剩下一个，我们希望用什么样的曲线去拟合样本，这个就需要经验和尝试了。这里的练习只需要用直线来拟合就足够了: \( h_\theta(x) = \theta^{T}x = \theta_{0}+\theta_{1}x_{1} \) .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">'ex1data1.txt'</span>, delimiter=<span class="string">','</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离样本数据输入X和输出Y</span></span><br><span class="line">X = np.concatenate((np.ones((len(data),<span class="number">1</span>)), data[:,<span class="number">0</span>].reshape((len(data),<span class="number">1</span>))), axis=<span class="number">1</span>)</span><br><span class="line">theta = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">Y = data[:,<span class="number">1</span>].reshape((len(data),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了加速计算，把除法优化位乘法</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">div_m = <span class="number">1</span> / len(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> loop_count <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    Y1 = X.dot(theta)</span><br><span class="line">    <span class="comment"># 根据公式计算损失</span></span><br><span class="line">    cost = ((Y-Y1)**<span class="number">2</span>).sum() * <span class="number">0.5</span> * div_m;</span><br><span class="line">    print(cost)</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        theta[i, <span class="number">0</span>] = theta[i, <span class="number">0</span>] - alpha * div_m * (np.diagflat(X[:, i]) * (Y1 - Y)).sum()    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后把拟合直线画出来</span></span><br><span class="line">Xl = np.linspace(<span class="number">0</span>, <span class="number">30</span>, <span class="number">100</span>)</span><br><span class="line">Yl = Xl * theta[<span class="number">1</span>, <span class="number">0</span>] + theta[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(data[:,<span class="number">0</span>],data[:,<span class="number">1</span>],<span class="string">'x'</span>, Xl, Yl, <span class="string">'r'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="/uploads/2018/06/2018-06-23-machine-learning-ex1.jpg"><img src="/uploads/2018/06/2018-06-23-machine-learning-ex1.jpg" alt="2018-06-23-machine-learning-ex1"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;掐指一算，已经有三个月没有更新blog了。因为最近一直在学习机器学习的内容，
      
    
    </summary>
    
      <category term="machinelearning" scheme="http://0cch.com/categories/machinelearning/"/>
    
    
  </entry>
  
  <entry>
    <title>广度遍历删除文件</title>
    <link href="http://0cch.com/2018/03/29/breadth-first-traversal-to-del-file/"/>
    <id>http://0cch.com/2018/03/29/breadth-first-traversal-to-del-file/</id>
    <published>2018-03-29T06:17:34.000Z</published>
    <updated>2018-06-23T08:08:29.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近遇到一个要删除文件夹的问题，文件夹内有大量文件和子文件夹，而且结构非常复杂，删除特别慢。于是思考了一下如何能加速文件删除的问题。我看到大部分的实现方法都是深度遍历，即遇到新的文件夹就进入文件夹遍历文件，直到结束后返回上一层继续遍历。实际上这种方法存在一个问题，在我们的硬盘上，文件夹和文件一般是B-Tree分布的，所以同一层文件夹的文件的数据都比较相近，而不同的层的文件夹的文件可能差距比较远，于是深度遍历让硬盘磁头从一个文件夹跨越到另外一个文件夹，磁头花的时间更长了，更何况子文件夹遍历结束，还得从子文件夹在移动回父文件夹。而是用广度遍历就不同，他把当前目录遍历完成后才去遍历另外一个，这样磁头移动的总距离肯定更少，遍历速度当然更快。以下代码我的一个实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoFindHandle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AutoFindHandle(HANDLE find_handle) : find_handle_(find_handle) &#123;&#125;</span><br><span class="line">    ~AutoFindHandle() &#123;</span><br><span class="line">        FindClose(find_handle_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HANDLE find_handle_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CollectFileAndDir</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::wstring &amp;dir, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; &amp;file_path, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; &amp;dir_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE find_handle;</span><br><span class="line">    WIN32_FIND_DATAW data;</span><br><span class="line">    <span class="built_in">std</span>::wstring temp_path;</span><br><span class="line">    <span class="built_in">std</span>::wstring current_dir = dir;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::wstring&gt; temp_dir;</span><br><span class="line"></span><br><span class="line">    if (current_dir[current_dir.length() - 1] != L'\\') &#123;</span><br><span class="line">        current_dir += <span class="string">L"\\"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::wstring path = current_dir + <span class="string">L"*"</span>;</span><br><span class="line"></span><br><span class="line">    find_handle = FindFirstFileW(path.c_str(), &amp;data);</span><br><span class="line">    <span class="keyword">if</span> (find_handle == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AutoFindHandle <span class="title">auto_find_handle</span><span class="params">(find_handle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wcscmp(data.cFileName, <span class="string">L".."</span>) != <span class="number">0</span> &amp;&amp; </span><br><span class="line">        wcscmp(data.cFileName, <span class="string">L"."</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            temp_path = current_dir;</span><br><span class="line">            temp_path += data.cFileName;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((data.dwFileAttributes &amp; (FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)) != <span class="number">0</span>) &#123;</span><br><span class="line">                SetFileAttributesW(temp_path.c_str(), FILE_ATTRIBUTE_NORMAL);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((data.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                temp_dir.push(temp_path);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                file_path.push_back(temp_path);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (FindNextFileW(find_handle, &amp;data)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wcscmp(data.cFileName, <span class="string">L".."</span>) != <span class="number">0</span> &amp;&amp; </span><br><span class="line">            wcscmp(data.cFileName, <span class="string">L"."</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                temp_path = current_dir;</span><br><span class="line">                temp_path += data.cFileName;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((data.dwFileAttributes &amp; (FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    SetFileAttributesW(temp_path.c_str(), FILE_ATTRIBUTE_NORMAL);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((data.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    temp_dir.push(temp_path);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    file_path.push_back(temp_path);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!temp_dir.empty()) &#123;</span><br><span class="line"></span><br><span class="line">        CollectFileAndDir(temp_dir.top(), file_path, dir_path);</span><br><span class="line">        </span><br><span class="line">        temp_dir.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dir_path.push_back(dir);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">DeleteFolder</span><span class="params">(LPCWSTR path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; file_path;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; dir_path;</span><br><span class="line">    <span class="keyword">if</span> (!CollectFileAndDir(path, file_path, dir_path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt;::iterator it = file_path.begin(); it != file_path.end(); ++it) &#123;</span><br><span class="line">        DeleteFileW(it-&gt;c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt;::iterator it = dir_path.begin(); it != dir_path.end(); ++it) &#123;</span><br><span class="line">        RemoveDirectoryW(it-&gt;c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近遇到一个要删除文件夹的问题，文件夹内有大量文件和子文件夹，而且结构非常复
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>鸡年总结，狗年计划</title>
    <link href="http://0cch.com/2018/02/25/2018-plan/"/>
    <id>http://0cch.com/2018/02/25/2018-plan/</id>
    <published>2018-02-25T13:00:28.000Z</published>
    <updated>2018-02-26T13:28:13.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>虽然没到十五，但是这个年基本上也是过完了。是收心总结鸡年，展望狗年的时候了。</p><p>生活方面，鸡年过的不算顺心，尤其是上半年，麻烦事情接二连三，具体也事情也就不想多写了，不愉快的事情就应该被忘记。工作上，虽然没有明显的进步，但也算是得到了不错的回报，内心有愧的拿了一个优秀员工。重点来了，要说说技术方面的事情。去年下半年快到年底的时候，我做了一个决定，学习深度学习相关知识，作为今后转型的砝码。这里不得不说，做这个决定其实已经很晚了，因为已经有很多人早就踏入了这个领域。我总是想，如果能早两年开窍就好了，但是凡是哪有如果呢。更何况就在去年初我还在跟以前同事争论，坚定的认为个人PC行业还是非常宽阔的，但实际上那个想法也只是说自己的一厢情愿而已。下半年某企业找到我说想让我去他们的个人PC业务部门，给的等级还不错，薪资水平也很快给我翻倍了，但是我拒绝了，那个时候我就知道自己内心里已经不看好个人PC，尤其是Windows上面的发展了。于是乎，打算学习更接近未来趋势的一些东西。</p><p>当今最火的两个领域，区块链和深度学习，我很快的就选择学习深度学习的相关知识了。原因很简单，深度学习现在已经在很大程度上推进了社会发展。而区块链技术，除了在各种加密币方面非常火之外，貌似还没看到什么用途能促进社会进步，至少没有深度学习那么明显吧。下半年的两三个月里开始慢慢接触了深度学习，当然也包括一些其他的机器学习领域的知识。于是深深的感慨，数学在这些领域的重要性，当然又一次后悔没有学好数学，也不得不吐槽我们的高等数学教育是多么的死板无趣。</p><p>今年计划，生活上的事情其实没有什么计划可言，就希望过的更加顺心吧。工作方面，希望能主导一些真正有意义的项目，希望能推进公司往深度学习方面来发展。另外技术方面专注于数学和深度学习。具体的计划就不列了，因为貌似每次列出来也不一定能全部完成 =v=</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;虽然没到十五，但是这个年基本上也是过完了。是收心总结鸡年，展望狗年的时候了。
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh的反向连接</title>
    <link href="http://0cch.com/2018/01/20/reverse-ssh/"/>
    <id>http://0cch.com/2018/01/20/reverse-ssh/</id>
    <published>2018-01-20T08:53:39.000Z</published>
    <updated>2018-01-21T09:58:39.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>家里有个树莓派，基本上用来当了一个微型服务器，24小时跑着。主要用途是在我不在家的时候控制家里网络，充分利用带宽。一直以来，我都是用树莓派把IP更新到DDNS（家里是外网IP），并且在路由器上做端口映射。这样就能在其他地方访问树莓派了。但是不知为何，这段时间无法从外网ping通家里（后来发现是光猫问题，换了个猫就好了），从外围直接联通家里的树莓派这条路被封了，所以就折腾了SSH的反向连接功能。用这个方法也可以克服家里是内网IP的情况，当然前提是我们在外网有一台服务器或者vps。原理上和其他的反向连接是一样的，这里就不讨论原理了，直接介绍方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -fCNR remote_port:localhost:local_port user@remote_addr</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f 后台执行ssh指令</span><br><span class="line">-C 允许压缩数据</span><br><span class="line">-N 不执行远程指令</span><br><span class="line">-R 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</span><br></pre></td></tr></table></figure><p>这条命令的意思是：请将remote_addr机器里对remote_port的连接转发到本地机器的本地端口。举个例子，假设我有一台内网机器A，其ssh端口为6622，另外有一台VPS，地址是VPS_ADDR.com，SSH端口是8822。这个时候我想通过VPS的9922端口去访问树莓派的SSH。那么我需要用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -fCNR 9922:localhost:6622 user@VPS_ADDR.com</span><br></pre></td></tr></table></figure><p>当完成了这个命令后，我们就可以在VPS上登陆树莓派了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -p 9922 pi@localhost</span><br></pre></td></tr></table></figure><p>解决了这个问题后，我们需要解决另外一个问题。我们每次输入反向连接的命令的时候总需要输入VPS密码，这个非常不利于我们把命令设置为开机启动。为了解决这个问题，首先想到的是sshpass。这个工具可以帮助我们自动输入密码，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sshpass -p your_VPS_password ssh -fCNR 9922:localhost:6622 user@VPS_ADDR.com</span><br></pre></td></tr></table></figure><p>把命令放到树莓派的开机启动命令后，重启树莓派，成功从VPS连入了树莓派。不过第二天，我又发现了另外一个问题，SSH的反向连接在无人访问的时候会超时，超时后会断开链接。这样明显不符合我想连就连的需求。于是就得上autossh这个工具了，这个工具会守护ssh，让ssh的反向连接保持联通。但是autossh不支持自动输入密码，网上很多解决办法是用证书的方式省去了输入密码的过程，不过我这里提供另外一个方法，使用expect工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># expect -c &quot;</span><br><span class="line">spawn autossh -M 11122 -CNR 9922:localhost:6622 user@VPS_ADDR.com -o StrictHostKeyChecking=no</span><br><span class="line">expect \&quot;Password:\&quot;</span><br><span class="line">send \&quot;your_password\r\&quot;</span><br><span class="line">expect eof</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>这个工具可以自动和ssh进行交互，当VPS提示Password:的时候，我们send密码过去就行了，注意使用StrictHostKeyChecking=no来避免Host key的验证提示。把这个命令放在开机启动的时候执行，完美解决了外网访问家里树莓派的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;家里有个树莓派，基本上用来当了一个微型服务器，24小时跑着。主要用途是在我不
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>将图片转化成mnist格式</title>
    <link href="http://0cch.com/2017/12/09/image-to-mnist1/"/>
    <id>http://0cch.com/2017/12/09/image-to-mnist1/</id>
    <published>2017-12-09T12:51:42.000Z</published>
    <updated>2017-12-10T12:56:13.842Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>利用mnist数据对数字符号进行识别基本上算是深度学习的Hello World了。在我学习这个“hello world”的过程中，多多少少有点不爽，原因是无论是训练数据还是测试数据，都是mnist准备好的，即使最后训练的数字识别率很高，我也没有什么参与感。其实，我特别想测试自己手写数字的识别率。<br>为了完成上述想法，我第一个想到的是将普通图片数据转换成mnist数据。mnist的数据格式非常简单，如下图所示：</p><p><a href="/uploads/2017/12/2017-12-10-t10k-images.idx3-ubyte.png"><img src="/uploads/2017/12/2017-12-10-t10k-images.idx3-ubyte.png" alt="2017-12-10-t10k-images.idx3-ubyte"></a></p><p><a href="/uploads/2017/12/2017-12-10-t10k-labels.idx1-ubyte.png"><img src="/uploads/2017/12/2017-12-10-t10k-labels.idx1-ubyte.png" alt="2017-12-10-t10k-labels.idx1-ubyte"></a></p><p>两幅图分别表示了图形数据和标签数据。他们都有一个4字节长度的magic number，用来识别数据的具体格式。如果是标签数据，那么格式相对简单，后续是一个标签数量，接着的是标签数据（0-9的值）。如果是图像数据，那么magic number后，出了4个字节的数据数量以外，还有分别占4字节的行列数据，最后的就是图像数据。结构非常简单，但是值得注意的事情有两点：</p><blockquote><ol><li>数据使用big endian组织的。</li><li>图像数据中，255表示前景，也就是黑色，0表示背景，也就是白色，这和我们平时看到的RGB是不同的。</li></ol></blockquote><p>知道了数据格式，接下来的事情就是用程序将图像转换到mnist了。说实在的，如果对于操作二进制的数据，C比python还是方便不少的。但是C读取图像更加麻烦。所以这里推荐还是使用python对数据做转化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先导入图像处理库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 接下来打开图片，并且将像转化为8bit黑白像素</span></span><br><span class="line">im = Image.open(path_to_image)</span><br><span class="line">im = im.convert(<span class="string">'L'</span>)</span><br><span class="line"><span class="comment"># 转换图像到mnist的大小28*28</span></span><br><span class="line">im = im.resize((<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line"><span class="comment"># 获取图像长宽</span></span><br><span class="line">width, height = im.size()</span><br><span class="line"><span class="comment"># 将图像数据转化位mnist</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>,height):</span><br><span class="line">        data_image.append(<span class="number">255</span> - pixel[y,x])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写到mnist文件中</span></span><br><span class="line">header = array(<span class="string">'B'</span>)</span><br><span class="line"><span class="comment"># 写入magic number</span></span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 写入数据数量，以一个图片为例</span></span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 写入行列像素数</span></span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">28</span>])</span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">28</span>])</span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">header.extend(data_image)</span><br><span class="line"><span class="comment"># 最后写文件</span></span><br><span class="line">output_file = open(<span class="string">r'data.mnist'</span>, <span class="string">'wb'</span>)</span><br><span class="line">header.tofile(output_file)</span><br><span class="line">output_file.close()</span><br></pre></td></tr></table></figure><p>以上是对图像数据的转换，标签数据的转换代码和以上代码基本一样，所以这里不再赘述。<br>有了这个方法，我们可以通过画图软件画上一堆自己手写的数字，通过python批量转化成mnist格式的数据，再让tensorflow进行测试，算出模型对我们自己手写数字的识别正确率。</p><p>好了，以上就是我说的第一种让模型识别自己的手写数字的方法。不过，这个方法不能实时的识别我手写的数字，让人总觉得缺点什么。于是就有了第二种方法，这种方法将借助浏览器，js以及web server等工具将手写的数字实时的传给后台的模型进行识别，然后把结果回复给用户。不过这个方法就要等待下一篇文章来描述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;利用mnist数据对数字符号进行识别基本上算是深度学习的Hello Worl
      
    
    </summary>
    
      <category term="DeepLearner" scheme="http://0cch.com/categories/DeepLearner/"/>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow pip安装（非GPU版）</title>
    <link href="http://0cch.com/2017/11/26/tensorflow-install/"/>
    <id>http://0cch.com/2017/11/26/tensorflow-install/</id>
    <published>2017-11-26T09:11:10.000Z</published>
    <updated>2017-11-26T09:11:15.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>TensorFlow安装有很多种方法，其中用dock安装是最方便的方式，源代码编译是最麻烦但是最能切合自己机器CPU的方法，当然了，你也可以用Anacaonda安装（一个科学计算的工具合集，以后有机会再介绍）。不过这次，我将介绍使用pip安装的方法。我个人认为这种方法其实是众多方法中最简单方便的方法了（系统基于ubuntu 16.04）。</p><p>先来说说常规用pip安装的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade tensorflow</span><br></pre></td></tr></table></figure></p><p>首先当然是安装tensorflow框架了（当然你得有python，如果没有可以使用apt-get install python3-pip python3-dev来安装）</p><p>接下来就是安装temsorflow了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tensorflow     # Python 3.n; CPU support (no GPU support)</span><br></pre></td></tr></table></figure></p><p>如果你的电脑和系统的配置正常，这个时候应该可以正常使用tensorflow了。不过，在我的电脑上出现了这么一个警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA</span><br></pre></td></tr></table></figure></p><p>很明显，现代CPU支持折现特性已经很常见了，但是框架版本并不支持。难道真的要便宜一个么？（据我测试2G内存的机器是无法编译tensorflow的）。于是物品翻阅了github，发现以及有人走在前面，在 <a href="https://github.com/mind/wheels" target="_blank" rel="noopener">https://github.com/mind/wheels</a> 里有很多已经编译的模块提供ubuntu。比如，在我的平台上适合的版本是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/mind/wheels/releases/download/tf1.4-cpu/tensorflow-1.4.0-cp35-cp35m-linux_x86_64.whl</span><br></pre></td></tr></table></figure></p><p>那么就可以使用这个版本来安装tensorflow：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --no-cache-dir install https://github.com/mind/wheels/releases/download/tf1.4-cpu/tensorflow-1.4.0-cp35-cp35m-linux_x86_64.whl</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;TensorFlow安装有很多种方法，其中用dock安装是最方便的方式，源代
      
    
    </summary>
    
      <category term="DeepLearner" scheme="http://0cch.com/categories/DeepLearner/"/>
    
    
  </entry>
  
  <entry>
    <title>C++20增加的生成器特性</title>
    <link href="http://0cch.com/2017/10/23/yield-in-cpp/"/>
    <id>http://0cch.com/2017/10/23/yield-in-cpp/</id>
    <published>2017-10-23T07:00:50.000Z</published>
    <updated>2017-11-26T08:52:02.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>不得不说，C++的语法真是越来越高级了，编译器为程序做的事情也是越来越多了。<br>比方说下面的这个程序，有两个点可以说说：</p><ol><li><p>生成器 —— 编译器为了实现生成器，不得不把这一个函数拆成两个部分，分为初始化部分和程序运行部分。初始化部分主要用来初始保存生成器运行状态的内存空间。每当co_yield返回后，这片内存空间需要保持当前变量的值，以方便程序再次进入生成器后继续运行。</p></li><li><p>异步 —— 在新的标准里，我们实现异步的编码成本更低了。编译器同样为我们做了大量工作，这个例子中，主线程执行到subfuc函数的co_await后，会启动两个线程，一个执行异步函数awaitfuc，另外一个等待这个函数结束执行后面的代码，而主线程本身则是跳出函数执行printf函数。没错，我们简简单单的一句话就让编译器生成了这么多代码。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;experimental/generator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::experimental;</span><br><span class="line"></span><br><span class="line">generator&lt;<span class="keyword">int</span>&gt; foo()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            co_yield i + p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pp = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; awaitfuc()</span><br><span class="line">&#123;</span><br><span class="line">    Sleep(<span class="number">5000</span>);</span><br><span class="line">    co_return <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::future&lt;<span class="keyword">int</span>&gt; subfuc()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = co_await <span class="built_in">std</span>::async(awaitfuc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"return 100\n"</span>, p.get());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : foo()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    co_return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    subfuc();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello\n"</span>);</span><br><span class="line">    Sleep(<span class="number">100000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;不得不说，C++的语法真是越来越高级了，编译器为程序做的事情也是越来越多了。
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>调试器是怎么匹配程序的符号文件的</title>
    <link href="http://0cch.com/2017/09/18/How-does-the-debugger-match-the-symbol-file/"/>
    <id>http://0cch.com/2017/09/18/How-does-the-debugger-match-the-symbol-file/</id>
    <published>2017-09-18T06:31:32.000Z</published>
    <updated>2017-11-26T08:52:02.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>微软的天才软件工程师们设计的PE（Portable Executable）文件数据结构有极强的扩展性和兼容性。我们关心的符号文件信息存储在PE结构中，一个叫做Debug Directory的节里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:000&gt; !dh -f ntdll</span><br><span class="line"></span><br><span class="line">File Type: DLL</span><br><span class="line">FILE HEADER VALUES</span><br><span class="line">    8664 machine (X64)</span><br><span class="line">       7 number of sections</span><br><span class="line">590296CE time date stamp Thu Apr 27 18:11:42 2017</span><br><span class="line"></span><br><span class="line">       0 file pointer to symbol table</span><br><span class="line">       0 number of symbols</span><br><span class="line">      F0 size of optional header</span><br><span class="line">    2022 characteristics</span><br><span class="line">            Executable</span><br><span class="line">            App can handle &gt;2gb addresses</span><br><span class="line">            DLL</span><br><span class="line"></span><br><span class="line">OPTIONAL HEADER VALUES</span><br><span class="line">     20B magic #</span><br><span class="line">    9.00 linker version</span><br><span class="line">   FB800 size of code</span><br><span class="line">   A9600 size of initialized data</span><br><span class="line">       0 size of uninitialized data</span><br><span class="line">       0 address of entry point</span><br><span class="line">    1000 base of code</span><br><span class="line">         ----- new -----</span><br><span class="line">00000000774e0000 image base</span><br><span class="line">    1000 section alignment</span><br><span class="line">     200 file alignment</span><br><span class="line">       3 subsystem (Windows CUI)</span><br><span class="line">    6.01 operating system version</span><br><span class="line">    6.01 image version</span><br><span class="line">    6.01 subsystem version</span><br><span class="line">  1AA000 size of image</span><br><span class="line">     400 size of headers</span><br><span class="line">  1B5DB0 checksum</span><br><span class="line">0000000000040000 size of stack reserve</span><br><span class="line">0000000000001000 size of stack commit</span><br><span class="line">0000000000100000 size of heap reserve</span><br><span class="line">0000000000001000 size of heap commit</span><br><span class="line">     140  DLL characteristics</span><br><span class="line">            Dynamic base</span><br><span class="line">            NX compatible</span><br><span class="line">  101200 [    F1A3] address [size] of Export Directory</span><br><span class="line">       0 [       0] address [size] of Import Directory</span><br><span class="line">  14E000 [   5A028] address [size] of Resource Directory</span><br><span class="line">  13B000 [   127EC] address [size] of Exception Directory</span><br><span class="line">  1A2E00 [    4300] address [size] of Security Directory</span><br><span class="line">  1A9000 [     4E8] address [size] of Base Relocation Directory</span><br><span class="line">   FC58C [      38] address [size] of Debug Directory</span><br><span class="line">       0 [       0] address [size] of Description Directory</span><br><span class="line">       0 [       0] address [size] of Special Directory</span><br><span class="line">       0 [       0] address [size] of Thread Storage Directory</span><br><span class="line">       0 [       0] address [size] of Load Configuration Directory</span><br><span class="line">       0 [       0] address [size] of Bound Import Directory</span><br><span class="line">       0 [       0] address [size] of Import Address Table Directory</span><br><span class="line">       0 [       0] address [size] of Delay Import Directory</span><br><span class="line">       0 [       0] address [size] of COR20 Header Directory</span><br><span class="line">       0 [       0] address [size] of Reserved Directory</span><br><span class="line">       </span><br></pre></td></tr></table></figure><p>使用!dh命令可以显示PE文件的关键信息，这里可以看到Debug Directory的偏移地址是FC58C，大小是38个字节，其对应结构体是_IMAGE_DEBUG_DIRECTORY。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DEBUG_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Type;</span><br><span class="line">    DWORD   SizeOfData;</span><br><span class="line">    DWORD   AddressOfRawData;</span><br><span class="line">    DWORD   PointerToRawData;</span><br><span class="line">&#125; IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_UNKNOWN          0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_COFF             1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_CODEVIEW         2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_FPO              3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_MISC             4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_EXCEPTION        5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_FIXUP            6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_OMAP_TO_SRC      7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_OMAP_FROM_SRC    8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_BORLAND          9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_RESERVED10       10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DEBUG_TYPE_CLSID            11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:000&gt; dt ntdll+FC58C ole32!_IMAGE_DEBUG_DIRECTORY</span><br><span class="line">   +0x000 Characteristics  : 0</span><br><span class="line">   +0x004 TimeDateStamp    : 0x590288a9</span><br><span class="line">   +0x008 MajorVersion     : 0</span><br><span class="line">   +0x00a MinorVersion     : 0</span><br><span class="line">   +0x00c Type             : 2</span><br><span class="line">   +0x010 SizeOfData       : 0x22</span><br><span class="line">   +0x014 AddressOfRawData : 0xfc5c8</span><br><span class="line">   +0x018 PointerToRawData : 0xfb9c8</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>需要注意的是这三个数据成员，Type，SizeOfData以及AddressOfRawData。其中Type是Debug数据类型，SizeOfData是数据大小，AddressOfRawData是数据对应的内存地址。通过dt命令，可以查看结构体和数据的对应关系。从上面的输出可知Debug数据类型是CODEVIEW，数据大小是0x22个字节，数据的内存偏移是0xfc5c8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:000&gt; db ntdll+0xfc5c8</span><br><span class="line">00000000`775dc5c8  52 53 44 53 49 7b 4d 74-81 7b 0c 47 a2 d8 a8 d2  RSDSI&#123;Mt.&#123;.G....</span><br><span class="line">00000000`775dc5d8  62 fc 8a 29 02 00 00 00-6e 74 64 6c 6c 2e 70 64  b..)....ntdll.pd</span><br><span class="line">00000000`775dc5e8  62 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  b...............</span><br><span class="line">00000000`775dc5f8  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000000`775dc608  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000000`775dc618  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000000`775dc628  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000000`775dc638  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用db命令查看这部分数据，我们可以发现ntdll.pdb的字符串。实际上，通过type已经知道了Debug数据类型是CODEVIEW，这样就可以确定数据的结构体是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CV_INFO_PDB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  DWORD  CvSignature;</span><br><span class="line">  GUID Signature;</span><br><span class="line">  DWORD Age;</span><br><span class="line">  BYTE PdbFileName[];</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0:000&gt; dt _guid ntdll+0xfc5c8+4</span><br><span class="line">ntdll!_GUID</span><br><span class="line"> &#123;744d7b49-7b81-470c-a2d8-a8d262fc8a29&#125;</span><br><span class="line">   +0x000 Data1            : 0x744d7b49</span><br><span class="line">   +0x004 Data2            : 0x7b81</span><br><span class="line">   +0x006 Data3            : 0x470c</span><br><span class="line">   +0x008 Data4            : [8]  &quot;???&quot;</span><br><span class="line">可以看到CvSignature = “RSDS”， Signature = &#123;744d7b49-7b81-470c-a2d8-a8d262fc8a29&#125;，Age = 2，PdbFileName=“ntdll.pdb”。</span><br><span class="line"></span><br><span class="line">0:000&gt; !lmi ntdll</span><br><span class="line">Loaded Module Info: [ntdll] </span><br><span class="line">         Module: ntdll</span><br><span class="line">   Base Address: 00000000774e0000</span><br><span class="line">     Image Name: ntdll.dll</span><br><span class="line">   Machine Type: 34404 (X64)</span><br><span class="line">     Time Stamp: 590296ce Thu Apr 27 18:11:42 2017</span><br><span class="line">           Size: 1aa000</span><br><span class="line">       CheckSum: 1b5db0</span><br><span class="line">Characteristics: 2022  perf</span><br><span class="line">Debug Data Dirs: Type  Size     VA  Pointer</span><br><span class="line">             CODEVIEW    22, fc5c8,   fb9c8 RSDS - GUID: &#123;744D7B49-7B81-470C-A2D8-A8D262FC8A29&#125;</span><br><span class="line">               Age: 2, Pdb: ntdll.pdb</span><br><span class="line">                CLSID     4, fc5c4,   fb9c4 [Data not mapped]</span><br><span class="line">     Image Type: FILE     - Image read successfully from debugger.</span><br><span class="line">                 C:\Windows\SYSTEM32\ntdll.dll</span><br><span class="line">    Symbol Type: PDB      - Symbols loaded successfully from image path.</span><br><span class="line">                 d:\symbols\ntdll.pdb\744D7B497B81470CA2D8A8D262FC8A292\ntdll.pdb</span><br><span class="line">    Load Report: public symbols , not source indexed </span><br><span class="line">                 d:\symbols\ntdll.pdb\744D7B497B81470CA2D8A8D262FC8A292\ntdll.pdb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再来看看Windbg匹配ntdll.pdb的真实路径，d:\symbols\ntdll.pdb\744D7B497B81470CA2D8A8D262FC8A292\ntdll.pdb。对比一下就可以发现其中的奥秘。原来Windbg识别执行程序的PDB路径是依赖guid，age和PdbFileName。具体来说就是 {符号设置路径}{PdbFileName}{guid}{age}{PdbFileName}。<br>如果想写程序获取这些信息并不需要像上面那样解析PE文件结构，实际上微软给我们提供了这方面的支持，在dbghelp.dll里导出了一个叫做SymSrvGetFileIndexInfo的函数，这个函数获得的SYMSRV_INDEX_INFO结构中，就包含以上我们需要的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;微软的天才软件工程师们设计的PE（Portable Executable）文
      
    
    </summary>
    
      <category term="Debugging" scheme="http://0cch.com/categories/Debugging/"/>
    
    
  </entry>
  
  <entry>
    <title>测试math-plugin</title>
    <link href="http://0cch.com/2017/08/17/test-math-plugin/"/>
    <id>http://0cch.com/2017/08/17/test-math-plugin/</id>
    <published>2017-08-17T02:28:17.000Z</published>
    <updated>2017-11-26T08:52:02.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h2><p>Simple inline \(a = b + c\).</p><p>This equation \(\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1 \) is inline.</p><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>$$\frac{\partial u}{\partial t}<br>= h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p><span>$$\begin{aligned}\dot{x} &amp; = \sigma(y-x) \\\dot{y} &amp; = \rho x - y - xz \\\dot{z} &amp; = -\beta z + xy\end{aligned}$$</span><!-- Has MathJax -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;Inline&quot;&gt;&lt;a href=&quot;#Inline&quot; class=&quot;
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
      <category term="Test" scheme="http://0cch.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>调试COM的一个tip</title>
    <link href="http://0cch.com/2017/07/09/tip-about-com/"/>
    <id>http://0cch.com/2017/07/09/tip-about-com/</id>
    <published>2017-07-09T03:28:15.000Z</published>
    <updated>2017-11-26T08:52:02.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近遇到朋友的一个程序崩溃，原因是接口没有释放的时候调用了CoUninitialize，接着才释放接口。这个应该是个很明显的问题，但是朋友告诉我以前代码就是这个样子的，没有崩溃过，最近修改了部分代码但并不是这一块的。为了看看究竟什么回事，我把没有崩溃的程序抓了dump，看了COM的初始化引用计数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dt _teb @$teb ReservedForOle</span><br><span class="line">ntdll!_TEB</span><br><span class="line">   +0x1758 ReservedForOle : 0x00000000`00271b00 Void</span><br><span class="line"></span><br><span class="line">0:000&gt; dt ole32!SOleTlsData 0x00000000`00271b00 cComInits pNativeApt</span><br><span class="line">   +0x028 cComInits  : 5</span><br><span class="line">   +0x080 pNativeApt : 0x00000000`00272680 CComApartment</span><br><span class="line">   </span><br><span class="line">0:000&gt; dt 0x00000000`00272680 CComApartment _AptKind</span><br><span class="line">ole32!CComApartment</span><br><span class="line">   +0x010 _AptKind : 4 ( APTKIND_APARTMENTTHREADED )</span><br></pre></td></tr></table></figure><p>没有崩溃的时候，引用计数确实不为0，也能看出是个STA。后来朋友发现，之所以之前没有崩溃，是因为之前线程加载的某个dll中，有初始化COM的调用，所以引用计数不为0。后来移开了这个dll，问题就出现了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近遇到朋友的一个程序崩溃，原因是接口没有释放的时候调用了CoUniniti
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>gotcha sdk 文件监控功能更新</title>
    <link href="http://0cch.com/2017/07/02/gotcha-sdk-monitor-update/"/>
    <id>http://0cch.com/2017/07/02/gotcha-sdk-monitor-update/</id>
    <published>2017-07-02T07:56:54.000Z</published>
    <updated>2017-11-26T08:52:02.546Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在15年的一篇blog中，我介绍了gotcha sdk。<a href="/2015/11/24/gotcha-sdk/" title="gotcha sdk 全盘文件名搜索开发库">gotcha sdk 全盘文件名搜索开发库</a></p><p>当时gotcha sdk没有提供文件监控功能，也就是说当搜索文件发生变化的时候，这个变化不会体现到搜索结果列表中。其实这个功能一直在todo list中，只不过忙的时候没时间写这部分代码，闲的时候又忘了。前几天终于有时间把这部分代码补上，升级了sdk。</p><p>gotcha sdk 代码SVN:<br><a href="http://code.taobao.org/svn/gotcha_sdk/" target="_blank" rel="noopener">http://code.taobao.org/svn/gotcha_sdk/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在15年的一篇blog中，我介绍了gotcha sdk。&lt;a href=&quot;/
      
    
    </summary>
    
      <category term="NTInternals" scheme="http://0cch.com/categories/NTInternals/"/>
    
    
  </entry>
  
  <entry>
    <title>切换到session 0</title>
    <link href="http://0cch.com/2017/06/25/switch-to-session-0/"/>
    <id>http://0cch.com/2017/06/25/switch-to-session-0/</id>
    <published>2017-06-25T13:48:24.000Z</published>
    <updated>2017-11-26T08:52:02.546Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这是一个小技巧，可以帮助我们从session 1切换到session 0，并且获得system权限。有了system权限，可以做一些admin做不了的事情，具体哪些事情大伙可以自己挖掘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">切换到session 0：    rundll32 winsta.dll WinStationSwitchToServicesSession</span><br><span class="line">切换会原session：    rundll32 winsta.dll WinStationRevertFromServicesSession</span><br></pre></td></tr></table></figure><p>但是如果直接切换到session 0，会发现一个问题，我们没有桌面程序，所以什么事情也做不了。解决方法也很简单，创建一个explorer就可以了。但是普通方法创建explorer，怎么会不能创建到session 0，于是这里可想而知，我们需要一个服务来创建explorer。专门写一个服务程序未免太麻烦，这里可以使用cmd来快速创建explorer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc create desktop0 binpath= &quot;cmd /c start explorer.exe&quot; type= own type= interact</span><br><span class="line">net start desktop0</span><br></pre></td></tr></table></figure><p>虽然cmd不是服务，但是也会被运行起来，只不过不能与服务管理器交互，所以在超时的时候会被结束。不过那个时候已经没关系了，因为explorer已经创建起来了。接下来就可以切换了session 0，用system权限管理电脑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;这是一个小技巧，可以帮助我们从session 1切换到session 0，并
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>0cchext插件实用命令dttoc</title>
    <link href="http://0cch.com/2017/05/02/0cchext-dttoc-command/"/>
    <id>http://0cch.com/2017/05/02/0cchext-dttoc-command/</id>
    <published>2017-05-02T03:33:24.000Z</published>
    <updated>2017-11-26T08:52:02.545Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近给<a href="https://github.com/0cch/0cchext/releases/tag/1.0.16.3.55" target="_blank" rel="noopener">0cchext</a>添加了一个实用的逆向命令，dttoc，这个命令可以把dt命令输出的结构体转化为C的结构，方便我们做逆向还原工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !0cchext.dttoc nt!_peb</span><br><span class="line">struct _PEB &#123;</span><br><span class="line">    BYTE InheritedAddressSpace;</span><br><span class="line">    BYTE ReadImageFileExecOptions;</span><br><span class="line">    BYTE BeingDebugged;</span><br><span class="line">    union &#123;</span><br><span class="line">        BYTE BitField;</span><br><span class="line">        struct &#123;</span><br><span class="line">            BYTE ImageUsesLargePages:1;</span><br><span class="line">            BYTE IsProtectedProcess:1;</span><br><span class="line">            BYTE IsImageDynamicallyRelocated:1;</span><br><span class="line">            BYTE SkipPatchingUser32Forwarders:1;</span><br><span class="line">            BYTE IsPackagedProcess:1;</span><br><span class="line">            BYTE IsAppContainer:1;</span><br><span class="line">            BYTE IsProtectedProcessLight:1;</span><br><span class="line">            BYTE IsLongPathAwareProcess:1;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    VOID* Mutant;</span><br><span class="line">    VOID* ImageBaseAddress;</span><br><span class="line">    _PEB_LDR_DATA* Ldr;</span><br><span class="line">    _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;</span><br><span class="line">    VOID* SubSystemData;</span><br><span class="line">    VOID* ProcessHeap;</span><br><span class="line">    _RTL_CRITICAL_SECTION* FastPebLock;</span><br><span class="line">    _SLIST_HEADER* AtlThunkSListPtr;</span><br><span class="line">    VOID* IFEOKey;</span><br><span class="line">    union &#123;</span><br><span class="line">        DWORD CrossProcessFlags;</span><br><span class="line">        struct &#123;</span><br><span class="line">            DWORD ProcessInJob:1;</span><br><span class="line">            DWORD ProcessInitializing:1;</span><br><span class="line">            DWORD ProcessUsingVEH:1;</span><br><span class="line">            DWORD ProcessUsingVCH:1;</span><br><span class="line">            DWORD ProcessUsingFTH:1;</span><br><span class="line">            DWORD ReservedBits0:27;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    union &#123;</span><br><span class="line">        VOID* KernelCallbackTable;</span><br><span class="line">        VOID* UserSharedInfoPtr;</span><br><span class="line">    &#125;;</span><br><span class="line">    DWORD SystemReserved[1];</span><br><span class="line">    _SLIST_HEADER* AtlThunkSListPtr32;</span><br><span class="line">    VOID* ApiSetMap;</span><br><span class="line">    DWORD TlsExpansionCounter;</span><br><span class="line">    VOID* TlsBitmap;</span><br><span class="line">    DWORD TlsBitmapBits[2];</span><br><span class="line">    VOID* ReadOnlySharedMemoryBase;</span><br><span class="line">    VOID* SparePvoid0;</span><br><span class="line">    VOID** ReadOnlyStaticServerData;</span><br><span class="line">    VOID* AnsiCodePageData;</span><br><span class="line">    VOID* OemCodePageData;</span><br><span class="line">    VOID* UnicodeCaseTableData;</span><br><span class="line">    DWORD NumberOfProcessors;</span><br><span class="line">    DWORD NtGlobalFlag;</span><br><span class="line">    _LARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line">    DWORD HeapSegmentReserve;</span><br><span class="line">    DWORD HeapSegmentCommit;</span><br><span class="line">    DWORD HeapDeCommitTotalFreeThreshold;</span><br><span class="line">    DWORD HeapDeCommitFreeBlockThreshold;</span><br><span class="line">    DWORD NumberOfHeaps;</span><br><span class="line">    DWORD MaximumNumberOfHeaps;</span><br><span class="line">    VOID** ProcessHeaps;</span><br><span class="line">    VOID* GdiSharedHandleTable;</span><br><span class="line">    VOID* ProcessStarterHelper;</span><br><span class="line">    DWORD GdiDCAttributeList;</span><br><span class="line">    _RTL_CRITICAL_SECTION* LoaderLock;</span><br><span class="line">    DWORD OSMajorVersion;</span><br><span class="line">    DWORD OSMinorVersion;</span><br><span class="line">    WORD OSBuildNumber;</span><br><span class="line">    WORD OSCSDVersion;</span><br><span class="line">    DWORD OSPlatformId;</span><br><span class="line">    DWORD ImageSubsystem;</span><br><span class="line">    DWORD ImageSubsystemMajorVersion;</span><br><span class="line">    DWORD ImageSubsystemMinorVersion;</span><br><span class="line">    DWORD ActiveProcessAffinityMask;</span><br><span class="line">    DWORD GdiHandleBuffer[34];</span><br><span class="line">    void* PostProcessInitRoutine;</span><br><span class="line">    VOID* TlsExpansionBitmap;</span><br><span class="line">    DWORD TlsExpansionBitmapBits[32];</span><br><span class="line">    DWORD SessionId;</span><br><span class="line">    _ULARGE_INTEGER AppCompatFlags;</span><br><span class="line">    _ULARGE_INTEGER AppCompatFlagsUser;</span><br><span class="line">    VOID* pShimData;</span><br><span class="line">    VOID* AppCompatInfo;</span><br><span class="line">    _UNICODE_STRING CSDVersion;</span><br><span class="line">    _ACTIVATION_CONTEXT_DATA* ActivationContextData;</span><br><span class="line">    _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;</span><br><span class="line">    _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;</span><br><span class="line">    _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;</span><br><span class="line">    DWORD MinimumStackCommit;</span><br><span class="line">    _FLS_CALLBACK_INFO* FlsCallback;</span><br><span class="line">    _LIST_ENTRY FlsListHead;</span><br><span class="line">    VOID* FlsBitmap;</span><br><span class="line">    DWORD FlsBitmapBits[4];</span><br><span class="line">    DWORD FlsHighIndex;</span><br><span class="line">    VOID* WerRegistrationData;</span><br><span class="line">    VOID* WerShipAssertPtr;</span><br><span class="line">    VOID* pUnused;</span><br><span class="line">    VOID* pImageHeaderHash;</span><br><span class="line">    union &#123;</span><br><span class="line">        DWORD TracingFlags;</span><br><span class="line">        struct &#123;</span><br><span class="line">            QWORD HeapTracingEnabled:1;</span><br><span class="line">            QWORD CritSecTracingEnabled:1;</span><br><span class="line">            QWORD LibLoaderTracingEnabled:1;</span><br><span class="line">            QWORD SpareTracingBits:29;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    QWORD CsrServerReadOnlySharedMemoryBase;</span><br><span class="line">    DWORD TppWorkerpListLock;</span><br><span class="line">    _LIST_ENTRY TppWorkerpList;</span><br><span class="line">    VOID* WaitOnAddressHashTable[128];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近给&lt;a href=&quot;https://github.com/0cch/0c
      
    
    </summary>
    
      <category term="Debugging" scheme="http://0cch.com/categories/Debugging/"/>
    
    
  </entry>
  
  <entry>
    <title>Delphi异常0EEDFADE</title>
    <link href="http://0cch.com/2017/04/04/delphi-exception/"/>
    <id>http://0cch.com/2017/04/04/delphi-exception/</id>
    <published>2017-04-04T02:03:16.000Z</published>
    <updated>2017-11-26T08:52:02.545Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>0EEDFADE是Delphi内部异常代码，该异常通常有7个参数，我们用的上的是第二个参数，这个参数指向的是Exception的对象，通过这个对象，我们就可以查出异常的一些信息。</p><p>以Delphi XE2为例,Class name的偏移为（不同的版本偏移有所不同）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x86_vmtClassName = -56(0x38);</span><br><span class="line">x64_vmtClassName = -112(0x70);</span><br></pre></td></tr></table></figure></p><p>我们可以用如下命令获取相关信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x86: da poi(poi(exception_object)-38)+1;du /c 100 poi(exception_object+4)  </span><br><span class="line">x64: da poi(poi(exception_object)-70)+1;du /c 100 poi(exception_object+8)</span><br></pre></td></tr></table></figure></p><p>以上命令就能获取异常的类名，而exception_object+sizeof(pointer)则是Exception Message的所在偏移，这是一个unicode string。实际效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:002&gt; da poi(poi(003a2800)-38)+1;du /c 100 poi(003a2800 +4)</span><br><span class="line">00b9ec47  &quot;TTransportExceptionUnknown&quot;</span><br><span class="line">00375b8c  &quot;ServerTransport.Accept() may not return NULL&quot;</span><br></pre></td></tr></table></figure><p>当然，我们也可以设置event filter去截获异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x86: sxe -c &quot;da poi(poi(poi(@ebp+1c))-38)+1;du /c 100 poi(poi(@ebp+1c)+4)&quot; 0EEDFADE</span><br><span class="line">x64: sxe -c &quot;da poi(poi(poi(@rbp+48))-70)+1;du /c 100 poi(poi(@rbp+48)+8)&quot; 0EEDFADE</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;0EEDFADE是Delphi内部异常代码，该异常通常有7个参数，我们用的上
      
    
    </summary>
    
      <category term="Debugging" scheme="http://0cch.com/categories/Debugging/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows 10设置系统DPI</title>
    <link href="http://0cch.com/2017/03/08/set-dpi/"/>
    <id>http://0cch.com/2017/03/08/set-dpi/</id>
    <published>2017-03-08T06:47:37.000Z</published>
    <updated>2017-11-26T08:52:02.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>现在的显示器分辨率越来越高2K，4K甚至5K，而很多程序并不支持这一的高分辨率，所以这些程序在桌面上会显示的很小，好在Windows 8以后的系统中，我们可以设置DPI来放大程序的窗口，如下图所示：  </p><p><a href="/uploads/2017/03/20170309145111.png"><img src="/uploads/2017/03/20170309145111.png" alt="20170309145111"></a></p><p>但是，微软并没有把设置DPI的接口文档化。所以我把这个功能逆了一下，还原的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BOOL ApplyDpiSetting(int val);</span></span><br><span class="line"><span class="comment">val 为DPI要设置的数字，例如0是100%，1是125%，以此类推，注意250%以后是300%。</span></span><br><span class="line"><span class="comment">另外上面的对应关系只是通常情况下的，还有可能有其他对应关系，例如0是300%，-1是250%等等。</span></span><br><span class="line"><span class="comment">具体怎么对应可以通过GetDpiForMonitor函数来获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SET_DPI</span> &#123;</span></span><br><span class="line">    DISPLAYCONFIG_DEVICE_INFO_HEADER header;</span><br><span class="line">    ULONG val;</span><br><span class="line">&#125; SET_DPI;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ApplyDpiSetting</span><span class="params">(ULONG val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UINT32 num_of_paths = <span class="number">0</span>;</span><br><span class="line">    UINT32 num_of_modes = <span class="number">0</span>;</span><br><span class="line">    DISPLAYCONFIG_PATH_INFO* display_paths = <span class="literal">NULL</span>; </span><br><span class="line">    DISPLAYCONFIG_MODE_INFO* display_modes = <span class="literal">NULL</span>;</span><br><span class="line">    BOOL retval = FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GetDisplayConfigBufferSizes(QDC_ONLY_ACTIVE_PATHS, </span><br><span class="line">            &amp;num_of_paths, </span><br><span class="line">            &amp;num_of_modes) != ERROR_SUCCESS) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        display_paths = (DISPLAYCONFIG_PATH_INFO*)<span class="built_in">calloc</span>((<span class="keyword">int</span>)num_of_paths, <span class="keyword">sizeof</span>(DISPLAYCONFIG_PATH_INFO));</span><br><span class="line">        display_modes = (DISPLAYCONFIG_MODE_INFO*)<span class="built_in">calloc</span>((<span class="keyword">int</span>)num_of_modes, <span class="keyword">sizeof</span>(DISPLAYCONFIG_MODE_INFO));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (QueryDisplayConfig(QDC_ONLY_ACTIVE_PATHS, </span><br><span class="line">            &amp;num_of_paths, </span><br><span class="line">            display_paths, </span><br><span class="line">            &amp;num_of_modes, </span><br><span class="line">            display_modes, </span><br><span class="line">            <span class="literal">NULL</span>) != ERROR_SUCCESS) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SET_DPI dpi;</span><br><span class="line">        dpi.header.type = (DISPLAYCONFIG_DEVICE_INFO_TYPE)<span class="number">0xFFFFFFFC</span>;</span><br><span class="line">        dpi.header.size = <span class="keyword">sizeof</span>(dpi);</span><br><span class="line">        dpi.header.adapterId = display_paths[<span class="number">0</span>].sourceInfo.adapterId;</span><br><span class="line">        dpi.header.id = display_paths[<span class="number">0</span>].sourceInfo.id;</span><br><span class="line">        dpi.val = val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DisplayConfigSetDeviceInfo((DISPLAYCONFIG_DEVICE_INFO_HEADER*)&amp;dpi) == ERROR_SUCCESS) &#123;</span><br><span class="line">            retval = TRUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (display_paths) &#123;</span><br><span class="line">        <span class="built_in">free</span>(display_paths);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (display_modes) &#123;</span><br><span class="line">        <span class="built_in">free</span>(display_modes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;现在的显示器分辨率越来越高2K，4K甚至5K，而很多程序并不支持这一的高分辨
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>让编译器不推荐(deprecate)使用一个函数</title>
    <link href="http://0cch.com/2017/02/12/deprecate-a-function/"/>
    <id>http://0cch.com/2017/02/12/deprecate-a-function/</id>
    <published>2017-02-12T02:41:34.000Z</published>
    <updated>2017-11-26T08:52:02.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在开发一些公共库函数的时候，我们常常会对函数进行改写，这个时候我们会希望使用者用新的函数。为了提醒使用者，我们可以通过将函数声明为deprecated，这样编译器在编译的时候会抛出一个C4995或者C4996的警告。这个警告我们应该也经常看到过，比如使用strcpy，编译器会提示我们使用strcpy_s。  </p><p>使用这个编译器特性有两种方法：  </p><ol><li>__declspec(deprecated)</li><li>#pragma deprecated</li></ol><ul><li>__declspec(deprecated)<br><a href="https://msdn.microsoft.com/en-us/library/044swk7y.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/044swk7y.aspx</a><br>这种方法直接声明在函数或者类之前，在使用函数的地方会抛出C4996的警告  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__declspec(deprecated) void func1(int) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当然我们还可以给警告自定义消息信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__declspec(deprecated(&quot;** this is a deprecated function **&quot;)) void func2(int) &#123;&#125;</span><br></pre></td></tr></table></figure></p><ul><li>#pragma deprecated<br><a href="https://msdn.microsoft.com/en-us/library/c8xdzzhh.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/c8xdzzhh.aspx</a><br>这种方法可以一次性声明多个函数或者类，使用函数的地方会抛出C4995的警告  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pragma deprecated(func1, func2)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在开发一些公共库函数的时候，我们常常会对函数进行改写，这个时候我们会希望使用
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>PDB 下载工具</title>
    <link href="http://0cch.com/2017/01/02/pdbdownloader/"/>
    <id>http://0cch.com/2017/01/02/pdbdownloader/</id>
    <published>2017-01-02T04:06:25.000Z</published>
    <updated>2017-11-26T08:52:02.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前段时间微软的符号服务器特别不稳定，Windbg下载符号文件老是失败，所以就专门写了个pdb的下载工具(<a href="https://github.com/0cch/pdbdownloader" target="_blank" rel="noopener">pdbdownloader</a>)放到Github上。  </p><p>P.S. 用WPF写界面确实是很有趣  </p><p><a href="/uploads/2017/01/20170103120319.png"><img src="/uploads/2017/01/20170103120319.png" alt="20170103120319"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;前段时间微软的符号服务器特别不稳定，Windbg下载符号文件老是失败，所以就
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>快速抛出失败的方法 INT 29H</title>
    <link href="http://0cch.com/2016/12/13/int29h/"/>
    <id>http://0cch.com/2016/12/13/int29h/</id>
    <published>2016-12-13T02:36:42.000Z</published>
    <updated>2017-11-26T08:52:02.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>从Windows8开始，Windows设计了一个新的中断，INT 29H，用来快速的抛出失败。在sdk中，他被声明为 __fastfail:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_LEGACY_GS_VIOLATION          0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_VTGUARD_CHECK_FAILURE        1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_STACK_COOKIE_CHECK_FAILURE   2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_CORRUPT_LIST_ENTRY           3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INCORRECT_STACK              4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_ARG                  5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GS_COOKIE_INIT               6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_FATAL_APP_EXIT               7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_RANGE_CHECK_FAILURE          8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_UNSAFE_REGISTRY_ACCESS       9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GUARD_ICALL_CHECK_FAILURE    10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GUARD_WRITE_CHECK_FAILURE    11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_FIBER_SWITCH         12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_SET_OF_CONTEXT       13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_REFERENCE_COUNT      14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_JUMP_BUFFER          18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_MRDATA_MODIFIED              19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_CERTIFICATION_FAILURE        20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_EXCEPTION_CHAIN      21</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_CRYPTO_LIBRARY               22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT  23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_IMAGE_BASE           24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_DLOAD_PROTECTION_FAILURE     25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_UNSAFE_EXTENSION_CALL        26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_DEPRECATED_SERVICE_INVOKED   27</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_BUFFER_ACCESS        28</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_BALANCED_TREE        29</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_NEXT_THREAD          30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED 31         <span class="comment">// Telemetry, nonfatal</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_APCS_DISABLED                32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_IDLE_STATE           33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_MRDATA_PROTECTION_FAILURE    34</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION    35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_FAST_FAIL_CODE       0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt;= 1610</span></span><br><span class="line"></span><br><span class="line">DECLSPEC_NORETURN</span><br><span class="line">VOID</span><br><span class="line">__fastfail(</span><br><span class="line">    _In_ <span class="keyword">unsigned</span> <span class="keyword">int</span> Code</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> intrinsic(__fastfail)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 汇编代码为</span></span><br><span class="line"><span class="comment">mov ecx, code</span></span><br><span class="line"><span class="comment">int 29h</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在中断代码执行后，操作系统会根据执行代码的环境来做出不同的处理。<br>如果<strong>fastfail发生在Ring0中，操作系统会抛出一个KERNEL_SECURITY_CHECK_FAILURE (0x139)的蓝屏。如果</strong>fastfail发生在Ring3，系统会抛出一个第二次机会的不可继续执行的异常，异常代码为0xC0000409，然后走进我们熟悉的Windows Error Reporting(WER)流程。另外，无论__fastfail发生在R0或者R3，如果有调试器正在调试系统或进程，都将得到一次中断到调试器的机会，这让我们能够看清楚具体发生了什么事情。但是正如我上面所说，这个是一个不可继续执行的异常，所以我们不能在调试器里处理了异常后让程序继续向前跑，当然也不能用try和except去捕获异常。</p><p>我觉得__fastfail是个非常不错的设计，它让程序可以快速的进入内核异常处理流程，不需要执行额外的用户层的代码，也不需要额外的内存空间，提高了不可恢复的异常处理的性能，更重要的是，简单快速不依赖内存的执行方式也保证了系统的安全。所以在系统的安全检查失败处理中，大量使用了这个方式，减少被攻击的可能性。</p><p>最后，如果INT 29H发生在Windows8以下的系统上，内核里会抛出一个常规的UNEXPECTED_KERNEL_MODE_TRAP的蓝屏，而用户层程序会抛出一个ACCESS VIOLATION的异常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;从Windows8开始，Windows设计了一个新的中断，INT 29H，用
      
    
    </summary>
    
      <category term="Debugging" scheme="http://0cch.com/categories/Debugging/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg的lua脚本扩展luadbg</title>
    <link href="http://0cch.com/2016/11/15/luadbg-windbg-ext/"/>
    <id>http://0cch.com/2016/11/15/luadbg-windbg-ext/</id>
    <published>2016-11-15T02:50:37.000Z</published>
    <updated>2017-11-26T08:52:02.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>2012年的时候，我在blog上写到过开发了一个windbg的lua扩展<a href="https://0cch.com/debugging/2012/08/16/dbglua-ef-bc-8c-e8-ae-a9lua-e8-84-9a-e6-9c-ac-e4-b9-9f-e8-83-bd-e6-8e-a7-e5-88-b6windbg-e8-bf-9b-e8-a1-8c-e8-b0-83-e8-af-95.html">dbglua</a>，当时觉得windbg的原生脚本语法太奇怪了，而且太不容易使用。现在来看，依旧如此，只不过我已经很熟悉这个原生脚本了。而这个lua扩展反倒是没什么用，因为用起来也不太方便，比如访问结构体。</p><p>最近无意之中看了一眼pykd，他用重载.操作符的方式访问符号和结构体深深的吸引了我，感觉非常有趣。而python本身依赖比较多，这也促使我拿起之前的代码看了看，并且决定在github上重新建立这个项目叫做<a href="https://github.com/0cch/luadbg" target="_blank" rel="noopener">luadbg</a>，这次我决定长期维护这个项目，想到新的功能就往里面写，就像我一直维护的<a href="https://github.com/0cch/0cchext" target="_blank" rel="noopener">0cchext</a>一样。luadbg除了兼容了老dbglua的函数以外，还添加了几个我觉得很方便的类，主要是用重载.操作符的方式来访问模块和结构体的数据，效果如下图所示：</p><p><a href="/uploads/2016/11/20161116113129.png"><img src="/uploads/2016/11/20161116113129.png" alt="20161116113129"></a></p><p>当然，也可以用!luacmd命令进入input模式，从而一条一条的输入语句来测试正确性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;2012年的时候，我在blog上写到过开发了一个windbg的lua扩展&lt;a
      
    
    </summary>
    
      <category term="Debugging" scheme="http://0cch.com/categories/Debugging/"/>
    
    
  </entry>
  
</feed>
