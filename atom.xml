<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0CCh Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0cch.com/"/>
  <updated>2019-09-04T04:01:52.788Z</updated>
  <id>http://0cch.com/</id>
  
  <author>
    <name>0CCh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打印机API相关的一点记录</title>
    <link href="http://0cch.com/2019/09/03/printer-api-tip/"/>
    <id>http://0cch.com/2019/09/03/printer-api-tip/</id>
    <published>2019-09-03T12:01:29.000Z</published>
    <updated>2019-09-04T04:01:52.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近研究了一点Windows上打印相关的内容，发现打印这块的东西的确挺多的。比如纸张，分辨率，打印处理器，打印数据类型等等。</p><p>首先我们需要通过<code>EnumPrintersW</code>枚举打印机，为了方便我写了一个简单的类模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> = <span class="title">PRINTER_INFO_2</span>, <span class="title">int</span> <span class="title">level</span> = 2&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">CEnumPrinter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(ULONG flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ULONG bytes_needed = <span class="number">0</span>;</span><br><span class="line">        ULONG elems_returned = <span class="number">0</span>;</span><br><span class="line">        EnumPrintersW(flags, <span class="literal">nullptr</span>, level, <span class="literal">nullptr</span>, <span class="number">0</span>, &amp;bytes_needed, &amp;elems_returned);</span><br><span class="line">        buffer_.resize(bytes_needed);</span><br><span class="line">        EnumPrintersW(flags, <span class="literal">nullptr</span>, level, buffer_.data(), bytes_needed, &amp;bytes_needed, &amp;elems_returned);</span><br><span class="line">        elems_returned_ = elems_returned;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ULONG <span class="title">Count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elems_returned_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>[] (ULONG idx)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(idx &lt; elems_returned_);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;T*&gt;(buffer_.data())[idx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;UCHAR&gt; buffer_;</span><br><span class="line">    ULONG elems_returned_ = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在枚举和选择目标打印机之后可以通过<code>PRINTER_INFO_2</code>中的<code>pPrinterName</code>获得打印机句柄。为了方便也写了一个类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPrinterHandle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~CPrinterHandle() </span><br><span class="line">    &#123;</span><br><span class="line">        Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Open</span><span class="params">(LPCWSTR printer_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;WCHAR&gt; name;</span><br><span class="line">        name.resize(wcslen(printer_name) + <span class="number">1</span>);</span><br><span class="line">        wcscpy_s(name.data(), name.size(), printer_name);</span><br><span class="line">        <span class="keyword">return</span> OpenPrinter(name.data(), &amp;printer_, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">HANDLE <span class="title">Detach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        HANDLE h = printer_;</span><br><span class="line">        printer_ = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">HANDLE <span class="title">Attach</span><span class="params">(HANDLE printer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        HANDLE h = printer_;</span><br><span class="line">        printer_ = printer;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (printer_) &#123;</span><br><span class="line">            ClosePrinter(printer_);</span><br><span class="line">            printer_ = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">HANDLE</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> printer_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HANDLE printer_ = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而通过这个句柄就可以做很多的事情了，比如获取打印机的具体配置，弹出打印机属性对话框等等，这里以获取其支持的纸张类型为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span> = <span class="title">FORM_INFO_1</span>, <span class="title">int</span> <span class="title">level</span> = 1&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">CEnumPrinterForm</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(HANDLE hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ULONG bytes_needed = <span class="number">0</span>;</span><br><span class="line">        ULONG elems_returned = <span class="number">0</span>;</span><br><span class="line">        EnumForms(hp, level, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;bytes_needed, &amp;elems_returned);</span><br><span class="line">        buffer_.resize(bytes_needed);</span><br><span class="line">        EnumForms(hp, level, buffer_.data(), bytes_needed, &amp;bytes_needed, &amp;elems_returned);</span><br><span class="line">        elems_returned_ = elems_returned;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ULONG <span class="title">Count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elems_returned_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>[] (ULONG idx)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(idx &lt; elems_returned_);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;T*&gt;(buffer_.data())[idx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;UCHAR&gt; buffer_;</span><br><span class="line">    ULONG elems_returned_ = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以枚举出类似A3、A4、B5这种纸张类型。不过这套打印数据的函数有一些不太友好，因为通过打印机句柄打印数据，我们只能传输emf或者raw格式的数据。而我们比较熟悉的方法是通过DC绘制图形并且打印，这样所见即所得用起来会更舒适。不过，这套API没有提供用打印机句柄转换到HDC的方法。只能通过<code>PRINTER_INFO_2</code>中的<code>pPrinterName</code>和<code>pDevMode</code>重新打开一个HDC，然后通过HDC相关的API进行打印。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hdc = CreateDCW(<span class="literal">NULL</span>, info.pPrinterName, <span class="literal">NULL</span>, info.pDevMode);</span><br><span class="line">DOCINFO docInfo = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">docInfo.cbSize = <span class="keyword">sizeof</span>(docInfo);</span><br><span class="line">docInfo.lpszDocName = <span class="string">L"test"</span>;</span><br><span class="line"></span><br><span class="line">RECT rc = &#123; <span class="number">40</span>, <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">StartDoc(hdc, &amp;docInfo);</span><br><span class="line">StartPage(hdc);</span><br><span class="line">DrawTextA(hdc, <span class="string">"hello"</span>, <span class="number">-1</span>, &amp;rc, DT_SINGLELINE | DT_NOCLIP);</span><br><span class="line">EndPage(hdc);</span><br><span class="line">StartPage(hdc);</span><br><span class="line">DrawTextA(hdc, <span class="string">"world"</span>, <span class="number">-1</span>, &amp;rc, DT_SINGLELINE | DT_NOCLIP);</span><br><span class="line">EndPage(hdc);</span><br><span class="line">EndDoc(hdc);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近研究了一点Windows上打印相关的内容，发现打印这块的东西的确挺多的。
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>vs使用qt4.natvis</title>
    <link href="http://0cch.com/2019/08/01/vs-with-qt4-natvis/"/>
    <id>http://0cch.com/2019/08/01/vs-with-qt4-natvis/</id>
    <published>2019-08-01T01:05:03.000Z</published>
    <updated>2019-08-01T01:14:38.258Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>上一篇blog讲到了windbg使用qt4.natvis解析qt数据结构的方法，那么接下来就该轮到VS了。在VS中使用natvis会更加简单，只需要将qt4.nativs拷贝到<code>%VSINSTALLDIR%\Common7\Packages\Debugger\Visualizers</code>即可。当然，这篇blog不可能只写这么点东西。qt4.natvis很好，它解析了很多QT的数据结构，比如QMap，QPoint，QVector，QMatrix等等，不过有一点很遗憾，它没有解析QObject。因为解析QObject可以获取对象的父子节点，这样很容易了解对象的树形结构。于是我这里对qt4.natvis进行了一点修改，添加了对QObject的解析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span>=<span class="string">"QObject"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DisplayString</span>&gt;</span>&#123;&#123;&#123;*(char **)(*(char **)(*(char **)this - 4) + 12) + 12,sb&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Expand</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ExpandedItem</span>&gt;</span>d_ptr.d-&gt;children<span class="tag">&lt;/<span class="name">ExpandedItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Expand</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释一下这段xml，<code>&lt;Type Name=&quot;QObject&quot;&gt;&quot;</code>是指定匹配的对象类型名，这里当然就是QObject了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DisplayString</span>&gt;</span>&#123;&#123;&#123;*(char **)(*(char **)(*(char **)this - 4) + 12) + 12,sb&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于展示当前QObject的实际类型，也就是QObject的派生类名。这里采用的方法是获取虚表上的<code>RTTICompleteObjectLocator</code>对象指针，然后在获取<code>TypeDescriptor</code>。具体是怎么获取的那将是一篇长篇大论，这里就不展开了。最后<code>&lt;ExpandedItem&gt;d_ptr.d-&gt;children&lt;/ExpandedItem&gt;</code>则是将其子对象展示出来，这样就能一目了然的指定其子对象的真实类型了。</p><p><img src="/uploads/2019/08/20190801183332.png" alt="20190801183332"></p><p>从图中可以看到，除了str、str_list和str_map可以直接的看到数据之外，QMsgTest、QToolBar的子对象个数和类型也能一目了然。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;上一篇blog讲到了windbg使用qt4.natvis解析qt数据结构的方
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg使用qt4.natvis</title>
    <link href="http://0cch.com/2019/07/30/windbg-with-qt4-natvis/"/>
    <id>http://0cch.com/2019/07/30/windbg-with-qt4-natvis/</id>
    <published>2019-07-30T10:59:11.000Z</published>
    <updated>2019-07-30T11:05:24.211Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>用windbg调试QT程序或者分析QT程序的dump是一件痛苦的事情，因为windbg缺少对QT基础数据的展示能力，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="string">"hello world"</span>;</span><br><span class="line">    QList&lt;QString&gt; str_list;</span><br><span class="line">    str_list.append(str);</span><br><span class="line">    QMap&lt;<span class="keyword">int</span>, QString&gt; str_map;</span><br><span class="line">    str_map[<span class="number">11</span>] = str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这份代码使用windbg查看str，str_list或者str_map简直是一件折磨的事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dv</span><br><span class="line">           argc = 0n1</span><br><span class="line">           argv = 0x02cc5e00</span><br><span class="line">            str = class QString</span><br><span class="line">       str_list = class QList&lt;QString&gt;</span><br><span class="line">        str_map = class QMap&lt;int,QString&gt;</span><br><span class="line">              a = class QApplication</span><br><span class="line">              w = class QMsgTest</span><br><span class="line">0:000&gt; dx str</span><br><span class="line">str                 [Type: QString]</span><br><span class="line">    [+0x000] d                : 0x2cc5d80 [Type: QString::Data *]</span><br><span class="line">0:000&gt; dx str_list</span><br><span class="line">str_list                 [Type: QList&lt;QString&gt;]</span><br><span class="line">    [+0x000] p                [Type: QListData]</span><br><span class="line">    [+0x000] d                : 0x2cc7258 [Type: QListData::Data *]</span><br><span class="line">0:000&gt; dx str_map</span><br><span class="line">str_map                 [Type: QMap&lt;int,QString&gt;]</span><br><span class="line">    [+0x000] d                : 0x2cc72b8 [Type: QMapData *]</span><br><span class="line">    [+0x000] e                : 0x2cc72b8 [Type: QMapData::Node *]</span><br></pre></td></tr></table></figure><p>可以看到，windbg只会告诉你类型，根本不会给你展示数据本身，如果要查看数据还得自己来算，以最复杂的QMap为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; ?? str_map.d-&gt;forward[0]</span><br><span class="line">struct QMapData * 0x031470f8</span><br><span class="line">   +0x000 backward         : 0x03147068 QMapData</span><br><span class="line">   +0x004 forward          : [12] 0x03147068 QMapData</span><br><span class="line">   +0x034 ref              : QBasicAtomicInt</span><br><span class="line">   +0x038 topLevel         : 0n-17891602</span><br><span class="line">   +0x03c size             : 0n-17891602</span><br><span class="line">   +0x040 randomBits       : 0xfeeefeee</span><br><span class="line">   +0x044 insertInOrder    : 0y0</span><br><span class="line">   +0x044 sharable         : 0y1</span><br><span class="line">   +0x044 strictAlignment  : 0y1</span><br><span class="line">   +0x044 reserved         : 0y11111110111011101111111011101 (0x1fdddfdd)</span><br><span class="line"></span><br><span class="line">0:000&gt; ?? sizeof(@!&quot;qtmsgtest!QMapPayloadNode&lt;int,QString&gt;&quot;)-sizeof(qtmsgtest!QMapData::Node*)</span><br><span class="line">unsigned int 8</span><br><span class="line"></span><br><span class="line">0:000&gt; dt qtmsgtest!QMapNode&lt;int,QString&gt; (0x31470f8-8)</span><br><span class="line">   +0x000 key              : 0n11</span><br><span class="line">   +0x004 value            : QString</span><br><span class="line">   +0x008 backward         : 0x03147068 QMapData::Node</span><br><span class="line">   +0x00c forward          : [1] 0x03147068 QMapData::Node</span><br><span class="line"></span><br><span class="line">0:000&gt; ?? ((qtmsgtest!QString*)0x31470f4)-&gt;d</span><br><span class="line">struct QString::Data * 0x03145b30</span><br><span class="line">   +0x000 ref              : QBasicAtomicInt</span><br><span class="line">   +0x004 alloc            : 0n11</span><br><span class="line">   +0x008 size             : 0n11</span><br><span class="line">   +0x00c data             : 0x03145b42  -&gt; 0x68</span><br><span class="line">   +0x010 clean            : 0y0</span><br><span class="line">   +0x010 simpletext       : 0y0</span><br><span class="line">   +0x010 righttoleft      : 0y0</span><br><span class="line">   +0x010 asciiCache       : 0y0</span><br><span class="line">   +0x010 capacity         : 0y0</span><br><span class="line">   +0x010 reserved         : 0y11001101110 (0x66e)</span><br><span class="line">   +0x012 array            : [1] 0x68</span><br><span class="line"></span><br><span class="line">0:000&gt; du @@C++(((qtmsgtest!QString*)0x31470f4)-&gt;d-&gt;data)</span><br><span class="line">03145b42  &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>你们看，为了获取key=11、value=”hello world”需要这么折腾一通，如果数据多了那不得抓狂。</p><p>不过幸运了是windbg现在支持natvis了，简单的说就是通过natvis里的配置自动解析和符号匹配的数据结构。接下来要做的就是找一个好用的qt的natvis了。我这里找了一个qt配合vs2012里的qt4.natvis，让我们看看加载后的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; .nvload qt4.natvis</span><br><span class="line">Successfully loaded visualizers in &quot;C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\Visualizers\qt4.natvis&quot;</span><br><span class="line">0:000&gt; dv</span><br><span class="line">           argc = 0n1</span><br><span class="line">           argv = 0x02cc5e00</span><br><span class="line">            str = hello world</span><br><span class="line">       str_list = &#123; size = 1 &#125;</span><br><span class="line">        str_map = &#123; size = 1 &#125;</span><br><span class="line">              a = class QApplication</span><br><span class="line">              w = class QMsgTest</span><br><span class="line">0:000&gt; dx str</span><br><span class="line">str                 : hello world [Type: QString]</span><br><span class="line">    [&lt;Raw View&gt;]     [Type: QString]</span><br><span class="line">    [size]           : 11 [Type: int]</span><br><span class="line">    [referenced]     : 3 [Type: long]</span><br><span class="line">    [0]              : 0x68 [Type: unsigned short]</span><br><span class="line">    [1]              : 0x65 [Type: unsigned short]</span><br><span class="line">    [2]              : 0x6c [Type: unsigned short]</span><br><span class="line">    [3]              : 0x6c [Type: unsigned short]</span><br><span class="line">    [4]              : 0x6f [Type: unsigned short]</span><br><span class="line">    [5]              : 0x20 [Type: unsigned short]</span><br><span class="line">    [6]              : 0x77 [Type: unsigned short]</span><br><span class="line">    [7]              : 0x6f [Type: unsigned short]</span><br><span class="line">    [8]              : 0x72 [Type: unsigned short]</span><br><span class="line">    [9]              : 0x6c [Type: unsigned short]</span><br><span class="line">    [10]             : 0x64 [Type: unsigned short]</span><br><span class="line">0:000&gt; dx str_list</span><br><span class="line">str_list                 : &#123; size = 1 &#125; [Type: QList&lt;QString&gt;]</span><br><span class="line">    [&lt;Raw View&gt;]     [Type: QList&lt;QString&gt;]</span><br><span class="line">    [referenced]     : 1 [Type: long]</span><br><span class="line">    [0x0]            : hello world [Type: QString]</span><br><span class="line">0:000&gt; dx str_map</span><br><span class="line">str_map                 : &#123; size = 1 &#125; [Type: QMap&lt;int,QString&gt;]</span><br><span class="line">    [&lt;Raw View&gt;]     [Type: QMap&lt;int,QString&gt;]</span><br><span class="line">    [referenced]     : 1 [Type: long]</span><br><span class="line">    [0x0]            : 0x2cc7340 : (11, hello world) [Type: QMapNode&lt;int,QString&gt; *]</span><br></pre></td></tr></table></figure><p>看到了么，无论是str，str_list还是str_map都直接打印出了内部的数据，无需大费周章的折腾，这简直是windbg爱好者调试qt程序的神器。</p><p>最后附上qt4.natvis的地址：<a href="https://gist.github.com/gregseth/9bcd0112f8492fa7bfe7" target="_blank" rel="noopener">https://gist.github.com/gregseth/9bcd0112f8492fa7bfe7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;用windbg调试QT程序或者分析QT程序的dump是一件痛苦的事情，因为w
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>Dump QT objects</title>
    <link href="http://0cch.com/2019/06/30/dump-qt-objects/"/>
    <id>http://0cch.com/2019/06/30/dump-qt-objects/</id>
    <published>2019-06-30T03:14:09.000Z</published>
    <updated>2019-07-30T03:14:42.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在QT中，QObject有两个函数<code>dumpObjectInfo()</code>和<code>dumpObjectTree()</code>分别用于dump相关对象树形结构和相关的连接信息。不过这两个函数有个共同的问题，只能在debug模式下使用。因为在Release模式下，这两个函数不做任何事情：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dumpRecursive</span><span class="params">(<span class="keyword">int</span> level, QObject *object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_DEBUG)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    Q_UNUSED(level)</span><br><span class="line">    Q_UNUSED(object)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> QObject::dumpObjectTree()</span><br><span class="line">&#123;</span><br><span class="line">    dumpRecursive(<span class="number">0</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> QObject::dumpObjectInfo()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_DEBUG)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能在Release模式下使用这两个函数，其中一个办法是删除<code>#if defined(QT_DEBUG)</code>宏，然后重新编译qtcore4.dll。不过重新编译QT需要一些准备工作，而且还需要较长的一段编译时间，所以我果断放弃了这种方法。</p><p>第二种想到的方法是自己实现<code>dumpObjectInfo()</code>和<code>dumpObjectTree()</code>这两个函数。实际上，实现<code>dumpObjectTree()</code>并不是一件难事，<code>qDebug()</code>本身就能dump QObject了，我们需要做的就是递归遍历对象节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dumpObjects</span><span class="params">(<span class="keyword">const</span> QObjectList &amp;objs, <span class="keyword">int</span> nIndent = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString strIndent;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nIndent; i++) &#123;</span><br><span class="line">        strIndent.append(<span class="string">"  "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Q_FOREACH(<span class="keyword">const</span> QObject *obj, objs)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; strIndent.toAscii().data() &lt;&lt; obj;</span><br><span class="line">        <span class="keyword">if</span> (!obj-&gt;children().isEmpty()) &#123;</span><br><span class="line">            dumpObjects(obj-&gt;children(), nIndent + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在想要遍历QT对象时，我们只需要将对象的子节点列表传入函数即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMsgTest w;</span><br><span class="line">dumpObjects(w.children());</span><br></pre></td></tr></table></figure><p>输出的数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">QMainWindowLayout(0x36ba208, name = &quot;_layout&quot;) </span><br><span class="line"> QRubberBand(0x36ba778, name = &quot;qt_rubberband&quot;) </span><br><span class="line"> QMenuBar(0x36bab78, name = &quot;menuBar&quot;) </span><br><span class="line">   QToolButton(0x36bae88, name = &quot;qt_menubar_ext_button&quot;) </span><br><span class="line"> QToolBar(0x36bb820, name = &quot;mainToolBar&quot;) </span><br><span class="line">   QToolBarLayout(0x36bbb50) </span><br><span class="line">   QToolBarExtension(0x36bbc80, name = &quot;qt_toolbar_ext_button&quot;) </span><br><span class="line">   QAction(0x36bc5a0) </span><br><span class="line">   QPropertyAnimation(0x36bcf90) </span><br><span class="line">   QPropertyAnimation(0x35098f8) </span><br><span class="line"> QWidget(0x36bcac0, name = &quot;centralWidget&quot;) </span><br><span class="line">   QPropertyAnimation(0x36bbed8) </span><br><span class="line">   QPropertyAnimation(0x3509cf0) </span><br><span class="line"> QStatusBar(0x36bcd70, name = &quot;statusBar&quot;) </span><br><span class="line">   QSizeGrip(0x36bbac0) </span><br><span class="line">   QHBoxLayout(0x36b3ad0) </span><br><span class="line">     QVBoxLayout(0x36bd5d8) </span><br><span class="line">       QHBoxLayout(0x36bd818)</span><br></pre></td></tr></table></figure><p>怎么样，是不是很容易实现。不过接下来就要泼一盆冷水了，因为<code>dumpObjectInfo()</code>函数就没有那么容易实现了。主要原因是<code>dumpObjectInfo()</code>函数中有大量的依赖关系，如果单纯的扣代码过来牵扯会非常广，所以这个方法似乎也进行不下去了。</p><p>最后，我想到了第三种方法，在Release模式下加载Debug版本的qtcored4.dll，获取其函数地址并且直接调用它。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PVOID dumpFunc = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">void</span>* (*myInstallMsgHandler)(<span class="keyword">void</span>* h) = <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> myMsgHandler(QtMsgType t, <span class="keyword">const</span> <span class="keyword">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">    OutputDebugStringW(QString(<span class="string">"%1\n"</span>).arg(str).utf16());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE h = LoadLibraryW(<span class="string">L"qtcored4.dll"</span>);</span><br><span class="line">    dumpFunc = GetProcAddress(h, <span class="string">"?dumpObjectInfo@QObject@@QAEXXZ"</span>);</span><br><span class="line">    *(<span class="keyword">void</span> **)&amp;myInstallMsgHandler = GetProcAddress(h, <span class="string">"?qInstallMsgHandler@@YAP6AXW4QtMsgType@@PBD@ZP6AX01@Z@Z"</span>);</span><br><span class="line">    myInstallMsgHandler(myMsgHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dumpObjInfo</span><span class="params">(<span class="keyword">void</span> *obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov ecx, obj</span><br><span class="line">        call dumpFunc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Init();</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QMsgTest w;</span><br><span class="line">    w.show();</span><br><span class="line">    dumpObjInfo(&amp;w);</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下这段代码，首先Init函数是用来加载qtcored4.dll以及初始化相关的函数，这里GetProcAddress获取的函数分别是<code>qInstallMsgHandler</code>和<code>dumpObjectInfo</code>，之所以代码中的函数名这么复杂是因为C++使用的Decorated Name规则导致的，可以用一些PE工具查看导出函数来获取这个名字。另外我们看到，出了获取<code>dumpObjectInfo</code>函数外，还获取了<code>qInstallMsgHandler</code>函数。因为我们需要使用这个函数注册输出调试信息的函数，在代码中是<code>myMsgHandler</code>。最后，为了方便的调用<code>dumpObjectInfo</code>的函数指针，我采用了内嵌汇编的方式。因为<code>dumpObjectInfo</code>是成员函数，所以肯定是thiscall，于是将obj赋予ecx寄存器并且调用函数指针即可。</p><p>编译运行可以看到输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BJECT QMsgTest::QMsgTestClass</span><br><span class="line">  SIGNALS OUT</span><br><span class="line">        signal: destroyed(QObject*)</span><br><span class="line">        signal: destroyed()</span><br><span class="line">        signal: customContextMenuRequested(QPoint)</span><br><span class="line">        signal: iconSizeChanged(QSize)</span><br><span class="line">          --&gt; QToolBar::mainToolBar _q_updateIconSize(QSize)</span><br><span class="line">        signal: toolButtonStyleChanged(Qt::ToolButtonStyle)</span><br><span class="line">          --&gt; QToolBar::mainToolBar _q_updateToolButtonStyle(Qt::ToolButtonStyle)</span><br><span class="line">  SIGNALS IN</span><br><span class="line">        &lt;None&gt;</span><br></pre></td></tr></table></figure><p>当然了，内嵌汇编不是一个好的代码风格，这里只是为了快速验证方案的可行性。更符合C++语法习惯的方式应该是声明一个成员函数指针，然后用<code>GetProcAddress</code>获取对应的函数地址对其赋值，最后调用成员函数指针。具体怎么实现仁者见仁智者见智，我这篇blog只是抛砖引玉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在QT中，QObject有两个函数&lt;code&gt;dumpObjectInfo(
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>windbg监听QT事件</title>
    <link href="http://0cch.com/2019/05/29/qt-event-wds/"/>
    <id>http://0cch.com/2019/05/29/qt-event-wds/</id>
    <published>2019-05-29T06:18:58.000Z</published>
    <updated>2019-07-29T06:20:03.813Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Windows平台下做过界面开发的程序员肯定知道窗口界面是由消息驱动的。为了能方便的调试窗口消息循环，Windows提供了spy++这样的工具帮助我们监控消息。但是Windows的消息在QT的程序上可能只有部分有用。所以我们还需要一个监控QT窗口事件的工具，不过可惜的是我并没有找到这样现成的工具。于是我用Windbg的断点命令写了一个。</p><p>不过写断点命令之前必须先搞清楚在QT中事件都是怎么发出来的。经过调试确认了几个函数，分别是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QCoreApplication::sendEvent</span><br><span class="line">QCoreApplication::sendSpontaneousEvent</span><br><span class="line">QCoreApplication::postEvent</span><br></pre></td></tr></table></figure><p>接下来我们可以对它们下断点了。当然，这里不是直接了当下断点那么的简单。我们需要在断点中插入命令，让断点命中后打印我们想要的内容，然后继续运行。我这里的写法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bm /( qtcored4!QCoreApplication::postEvent &quot;.printf \&quot;P  \&quot;;?? @@C++(static_cast&lt;QtGuid4!QEvent::Type&gt;(event-&gt;t));g&quot;</span><br><span class="line">bc 2</span><br><span class="line">bm /( qtcored4!QCoreApplication::sendEvent &quot;.printf \&quot;S  \&quot;;?? @@C++(static_cast&lt;QtGuid4!QEvent::Type&gt;(event-&gt;t));g&quot;</span><br><span class="line">bm /( qtcored4!QCoreApplication::sendSpontaneousEvent &quot;.printf \&quot;SS \&quot;;?? @@C++(static_cast&lt;QtGuid4!QEvent::Type&gt;(event-&gt;t));g&quot;</span><br></pre></td></tr></table></figure><p>在windbg中执行后，运行程序就能看到事件一个一个的打印出来了，而且打印出来的并不是冷冰冰的事件数字，而是数字所代表的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">SS QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">P  QEvent::Type UpdateRequest (0n77)</span><br><span class="line">S  QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">S  QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">SS QEvent::Type ActivationChange (0n99)</span><br><span class="line">SS QEvent::Type ApplicationDeactivate (0n122)</span><br><span class="line">S  QEvent::Type UpdateRequest (0n77)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type ApplicationActivate (0n121)</span><br><span class="line">SS QEvent::Type WindowActivate (0n24)</span><br><span class="line">P  QEvent::Type UpdateRequest (0n77)</span><br><span class="line">S  QEvent::Type WindowActivate (0n24)</span><br><span class="line">S  QEvent::Type WindowActivate (0n24)</span><br><span class="line">S  QEvent::Type WindowActivate (0n24)</span><br><span class="line">SS QEvent::Type ActivationChange (0n99)</span><br><span class="line">S  QEvent::Type UpdateRequest (0n77)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type Paint (0n12)</span><br><span class="line">SS QEvent::Type NonClientAreaMouseMove (0n173)</span><br><span class="line">S  QEvent::Type Enter (0n10)</span><br><span class="line">S  QEvent::Type Enter (0n10)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">S  QEvent::Type Leave (0n11)</span><br><span class="line">S  QEvent::Type Enter (0n10)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">SS QEvent::Type MouseMove (0n5)</span><br><span class="line">S  QEvent::Type Leave (0n11)</span><br><span class="line">S  QEvent::Type Leave (0n11)</span><br><span class="line">SS QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">P  QEvent::Type UpdateRequest (0n77)</span><br><span class="line">S  QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">S  QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">S  QEvent::Type WindowDeactivate (0n25)</span><br><span class="line">SS QEvent::Type ActivationChange (0n99)</span><br><span class="line">SS QEvent::Type ApplicationDeactivate (0n122)</span><br><span class="line">S  QEvent::Type UpdateRequest (0n77)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Windows平台下做过界面开发的程序员肯定知道窗口界面是由消息驱动的。为了
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>一个时间同步脚本</title>
    <link href="http://0cch.com/2019/04/25/timesync-script/"/>
    <id>http://0cch.com/2019/04/25/timesync-script/</id>
    <published>2019-04-25T09:07:46.000Z</published>
    <updated>2019-07-25T09:11:55.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>家里有台电脑不知道为啥一直同步不了网络时间，每隔一段时间就慢个几分钟，于是在网上找了点资料和代码拼凑了一个用于Windows时间同步的python脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: 0cch</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> ctypes             <span class="keyword">import</span> Structure, windll, pointer</span><br><span class="line"><span class="keyword">from</span> ctypes.wintypes    <span class="keyword">import</span> WORD</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYSTEMTIME</span><span class="params">(Structure)</span>:</span></span><br><span class="line">  _fields_ = [</span><br><span class="line">      ( <span class="string">'wYear'</span>,            WORD ),</span><br><span class="line">      ( <span class="string">'wMonth'</span>,           WORD ),</span><br><span class="line">      ( <span class="string">'wDayOfWeek'</span>,       WORD ),</span><br><span class="line">      ( <span class="string">'wDay'</span>,             WORD ),</span><br><span class="line">      ( <span class="string">'wHour'</span>,            WORD ),</span><br><span class="line">      ( <span class="string">'wMinute'</span>,          WORD ),</span><br><span class="line">      ( <span class="string">'wSecond'</span>,          WORD ),</span><br><span class="line">      ( <span class="string">'wMilliseconds'</span>,    WORD ),</span><br><span class="line">    ]</span><br><span class="line">SetLocalTime = windll.kernel32.SetLocalTime</span><br><span class="line"></span><br><span class="line">NTP_SERVER = <span class="string">"pool.ntp.org"</span></span><br><span class="line">TIME1970 = <span class="number">2208988800</span></span><br><span class="line"></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">clientSocket.settimeout(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">portNumber = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sntp_client</span><span class="params">()</span>:</span></span><br><span class="line">    data = <span class="string">'\x1b'</span> + <span class="number">47</span> * <span class="string">'\0'</span></span><br><span class="line">    clientSocket.sendto( data.encode(<span class="string">'utf-8'</span>), ( NTP_SERVER, portNumber ))</span><br><span class="line">    data, address = clientSocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Response received from:'</span>, address)</span><br><span class="line">        t_time = struct.unpack( <span class="string">'!12I'</span>, data )[<span class="number">10</span>]</span><br><span class="line">        t_time -= TIME1970</span><br><span class="line">        </span><br><span class="line">        dt = datetime.datetime.fromtimestamp( t_time )</span><br><span class="line">        </span><br><span class="line">        dt_tuple = dt.timetuple()</span><br><span class="line">        st = SYSTEMTIME()</span><br><span class="line">        st.wYear            = dt_tuple.tm_year</span><br><span class="line">        st.wMonth           = dt_tuple.tm_mon</span><br><span class="line">        st.wDayOfWeek       = ( dt_tuple.tm_wday + <span class="number">1</span> ) % <span class="number">7</span></span><br><span class="line">        st.wDay             = dt_tuple.tm_mday</span><br><span class="line">        st.wHour            = dt_tuple.tm_hour</span><br><span class="line">        st.wMinute          = dt_tuple.tm_min</span><br><span class="line">        st.wSecond          = dt_tuple.tm_sec</span><br><span class="line">        st.wMilliseconds    = <span class="number">0</span></span><br><span class="line">         </span><br><span class="line">        ret = SetLocalTime( pointer( st ) )</span><br><span class="line">        <span class="keyword">if</span> ret == <span class="number">0</span>:</span><br><span class="line">            print( <span class="string">'Setting failed. Try as administrator.'</span> )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print( <span class="string">'Successfully.'</span> )</span><br><span class="line">        </span><br><span class="line">    clientSocket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sntp_client()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;家里有台电脑不知道为啥一直同步不了网络时间，每隔一段时间就慢个几分钟，于是在
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>C++11新增预定义的宏</title>
    <link href="http://0cch.com/2019/03/20/cpp11-macro/"/>
    <id>http://0cch.com/2019/03/20/cpp11-macro/</id>
    <published>2019-03-20T13:39:56.000Z</published>
    <updated>2019-07-24T07:55:31.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>C++11中新增了4个预定义的宏，他们分别为<code>__STDC__</code>，<code>__STDC_HOSTED__</code>，<code>__STDC_VERSION__</code>和<code>__STDC_ISO_10646__</code>。</p><ol><li><p><code>__STDC__</code>用于指示编译器是否支持ISO标准C语言，如果支持ISO标准C语言则<code>_STDC__</code>定义为1，否为定义为0。这个宏在不同的编译器上可能有不同的定义，甚至有未定义的情况。例如在GCC上，编译并输出该宏的值为1，而在Visual Studio C++上，默认情况下该宏处于未定义状态。</p></li><li><p><code>__STDC_HOSTED__</code>用于指示宿主环境是否具有标准C库的完整功能，如果具有标准C库的完整功能则<code>__STDC_HOSTED__</code>定义为1，否为定义为0。</p></li><li><p><code>__STDC_VERSION__</code>用于定义C标准的版本号，但是标准文档中并没有明确规定其实现，所以在很多编译器中这个宏处于未定义状态。</p></li><li><p><code>__STDC_ISO_10646__</code>用于指示<code>wchar_t</code>是否使用Unicode，如果使用Unicode那么<code>wchar_t</code>展开为yyyymmL的形式。</p></li></ol><p>编译运行下面这段代码用于检测这些宏的定义状态：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__cplusplus is "</span> &lt;&lt; __cplusplus &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__DATE__ is "</span> &lt;&lt; __DATE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__FILE__ is "</span> &lt;&lt; __FILE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__LINE__ is "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC_HOSTED__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_HOSTED__ is "</span> &lt;&lt; __STDC_HOSTED__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_HOSTED__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__TIME__ is "</span> &lt;&lt; __TIME__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC__ is "</span> &lt;&lt; __STDC__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC_MB_MIGHT_NEQ_WC__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_MB_MIGHT_NEQ_WC__ is "</span> &lt;&lt; __STDC_MB_MIGHT_NEQ_WC__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_MB_MIGHT_NEQ_WC__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC_VERSION__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_VERSION__ is "</span> &lt;&lt; __STDC_VERSION__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_VERSION__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC_ISO_10646__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_ISO_10646__ is "</span> &lt;&lt; __STDC_ISO_10646__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDC_ISO_10646__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDCPP_DEFAULT_NEW_ALIGNMENT__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDCPP_DEFAULT_NEW_ALIGNMENT__ is "</span> &lt;&lt; __STDCPP_DEFAULT_NEW_ALIGNMENT__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDCPP_DEFAULT_NEW_ALIGNMENT__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDCPP_STRICT_POINTER_SAFETY__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDCPP_STRICT_POINTER_SAFETY__ is "</span> &lt;&lt; __STDCPP_STRICT_POINTER_SAFETY__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDCPP_STRICT_POINTER_SAFETY__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDCPP_THREADS__</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDCPP_THREADS__ is "</span> &lt;&lt; __STDCPP_THREADS__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"__STDCPP_THREADS__ is not defined"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;C++11中新增了4个预定义的宏，他们分别为&lt;code&gt;__STDC__&lt;/
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>在Windows中编译GCC</title>
    <link href="http://0cch.com/2019/02/22/compile-gcc-in-windows/"/>
    <id>http://0cch.com/2019/02/22/compile-gcc-in-windows/</id>
    <published>2019-02-22T11:00:12.000Z</published>
    <updated>2019-07-25T09:11:47.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近心血来潮想体验下C++2a的标准，但是mingw中的GCC最新版本是8.2。于是乎就产生了编译thunk下最新代码的想法。</p><p>要在Windows上编译GCC没有在linux上方便，但是也是可以完成的。首先我们需要一个mingw的环境。自带mingw环境的软件有很多，这里我比较推荐MSYS2，因为这个环境更新的比较快。下载安装好了以后，运行MSYS2，会弹出类似linux终端窗口。这里我们首先下载需要的开发编译环境：</p><blockquote><p>pacman -S –needed mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain</p></blockquote><p>下载安装好了开发环境后，可以下载GCC源代码：</p><blockquote><p>mkdir gcc-latest<br>cd gcc-latest<br>git clone git://gcc.gnu.org/git/gcc.git</p></blockquote><p>源代码比较大（2个多G），下载需要一点耐心。<br>源代码下载完成后，创建编译目录：</p><blockquote><p>mkdir build</p></blockquote><p>在开始编译之前，有一个坑需要注意下，我们需要将usr/bin/下的makeinfo改名。不知道为什么，最新的makeinfo对gcc的texi文件不兼容会导致编译失败。这个操作之后就可以开始配置了。</p><blockquote><p>../gcc/configure –enable-languages=c,c++ –disable-multilib –disable-bootstrap –disable-werror –disable-nls –prefix=/mingw64/gcc-latest –build=x86_64-w64-mingw32 –host=x86_64-w64-mingw32 –target=x86_64-w64-mingw32 –with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include –with-arch=x86-64 MAKEINFO=missing<br>export LIBRARY_PATH=/mingw64/x86_64-w64-mingw32/lib</p></blockquote><p>配置的选项比较多，我们可以参考GCC文档进行参照。这里的配置是我尝试后感觉必须加入的，否则编译的时候会出相应的问题。可以说是编译GCC血泪史了。<br>再然后就可以开始编译了：</p><blockquote><p>make -j 16</p></blockquote><p>使用多线程编译，编译速度会快不少。编译好了以后就可以安装了，注意安装的时候可能会遇到失败，需要注释build/gcc/makefile中，对应s-tm-texi的相关代码。</p><blockquote><p>make install</p></blockquote><p>最后检查gcc版本号：</p><blockquote><p>gcc -v</p></blockquote><p>注意目前最新的版本号为9.0.1。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近心血来潮想体验下C++2a的标准，但是mingw中的GCC最新版本是8.
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>在循环中使用CComPtr需要特别注意</title>
    <link href="http://0cch.com/2019/01/20/use-ccomptr-in-loops-requires-special-attention/"/>
    <id>http://0cch.com/2019/01/20/use-ccomptr-in-loops-requires-special-attention/</id>
    <published>2019-01-20T13:57:37.000Z</published>
    <updated>2019-07-24T07:55:31.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>CComPtr是ATL里提供给我们管理COM接口的智能指针类，使用它能够让我们无需关心接口的引用释放。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;IShellFolder&gt; pDesktop;</span><br><span class="line">SHGetDesktopFolder(&amp;pDesktop);</span><br></pre></td></tr></table></figure><p>但是这个类在循环中使用的时候要特别注意一下，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有问题</span></span><br><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    CComPtr&lt;IShellFolder&gt; pDesktop;</span><br><span class="line">    SHGetDesktopFolder(&amp;pDesktop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有问题，接口没有调用Release，内存泄露</span></span><br><span class="line">CComPtr&lt;IShellFolder&gt; pDesktop;</span><br><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    SHGetDesktopFolder(&amp;pDesktop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其根本原因是，CComPtr的&amp;操作符重载的时候没有做释放操作，只有Debug版本的assert来提醒程序员这样使用的问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T** <span class="keyword">operator</span>&amp;() <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">    ATLASSERT(p==<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> &amp;p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们需要手动调用Release</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;IShellFolder&gt; pDesktop;</span><br><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    SHGetDesktopFolder(&amp;pDesktop);</span><br><span class="line">    ......</span><br><span class="line">    pDesktop.Release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里是调用CComPtr的Release成员函数，而不是其保护的接口对象的Release函数。</p><p>另外一个解决方案就是使用&lt;comdef.h&gt;里的_com_ptr_t，这个类对于上述情况做了更加合理的处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Interface** <span class="keyword">operator</span>&amp;() <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">    _Release();</span><br><span class="line">    m_pInterface = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;m_pInterface;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个类里，重载&amp;操作符的函数会先调用Release，然后再取地址避免了内存泄漏的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;CComPtr是ATL里提供给我们管理COM接口的智能指针类，使用它能够让我
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>给程序内部菜单增加指定的explorer菜单</title>
    <link href="http://0cch.com/2018/12/02/add-the-specified-explorer-menu-to-the-internal-menu/"/>
    <id>http://0cch.com/2018/12/02/add-the-specified-explorer-menu-to-the-internal-menu/</id>
    <published>2018-12-02T13:05:12.000Z</published>
    <updated>2019-07-24T07:55:31.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>为了将explorer的右键菜单项的某个菜单增加到我们程序内部的菜单，我们需要做以下几件事情：</p><ol><li>获得指定文件的IShellFolder</li><li>获得指定文件的IContextMenu</li><li>创建菜单A，并且把IContextMenu的内容填充到菜单A</li><li>查询菜单A，找到我们想要的菜单项</li><li>取出我们想要的菜单项的内容，填充到我们想要真正弹出的菜单B</li><li>弹出菜单B</li><li>用IContextMenu响应用户对菜单的选择</li></ol><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;IShellFolder&gt; GetParentFolder(LPCWSTR szFolder)</span><br><span class="line">&#123;</span><br><span class="line">    CComPtr&lt;IShellFolder&gt; pDesktop;</span><br><span class="line">    SHGetDesktopFolder(&amp;pDesktop);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pDesktop)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ULONG pchEaten = <span class="number">0</span>;</span><br><span class="line">    LPITEMIDLIST pidl = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwAttributes = <span class="number">0</span>;</span><br><span class="line">    HRESULT hr = pDesktop-&gt;ParseDisplayName(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTSTR)szFolder, <span class="literal">NULL</span>, &amp;pidl, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (S_OK != hr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CComPtr&lt;IShellFolder&gt; pParentFolder = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pDesktop-&gt;BindToObject(pidl, <span class="literal">NULL</span>, IID_IShellFolder, (<span class="keyword">void</span>**)&amp;pParentFolder);</span><br><span class="line">    <span class="keyword">if</span> (S_OK != hr)</span><br><span class="line">    &#123;</span><br><span class="line">        CoTaskMemFree(pidl);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CoTaskMemFree(pidl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pParentFolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">wstring <span class="title">GetDirectory</span><span class="params">(LPCWSTR szFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WCHAR szDrive[_MAX_DRIVE];</span><br><span class="line">    WCHAR szDir[_MAX_DIR];</span><br><span class="line">    WCHAR szFName[_MAX_FNAME];</span><br><span class="line">    WCHAR szExt[_MAX_EXT];</span><br><span class="line">    _wsplitpath_s(szFile, szDrive, szDir, szFName, szExt);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::wstring strResult = szDrive;</span><br><span class="line">    strResult += szDir;</span><br><span class="line">    <span class="keyword">return</span> strResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">wstring <span class="title">GetFileNameWithExt</span><span class="params">(LPCWSTR szFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WCHAR szDrive[_MAX_DRIVE];</span><br><span class="line">    WCHAR szDir[_MAX_DIR];</span><br><span class="line">    WCHAR szFName[_MAX_FNAME];</span><br><span class="line">    WCHAR szExt[_MAX_EXT];</span><br><span class="line">    _wsplitpath_s(szFile, szDrive, szDir, szFName, szExt);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::wstring strResult = szFName;</span><br><span class="line">    strResult += szExt;</span><br><span class="line">    <span class="keyword">return</span> strResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> qtmenutest::ShowContextMenu(<span class="keyword">const</span> QPoint &amp;pos) </span><br><span class="line">&#123;</span><br><span class="line">    m_pContextMenu.Release();</span><br><span class="line">    <span class="function">QMenu <span class="title">contextMenu</span><span class="params">(tr(<span class="string">"Context menu"</span>), <span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::wstring strFilePath = <span class="string">L"d:\\1.jpg"</span>;</span><br><span class="line">    CComPtr&lt;IShellFolder&gt; pParentFolder = GetParentFolder(GetDirectory(strFilePath.c_str()).c_str());</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pParentFolder)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::wstring strFile = GetFileNameWithExt(strFilePath.c_str());</span><br><span class="line">    ULONG pchEaten = <span class="number">0</span>;</span><br><span class="line">    LPITEMIDLIST pidl = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwAttributes = <span class="number">0</span>;</span><br><span class="line">    HRESULT hr = pParentFolder-&gt;ParseDisplayName(WId(), <span class="literal">NULL</span>, (LPWSTR)strFile.c_str(), &amp;pchEaten, &amp;pidl, &amp;dwAttributes);</span><br><span class="line">    <span class="keyword">if</span> (S_OK != hr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    UINT refReversed = <span class="number">0</span>;</span><br><span class="line">    hr = pParentFolder-&gt;GetUIObjectOf(WId(), <span class="number">1</span>, (LPCITEMIDLIST *)&amp;pidl, IID_IContextMenu, &amp;refReversed, (<span class="keyword">void</span> **)&amp;m_pContextMenu);</span><br><span class="line">    <span class="keyword">if</span> (S_OK != hr)</span><br><span class="line">    &#123;</span><br><span class="line">        CoTaskMemFree(pidl);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HMENU hMenu = CreatePopupMenu();</span><br><span class="line">    <span class="keyword">if</span> (hMenu == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        CoTaskMemFree(pidl);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_pContextMenu-&gt;QueryContextMenu(hMenu, <span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, CMF_EXPLORE | CMF_NORMAL);</span><br><span class="line">    <span class="keyword">int</span> nMenuCount = GetMenuItemCount(hMenu);</span><br><span class="line">    HMENU hSubMenu = <span class="literal">NULL</span>;</span><br><span class="line">    WCHAR szMenuText[MAX_PATH];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nMenuCount; i++) &#123;</span><br><span class="line">        GetMenuStringW(hMenu, i, szMenuText, MAX_PATH, MF_BYPOSITION);</span><br><span class="line">        <span class="keyword">if</span> (wcsstr(szMenuText, <span class="string">L"some_ui_text"</span>)) &#123;</span><br><span class="line">            hSubMenu = GetSubMenu(hMenu, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QMenu *subMenu = contextMenu.addMenu(QString::fromWCharArray(szMenuText));</span><br><span class="line">    <span class="keyword">int</span> nSubMenuCount = GetMenuItemCount(hSubMenu);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nSubMenuCount; i++) &#123;</span><br><span class="line">        GetMenuStringW(hSubMenu, i, szMenuText, MAX_PATH, MF_BYPOSITION);</span><br><span class="line">        <span class="keyword">int</span> nCmdId = GetMenuItemID(hSubMenu, i);</span><br><span class="line">        QAction *curAct = subMenu-&gt;addAction(QString::fromWCharArray(szMenuText));</span><br><span class="line">        <span class="keyword">if</span> (curAct) &#123;</span><br><span class="line">            curAct-&gt;setData(nCmdId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QAction *selAct = contextMenu.exec(mapToGlobal(pos));</span><br><span class="line">    <span class="keyword">if</span> (selAct) &#123;</span><br><span class="line">        <span class="keyword">int</span> nSelId = selAct-&gt;data().toInt();</span><br><span class="line">        <span class="keyword">if</span> (nSelId) &#123;</span><br><span class="line">            CMINVOKECOMMANDINFO info = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            info.cbSize = <span class="keyword">sizeof</span>(CMINVOKECOMMANDINFOEX);</span><br><span class="line">            info.lpVerb = MAKEINTRESOURCEA(nSelId - <span class="number">100</span>);</span><br><span class="line">            m_pContextMenu-&gt;InvokeCommand(&amp;info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DestroyMenu(hMenu);</span><br><span class="line">    CoTaskMemFree(pidl);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;为了将explorer的右键菜单项的某个菜单增加到我们程序内部的菜单，我们需
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>0cchext插件更新 1.0.19.1</title>
    <link href="http://0cch.com/2018/11/26/0cchext-plugin-update-1-0-19-1/"/>
    <id>http://0cch.com/2018/11/26/0cchext-plugin-update-1-0-19-1/</id>
    <published>2018-11-26T14:05:21.000Z</published>
    <updated>2019-07-24T07:55:31.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近把windbg插件0cchext升级到1.0.19.1，完善了autocmd命令，并且增加了accessmask，oledata和cppexcr命令。</p><h3 id="autocmd更新："><a href="#autocmd更新：" class="headerlink" title="autocmd更新："></a>autocmd更新：</h3><blockquote><p>现在支持全局自动运行命令，区分应用层调试和内核调试，并且区分了普通调试和DUMP分析，配置文件依然是插件同目录下的autocmd.ini。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[all]</span><br><span class="line">? 88 * 66</span><br><span class="line"></span><br><span class="line">[kernel]</span><br><span class="line">!process 0 0 explorer.exe</span><br><span class="line"></span><br><span class="line">[kernel dump]</span><br><span class="line">!analyze -v</span><br><span class="line"></span><br><span class="line">[notepad.exe]</span><br><span class="line">.sympath+ c:\notepad_pdb</span><br><span class="line">~*k</span><br><span class="line"></span><br><span class="line">[calc.exe]</span><br><span class="line">.sympath+ c:\calc_pdb</span><br><span class="line">~*k</span><br><span class="line"></span><br><span class="line">[calc.exe dump]</span><br><span class="line">.excr</span><br></pre></td></tr></table></figure><p>在[all]区间的命令，会在所有情况下执行；[kernel]区间的命令会在内核调试的情况下执行；[kernel dump]区间的命令会在内核调试dump的情况下执行；[app.exe]区间是在调试某exe的时候执行；最后[app.exe dump]命令会在调试指定exe的dump的时候执行。</p><h3 id="accessmask命令："><a href="#accessmask命令：" class="headerlink" title="accessmask命令："></a>accessmask命令：</h3><blockquote><p>这个命令很简单，就是查询权限标志的，例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !accessmask process 0x1fffff</span><br><span class="line">Access mask: 0x1fffff</span><br><span class="line"></span><br><span class="line">Generic rights:</span><br><span class="line">STANDARD_RIGHTS_READ              (0x20000)</span><br><span class="line">STANDARD_RIGHTS_WRITE             (0x20000)</span><br><span class="line">STANDARD_RIGHTS_EXECUTE           (0x20000)</span><br><span class="line">STANDARD_RIGHTS_REQUIRED          (0xf0000)</span><br><span class="line">STANDARD_RIGHTS_ALL               (0x1f0000)</span><br><span class="line">READ_CONTROL                      (0x20000)</span><br><span class="line">DELETE                            (0x10000)</span><br><span class="line">SYNCHRONIZE                       (0x100000)</span><br><span class="line">WRITE_DAC                         (0x40000)</span><br><span class="line">WRITE_OWNER                       (0x80000)</span><br><span class="line"></span><br><span class="line">Specific rights:</span><br><span class="line">PROCESS_QUERY_LIMITED_INFORMATION    (0x1000)</span><br><span class="line">PROCESS_SUSPEND_RESUME            (0x800)</span><br><span class="line">PROCESS_QUERY_INFORMATION         (0x400)</span><br><span class="line">PROCESS_SET_INFORMATION           (0x200)</span><br><span class="line">PROCESS_SET_QUOTA                 (0x100)</span><br><span class="line">PROCESS_CREATE_PROCESS            (0x80)</span><br><span class="line">PROCESS_DUP_HANDLE                (0x40)</span><br><span class="line">PROCESS_VM_WRITE                  (0x20)</span><br><span class="line">PROCESS_VM_READ                   (0x10)</span><br><span class="line">PROCESS_VM_OPERATION              (0x8)</span><br><span class="line">PROCESS_CREATE_THREAD             (0x2)</span><br><span class="line">PROCESS_TERMINATE                 (0x1)</span><br><span class="line">PROCESS_ALL_ACCESS                (0x1fffff)</span><br></pre></td></tr></table></figure><p>其中第一个参数是对象类型，比如process，thread，file；第二个参数则是具体要查询的值。</p><h3 id="oledata命令："><a href="#oledata命令：" class="headerlink" title="oledata命令："></a>oledata命令：</h3><blockquote><p>这个命令是方便我们当前线程查询com和ole相关结构的命令，不需要参数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !oledata</span><br><span class="line">dt combase!tagSOleTlsData 0x0000019370ad0360</span><br><span class="line">dx (combase!tagSOleTlsData *)0x0000019370ad0360</span><br><span class="line">0:000&gt; dt combase!tagSOleTlsData 0x0000019370ad0360</span><br><span class="line">   +0x000 pvThreadBase     : (null)</span><br><span class="line">   +0x008 pSmAllocator     : (null)</span><br><span class="line">   +0x010 dwApartmentID    : 0x1e3d4</span><br><span class="line">   +0x014 dwFlags          : 0x81</span><br><span class="line">   +0x018 TlsMapIndex      : 0n0</span><br><span class="line">   +0x020 ppTlsSlot        : 0x00000018`66fc9758  -&gt; 0x00000193`70ad0360 Void</span><br><span class="line">   +0x028 cComInits        : 3</span><br><span class="line">   +0x02c cOleInits        : 0</span><br><span class="line">   +0x030 cCalls           : 0</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>另外可以看<a href="https://0cch.com/2017/07/09/tip-about-com/">调试COM的一个tip</a>来简单了解以下这个命令的用途</p><h3 id="cppexcrname命令："><a href="#cppexcrname命令：" class="headerlink" title="cppexcrname命令："></a>cppexcrname命令：</h3><blockquote><p>这个命令用于查询C++ 异常名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; .exr -1</span><br><span class="line">ExceptionAddress: 74e61812 (KERNELBASE!RaiseException+0x00000062)</span><br><span class="line">   ExceptionCode: e06d7363 (C++ EH exception)</span><br><span class="line">  ExceptionFlags: 00000001</span><br><span class="line">NumberParameters: 3</span><br><span class="line">   Parameter[0]: 19930520</span><br><span class="line">   Parameter[1]: 006ff46c</span><br><span class="line">   Parameter[2]: 00372294</span><br><span class="line">0:000&gt; !cppexcrname</span><br><span class="line">Exception name: .?AVexception@std@@</span><br></pre></td></tr></table></figure><p>这个的详情可以参考<a href="https://0cch.com/2015/12/06/cpp-exception-params/">C++异常的参数分析(0xE06D7363)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近把windbg插件0cchext升级到1.0.19.1，完善了autoc
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>不要使用GetFullPathName获得相对路径的全路径</title>
    <link href="http://0cch.com/2018/10/27/dont-use-getfullpathname/"/>
    <id>http://0cch.com/2018/10/27/dont-use-getfullpathname/</id>
    <published>2018-10-27T14:01:13.000Z</published>
    <updated>2019-07-24T07:55:31.789Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>上周末在网上闲逛，看到一篇介绍Path*相关API的文章，发现文章中推荐了GetFullPathName这个API，因为他能方便的获得相对路径对于当前工作目录的全路径。然而，我对于这个推荐API是坚决反对的。如果所有工程代码都是一个人开发，这种情况下调用这个API，我认为尚可理解，但是如果对于多人维护的大型工程，就不要使用它了。原因很简单，这个API是根据当前工作目录去确定绝对路径的，然而你无法确定当前工作目录是否是你认为的工作目录。即使在调用GetFullPathName之前，检查了这个路径，我认为也是不可信的。因为在检查过后，也有可能在其他线程中改变当前工作目录，要知道这个变量是全局唯一的。  </p><p>所以，以下代码是不可取的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WCHAR lpBuffer[MAX_PATH];</span><br><span class="line">LPWSTR lpFname = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">SetCurrentDirectoryW(<span class="string">L"C:\\some\\thing\\dir"</span>);</span><br><span class="line">GetFullPathNameW(<span class="string">L"..\\other\\dir"</span>, MAX_PATH, lpBuffer, &amp;lpFname);</span><br></pre></td></tr></table></figure><p>其实微软为我们提供挺好的API来代替他，比如PathCanonicalize以及PathCombine（实际上有更安全的API，比如 PathCchCanonicalize和PathCchCombine，只不过需要高版本的系统）。</p><p>所以，以下代码是正确的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WCHAR lpBuffer[MAX_PATH];</span><br><span class="line">WCHAR lpSrc[MAX_PATH] = <span class="string">L"C:\\some\\thing\\dir"</span>;</span><br><span class="line">wcscat_s(lpSrc, <span class="string">L"..\\other\\dir"</span>);</span><br><span class="line">PathCanonicalizeW(lpBuffer, lpSrc);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WCHAR lpBuffer[MAX_PATH];</span><br><span class="line">PathCombineW(lpBuffer, <span class="string">L"C:\\some\\thing\\dir"</span>, <span class="string">L"..\\other\\dir"</span>);</span><br></pre></td></tr></table></figure><p>最后在介绍一个实用的函数：PathCompactPath，这个函数把路径缩写为指定的像素长度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WCHAR buffer[MAX_PATH] = <span class="string">L"C:\\some\\thing\\very\\long\\long\\long\\long\\long\\path"</span>;</span><br><span class="line">PathCompactPathW(<span class="literal">NULL</span>, buffer, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// buffer="C:\some\thing\very...\path"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;上周末在网上闲逛，看到一篇介绍Path*相关API的文章，发现文章中推荐了G
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>关于TokenLinkedToken的一点记录2</title>
    <link href="http://0cch.com/2018/09/24/tokenlinkedtoken-tip2/"/>
    <id>http://0cch.com/2018/09/24/tokenlinkedtoken-tip2/</id>
    <published>2018-09-24T12:20:32.000Z</published>
    <updated>2019-07-24T07:55:31.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="内核原理"><a href="#内核原理" class="headerlink" title="内核原理"></a>内核原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line">0: kd&gt; !process 0 1 explorer.exe</span><br><span class="line">PROCESS ffffc306d0c34580</span><br><span class="line">    SessionId: 11  Cid: 44e0    Peb: 006fc000  ParentCid: 5758</span><br><span class="line">    DirBase: 2b1d00002  ObjectTable: ffff8b8e568c7040  HandleCount: 29648.</span><br><span class="line">    Image: explorer.exe</span><br><span class="line">    VadRoot ffffc306ddf5fca0 Vads 1625 Clone 0 Private 403154. Modified 771103. Locked 50.</span><br><span class="line">    DeviceMap ffff8b8e3147ed30</span><br><span class="line">    Token                             ffff8b8e4937f940</span><br><span class="line">    ElapsedTime                       06:29:46.426</span><br><span class="line">    UserTime                          00:00:48.921</span><br><span class="line">    KernelTime                        00:00:53.250</span><br><span class="line">    QuotaPoolUsage[PagedPool]         2123416</span><br><span class="line">    QuotaPoolUsage[NonPagedPool]      225280</span><br><span class="line">    Working Set Sizes (now,min,max)  (56547, 50, 345) (226188KB, 200KB, 1380KB)</span><br><span class="line">    PeakWorkingSetSize                462611</span><br><span class="line">    VirtualSize                       2103798 Mb</span><br><span class="line">    PeakVirtualSize                   2104556 Mb</span><br><span class="line">    PageFaultCount                    2358568</span><br><span class="line">    MemoryPriority                    BACKGROUND</span><br><span class="line">    BasePriority                      8</span><br><span class="line">    CommitCharge                      426963</span><br><span class="line"></span><br><span class="line">0: kd&gt; !token ffff8b8e4937f940</span><br><span class="line">_TOKEN 0xffff8b8e4937f940</span><br><span class="line">TS Session ID: 0xb</span><br><span class="line">User: S-1-5-21-3854333306-943506906-3328512208-1001</span><br><span class="line">User Groups: </span><br><span class="line"> 00 S-1-5-21-3854333306-943506906-3328512208-513</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 01 S-1-1-0</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 02 S-1-5-114</span><br><span class="line">    Attributes - DenyOnly </span><br><span class="line"> 03 S-1-5-21-3854333306-943506906-3328512208-1002</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 04 S-1-5-32-544</span><br><span class="line">    Attributes - DenyOnly </span><br><span class="line"> 05 S-1-5-32-559</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 06 S-1-5-32-545</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 07 S-1-5-4</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 08 S-1-2-1</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 09 S-1-5-11</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 10 S-1-5-15</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 11 S-1-5-113</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 12 S-1-5-5-0-4234506195</span><br><span class="line">    Attributes - Mandatory Default Enabled LogonId </span><br><span class="line"> 13 S-1-2-0</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 14 S-1-5-64-10</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 15 S-1-16-8192</span><br><span class="line">    Attributes - GroupIntegrity GroupIntegrityEnabled </span><br><span class="line">Primary Group: S-1-5-21-3854333306-943506906-3328512208-513</span><br><span class="line">Privs: </span><br><span class="line"> 19 0x000000013 SeShutdownPrivilege               Attributes - Enabled </span><br><span class="line"> 23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default </span><br><span class="line"> 25 0x000000019 SeUndockPrivilege                 Attributes - </span><br><span class="line"> 33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes - </span><br><span class="line"> 34 0x000000022 SeTimeZonePrivilege               Attributes - </span><br><span class="line">Authentication ID:         (0,fc65706c)</span><br><span class="line">Impersonation Level:       Anonymous</span><br><span class="line">TokenType:                 Primary</span><br><span class="line">Source: User32             TokenFlags: 0x2a00 ( Token in use )</span><br><span class="line">Token ID: fc664685         ParentToken ID: fc65706f</span><br><span class="line">Modified ID:               (0, fe4096af)</span><br><span class="line">RestrictedSidCount: 0      RestrictedSids: 0x0000000000000000</span><br><span class="line">OriginatingLogonSession: 3e7</span><br><span class="line">PackageSid: (null)</span><br><span class="line">CapabilityCount: 0      Capabilities: 0x0000000000000000</span><br><span class="line">LowboxNumberEntry: 0x0000000000000000</span><br><span class="line">Security Attributes:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0: kd&gt; dt _TOKEN 0xffff8b8e4937f940</span><br><span class="line">nt!_TOKEN</span><br><span class="line">   +0x000 TokenSource      : _TOKEN_SOURCE</span><br><span class="line">   +0x010 TokenId          : _LUID</span><br><span class="line">   +0x018 AuthenticationId : _LUID</span><br><span class="line">   +0x020 ParentTokenId    : _LUID</span><br><span class="line">   +0x028 ExpirationTime   : _LARGE_INTEGER 0x7fffffff`ffffffff</span><br><span class="line">   +0x030 TokenLock        : 0xffffc306`c7b5dd40 _ERESOURCE</span><br><span class="line">   +0x038 ModifiedId       : _LUID</span><br><span class="line">   +0x040 Privileges       : _SEP_TOKEN_PRIVILEGES</span><br><span class="line">   +0x058 AuditPolicy      : _SEP_AUDIT_POLICY</span><br><span class="line">   +0x078 SessionId        : 0xb</span><br><span class="line">   +0x07c UserAndGroupCount : 0x11</span><br><span class="line">   +0x080 RestrictedSidCount : 0</span><br><span class="line">   +0x084 VariableLength   : 0x228</span><br><span class="line">   +0x088 DynamicCharged   : 0x1000</span><br><span class="line">   +0x08c DynamicAvailable : 0</span><br><span class="line">   +0x090 DefaultOwnerIndex : 0</span><br><span class="line">   +0x098 UserAndGroups    : 0xffff8b8e`4937fdd0 _SID_AND_ATTRIBUTES</span><br><span class="line">   +0x0a0 RestrictedSids   : (null) </span><br><span class="line">   +0x0a8 PrimaryGroup     : 0xffff8b8e`2b2a3b10 Void</span><br><span class="line">   +0x0b0 DynamicPart      : 0xffff8b8e`2b2a3b10  -&gt; 0x501</span><br><span class="line">   +0x0b8 DefaultDacl      : 0xffff8b8e`2b2a3b2c _ACL</span><br><span class="line">   +0x0c0 TokenType        : 1 ( TokenPrimary )</span><br><span class="line">   +0x0c4 ImpersonationLevel : 0 ( SecurityAnonymous )</span><br><span class="line">   +0x0c8 TokenFlags       : 0x2a00</span><br><span class="line">   +0x0cc TokenInUse       : 0x1 &apos;&apos;</span><br><span class="line">   +0x0d0 IntegrityLevelIndex : 0x10</span><br><span class="line">   +0x0d4 MandatoryPolicy  : 3</span><br><span class="line">   +0x0d8 LogonSession     : 0xffff8b8e`143fc870 _SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">   +0x0e0 OriginatingLogonSession : _LUID</span><br><span class="line">   +0x0e8 SidHash          : _SID_AND_ATTRIBUTES_HASH</span><br><span class="line">   +0x1f8 RestrictedSidHash : _SID_AND_ATTRIBUTES_HASH</span><br><span class="line">   +0x308 pSecurityAttributes : 0xffff8b8e`0c3b7f30 _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION</span><br><span class="line">   +0x310 Package          : (null) </span><br><span class="line">   +0x318 Capabilities     : (null) </span><br><span class="line">   +0x320 CapabilityCount  : 0</span><br><span class="line">   +0x328 CapabilitiesHash : _SID_AND_ATTRIBUTES_HASH</span><br><span class="line">   +0x438 LowboxNumberEntry : (null) </span><br><span class="line">   +0x440 LowboxHandlesEntry : (null) </span><br><span class="line">   +0x448 pClaimAttributes : (null) </span><br><span class="line">   +0x450 TrustLevelSid    : (null) </span><br><span class="line">   +0x458 TrustLinkedToken : (null) </span><br><span class="line">   +0x460 IntegrityLevelSidValue : (null) </span><br><span class="line">   +0x468 TokenSidValues   : (null) </span><br><span class="line">   +0x470 IndexEntry       : 0xffff8b8e`349cd270 _SEP_LUID_TO_INDEX_MAP_ENTRY</span><br><span class="line">   +0x478 DiagnosticInfo   : (null) </span><br><span class="line">   +0x480 BnoIsolationHandlesEntry : (null) </span><br><span class="line">   +0x488 SessionObject    : 0xffffc306`cd464140 Void</span><br><span class="line">   +0x490 VariablePart     : 0xffff8b8e`4937fee0</span><br><span class="line"></span><br><span class="line">0: kd&gt; dt 0xffff8b8e`143fc870 _SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">nt!_SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">   +0x000 Next             : (null) </span><br><span class="line">   +0x008 LogonId          : _LUID</span><br><span class="line">   +0x010 BuddyLogonId     : _LUID</span><br><span class="line">   +0x018 ReferenceCount   : 0n1799</span><br><span class="line">   +0x020 Flags            : 0xd</span><br><span class="line">   +0x028 pDeviceMap       : 0xffff8b8e`3147ed30 _DEVICE_MAP</span><br><span class="line">   +0x030 Token            : 0xffff8b8e`20c65060 Void</span><br><span class="line">   +0x038 AccountName      : _UNICODE_STRING &quot;win&quot;</span><br><span class="line">   +0x048 AuthorityName    : _UNICODE_STRING &quot;DESKTOP-GJGV2E2&quot;</span><br><span class="line">   +0x058 CachedHandlesTable : _SEP_CACHED_HANDLES_TABLE</span><br><span class="line">   +0x068 SharedDataLock   : _EX_PUSH_LOCK</span><br><span class="line">   +0x070 SharedClaimAttributes : (null) </span><br><span class="line">   +0x078 SharedSidValues  : (null) </span><br><span class="line">   +0x080 RevocationBlock  : _OB_HANDLE_REVOCATION_BLOCK</span><br><span class="line">   +0x0a0 ServerSilo       : (null) </span><br><span class="line">   +0x0a8 SiblingAuthId    : _LUID</span><br><span class="line">   +0x0b0 TokenList        : _LIST_ENTRY [ 0x00000000`00000000 - 0x00000000`00000000 ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0: kd&gt; dt 0xffff8b8e`143fc870 _SEP_LOGON_SESSION_REFERENCES BuddyLogonId.</span><br><span class="line">nt!_SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">   +0x010 BuddyLogonId  : </span><br><span class="line">      +0x000 LowPart       : 0xfc657047</span><br><span class="line">      +0x004 HighPart      : 0n0</span><br><span class="line"></span><br><span class="line">0: kd&gt; ? 0xfc657047&amp;0xf</span><br><span class="line">Evaluate expression: 7 = 00000000`00000007</span><br><span class="line"></span><br><span class="line">0: kd&gt; dq nt!SepLogonSessions L1</span><br><span class="line">fffff802`45a744a0  ffff8b8e`0b0020d0</span><br><span class="line">0: kd&gt; dq ffff8b8e`0b0020d0+8*7 L1</span><br><span class="line">ffff8b8e`0b002108  ffff8b8e`367ef010</span><br><span class="line"></span><br><span class="line">0: kd&gt; dt ffff8b8e`367ef010 _SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">nt!_SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">   +0x000 Next             : 0xffff8b8e`593ba230 _SEP_LOGON_SESSION_REFERENCES</span><br><span class="line">   +0x008 LogonId          : _LUID</span><br><span class="line">   +0x010 BuddyLogonId     : _LUID</span><br><span class="line">   +0x018 ReferenceCount   : 0n56</span><br><span class="line">   +0x020 Flags            : 0xa</span><br><span class="line">   +0x028 pDeviceMap       : 0xffff8b8e`0e5e0890 _DEVICE_MAP</span><br><span class="line">   +0x030 Token            : 0xffff8b8e`15b56940 Void</span><br><span class="line">   +0x038 AccountName      : _UNICODE_STRING &quot;win&quot;</span><br><span class="line">   +0x048 AuthorityName    : _UNICODE_STRING &quot;DESKTOP-GJGV2E2&quot;</span><br><span class="line">   +0x058 CachedHandlesTable : _SEP_CACHED_HANDLES_TABLE</span><br><span class="line">   +0x068 SharedDataLock   : _EX_PUSH_LOCK</span><br><span class="line">   +0x070 SharedClaimAttributes : (null) </span><br><span class="line">   +0x078 SharedSidValues  : (null) </span><br><span class="line">   +0x080 RevocationBlock  : _OB_HANDLE_REVOCATION_BLOCK</span><br><span class="line">   +0x0a0 ServerSilo       : (null) </span><br><span class="line">   +0x0a8 SiblingAuthId    : _LUID</span><br><span class="line">   +0x0b0 TokenList        : _LIST_ENTRY [ 0x00000000`00000000 - 0x00000000`00000000 ]</span><br><span class="line">   </span><br><span class="line">0: kd&gt; !token 0xffff8b8e`15b56940</span><br><span class="line">_TOKEN 0xffff8b8e15b56940</span><br><span class="line">TS Session ID: 0xb</span><br><span class="line">User: S-1-5-21-3854333306-943506906-3328512208-1001</span><br><span class="line">User Groups: </span><br><span class="line"> 00 S-1-5-21-3854333306-943506906-3328512208-513</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 01 S-1-1-0</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 02 S-1-5-114</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 03 S-1-5-21-3854333306-943506906-3328512208-1002</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 04 S-1-5-32-544</span><br><span class="line">    Attributes - Mandatory Default Enabled Owner </span><br><span class="line"> 05 S-1-5-32-559</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 06 S-1-5-32-545</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 07 S-1-5-4</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 08 S-1-2-1</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 09 S-1-5-11</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 10 S-1-5-15</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 11 S-1-5-113</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 12 S-1-5-5-0-4234506195</span><br><span class="line">    Attributes - Mandatory Default Enabled LogonId </span><br><span class="line"> 13 S-1-2-0</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 14 S-1-5-64-10</span><br><span class="line">    Attributes - Mandatory Default Enabled </span><br><span class="line"> 15 S-1-16-12288</span><br><span class="line">    Attributes - GroupIntegrity GroupIntegrityEnabled </span><br><span class="line">Primary Group: S-1-5-21-3854333306-943506906-3328512208-513</span><br><span class="line">Privs: </span><br><span class="line"> 05 0x000000005 SeIncreaseQuotaPrivilege          Attributes - </span><br><span class="line"> 08 0x000000008 SeSecurityPrivilege               Attributes - </span><br><span class="line"> 09 0x000000009 SeTakeOwnershipPrivilege          Attributes - </span><br><span class="line"> 10 0x00000000a SeLoadDriverPrivilege             Attributes - </span><br><span class="line"> 11 0x00000000b SeSystemProfilePrivilege          Attributes - </span><br><span class="line"> 12 0x00000000c SeSystemtimePrivilege             Attributes - </span><br><span class="line"> 13 0x00000000d SeProfileSingleProcessPrivilege   Attributes - </span><br><span class="line"> 14 0x00000000e SeIncreaseBasePriorityPrivilege   Attributes - </span><br><span class="line"> 15 0x00000000f SeCreatePagefilePrivilege         Attributes - </span><br><span class="line"> 17 0x000000011 SeBackupPrivilege                 Attributes - </span><br><span class="line"> 18 0x000000012 SeRestorePrivilege                Attributes - </span><br><span class="line"> 19 0x000000013 SeShutdownPrivilege               Attributes - </span><br><span class="line"> 20 0x000000014 SeDebugPrivilege                  Attributes - </span><br><span class="line"> 22 0x000000016 SeSystemEnvironmentPrivilege      Attributes - </span><br><span class="line"> 23 0x000000017 SeChangeNotifyPrivilege           Attributes - Enabled Default </span><br><span class="line"> 24 0x000000018 SeRemoteShutdownPrivilege         Attributes - </span><br><span class="line"> 25 0x000000019 SeUndockPrivilege                 Attributes - </span><br><span class="line"> 28 0x00000001c SeManageVolumePrivilege           Attributes - </span><br><span class="line"> 29 0x00000001d SeImpersonatePrivilege            Attributes - Enabled Default </span><br><span class="line"> 30 0x00000001e SeCreateGlobalPrivilege           Attributes - Enabled Default </span><br><span class="line"> 33 0x000000021 SeIncreaseWorkingSetPrivilege     Attributes - </span><br><span class="line"> 34 0x000000022 SeTimeZonePrivilege               Attributes - </span><br><span class="line"> 35 0x000000023 SeCreateSymbolicLinkPrivilege     Attributes - </span><br><span class="line"> 36 0x000000024 SeDelegateSessionUserImpersonatePrivilege  Attributes - </span><br><span class="line">Authentication ID:         (0,fc657047)</span><br><span class="line">Impersonation Level:       Anonymous</span><br><span class="line">TokenType:                 Primary</span><br><span class="line">Source: User32             TokenFlags: 0x2020 ( Token NOT in use ) </span><br><span class="line">Token ID: fc657079         ParentToken ID: 0</span><br><span class="line">Modified ID:               (0, fc65706b)</span><br><span class="line">RestrictedSidCount: 0      RestrictedSids: 0x0000000000000000</span><br><span class="line">OriginatingLogonSession: 3e7</span><br><span class="line">PackageSid: (null)</span><br><span class="line">CapabilityCount: 0      Capabilities: 0x0000000000000000</span><br><span class="line">LowboxNumberEntry: 0x0000000000000000</span><br><span class="line">Security Attributes:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;内核原理&quot;&gt;&lt;a href=&quot;#内核原理&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>关于TokenLinkedToken的一点记录</title>
    <link href="http://0cch.com/2018/08/24/tokenlinkedtoken-tip/"/>
    <id>http://0cch.com/2018/08/24/tokenlinkedtoken-tip/</id>
    <published>2018-08-24T12:14:23.000Z</published>
    <updated>2019-07-24T07:55:31.787Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们用GetTokenInformation可以获得一个TokenLinkedToken，简单的说就是要获得与我们进程token关联的token。  </p><p>接下来就有趣了，如果当你的进程是一个提权的管理员权限的进程，那么你获得的token会是一个标准用户进程的token，也就是一个提权之前进程。那么这有什么用呢？比如我们的子程序需要运行其他开发者开发的插件，而我们不想给予他们过高的权限，那么这个就有用了。当然，如果你更谨慎一些，你希望给予他更低的权限，那就得实用CreateRestrictedToken来创建一个新的token了。  </p><p>聪明的程序员看到这里肯定就会想，既然管理员权限下的进程获得的TokenLinkedToken是一个标准用户权限的token，那么标准用户权限环境下的进程能不能获得一个管理员权限的TokenLinkedToken呢？没错，答案是可以。更聪明的程序员肯定会惊讶，那这个不是安全漏洞么？答案是并不是，因为虽然可以获得一个管理员权限的token，但是这个token只是一个IDENTIFY level token，这是一个token的_SECURITY_IMPERSONATION_LEVEL，不同的模仿等级，对应于不同的功能。比如SecurityIdentification，这个等级就只能用来查询token的信息。比方说有外部一个进程访问我们的进程，我们可以让他提供token验证其身份。但是外部进程为了防止我们用他的token干坏事，所以只给我们一个IDENTIFY level token，这样一来，我们就只能验证身份而无法做其他事情了。  </p><p>我们真的没办法通过TokenLinkedToken获得可以使用的管理员身份的token了么？也不是，我们确实有办法获得能够使用的管理员身份的token。但是有个前提，我们的进程必须有SeTcbPrivilege权限。那这不也是个安全漏洞么？不是，因为SeTcbPrivilege是SYSTEM用户的权限，简单的说，这个用户的权限比管理员还要高。那这玩意不是也没什么用么？也有用，当你想在系统服务中启动一个管理员身份的进程的时候，可以先获得标准用户权限的token，然后获得其TokenLinkedToken，最后CreateProcessAsUser来创建进程。  </p><p><a href="/uploads/2018/08/TokenLinkedToken.png"><img src="/uploads/2018/08/TokenLinkedToken.png" alt="TokenLinkedToken"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;我们用GetTokenInformation可以获得一个TokenLinke
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>tensorflow入门 —— mnist</title>
    <link href="http://0cch.com/2018/07/07/tensorflow-mnist/"/>
    <id>http://0cch.com/2018/07/07/tensorflow-mnist/</id>
    <published>2018-07-07T07:07:41.000Z</published>
    <updated>2019-07-24T07:55:31.787Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>自从有tensorflow这样的平台工具横空出世，机器学习的代码编写逐渐变的平民化了。我们不需要太多的数学理论知识就能够完成一些机器学习的项目。比如在使用tensorflow的时候，我们只需要定义好损失函数，tensorflow会自动的帮我们完成反向传播改善参数。我们所需要做的就是合理利用tensorflow创建模型。</p><p>当然，我并不是在鼓动初学者跳过数学原理部分，而是认为，如果没有数学基础，入门就死磕原理容易产生挫败感导致放弃。这样就不如先接触简单的项目，在有了一定的体会后，再回头去看看数学原理的东西，这样会更容易接受。比如，当能用tensorflow完成对mnist的训练之后，再去理解反向传播这四个公式，应该会更有感觉。</p><span>$$\begin{align}\delta^L &amp;= \nabla_a C \odot \sigma&apos;(z^L) \tag{1} \\\delta^l &amp;= ((w^{l+1})^T \delta^{l+1}) \odot \sigma&apos;(z^l) \tag{2}\\\frac{\partial C}{\partial b^l_j} &amp;= \delta^l_j \tag{3}\\\frac{\partial C}{\partial w^l_{jk}} &amp;= a^{l-1}_k \delta^l_j \tag{4}\end{align}$$</span><!-- Has MathJax --><p>接下来相信看看这份代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># step1</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"."</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2</span></span><br><span class="line">INPUT_PARAMETERS = <span class="number">784</span></span><br><span class="line">L1_PARAMETERS = <span class="number">300</span></span><br><span class="line">W1 = tf.Variable(tf.truncated_normal([INPUT_PARAMETERS, L1_PARAMETERS], stddev=<span class="number">0.1</span>))</span><br><span class="line">b1 = tf.Variable(tf.truncated_normal([L1_PARAMETERS], stddev=<span class="number">0.1</span>))</span><br><span class="line">W2 = tf.Variable(tf.truncated_normal([L1_PARAMETERS, <span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">b2 = tf.Variable(tf.truncated_normal([<span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, INPUT_PARAMETERS])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># step4</span></span><br><span class="line">hidden1 = tf.nn.sigmoid(tf.matmul(x, W1) + b1)</span><br><span class="line">y =  tf.matmul(hidden1, W2) + b2</span><br><span class="line"></span><br><span class="line"><span class="comment"># step5</span></span><br><span class="line">loss = (tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span><br><span class="line">    logits=y, labels=y_)))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.3</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step6</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step7</span></span><br><span class="line">loss_array = []</span><br><span class="line">accuracy_array = []</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">        _, step_loss = sess.run([train_step, loss], feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">            step_accuracy = accuracy.eval(&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)</span><br><span class="line">            loss_array.append(step_loss)</span><br><span class="line">            accuracy_array.append(step_accuracy)</span><br><span class="line">            print(step_loss, step_accuracy)</span><br><span class="line"></span><br><span class="line">loss_array.append(step_loss)</span><br><span class="line">accuracy_array.append(step_accuracy)</span><br><span class="line">print(step_loss, step_accuracy)</span><br><span class="line"></span><br><span class="line">plt.plot([i*<span class="number">500</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(loss_array))], loss_array, <span class="string">'b-'</span>,</span><br><span class="line">          [i*<span class="number">500</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(accuracy_array))], accuracy_array, <span class="string">'r-'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>step1：</strong>read_data_sets是tf提供读取mnist数据的函数，运行时会有函数过时的警告提示，但是不用管它，因为用起来完全没有问题。one_hot参数在这里很重要，他将实际的标签值转化为一个向量，例如，将标签值3，转化成表示0-9是否置位的向量：\( \left(\begin{array}{cccccccccc}0;0;0;1;0;0;0;0;0;0;\end{array}\right)^T \)</p></blockquote><blockquote><p><strong>step2：</strong>创建权重和偏置，创建方法有很多，我用的是期望为0，标准差为0.1的随机分布。</p></blockquote><blockquote><p><strong>step3：</strong>创建输入层和标签的placeholder，大概的意思是占住空间，以方便后续数据喂给模型。</p></blockquote><blockquote><p><strong>step4：</strong>实际上是向前传播 \( z = w^{T}x,+,b\)，\( a = sigmoid(z)\)，其中sigmoid是\( \frac{1}{1+\exp(-z)}\)。这里可能有一个疑问，第二个隐藏层到输出层，没有使用sigmoid函数。原因继续往下看就知道了。</p></blockquote><blockquote><p><strong>step5：</strong>计算损失函数，调用了tf的sigmoid_cross_entropy_with_logits，这个函数把交叉熵和sigmoid的计算放在了一起，所以上面不需要去计算sigmoid了。这样做的好处很明显，就是方便我们修改从最后一个隐藏层到输出层的激活函数，比如将sigmoid_cross_entropy_with_logits替换为softmax_cross_entropy_with_logits，那么我们最后一个激活函数就变成了softmax。最后设置学习率并且把我们的损失函数传给梯度下降类的最小化函数中，tf就会自动的帮我们优化参数，从而最小化损失值了。</p></blockquote><blockquote><p><strong>step6：</strong>使用测试数据去计算模型的识别准确率</p></blockquote><blockquote><p><strong>step7：</strong>最后一步，我们将数据分为小份，随着迭代，逐步喂给模型。然后记录损失和准确率的变化，并做图。</p></blockquote><p>这里我们为了简单，没有使用softmax，dropout和正则化等优化方法，所以识别率只达到了90%，不过作为一个入门来说已经够了。</p><p><a href="/uploads/2018/07/2018-07-07-tensorflow-mnist.png"><img src="/uploads/2018/07/2018-07-07-tensorflow-mnist.png" alt="2018-07-07-tensorflow-mnist"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;自从有tensorflow这样的平台工具横空出世，机器学习的代码编写逐渐变的
      
    
    </summary>
    
      <category term="machinelearning" scheme="http://0cch.com/categories/machinelearning/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习练习题1</title>
    <link href="http://0cch.com/2018/06/22/machine-learning-ex1/"/>
    <id>http://0cch.com/2018/06/22/machine-learning-ex1/</id>
    <published>2018-06-22T08:13:28.000Z</published>
    <updated>2019-07-24T07:55:31.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>掐指一算，已经有三个月没有更新blog了。因为最近一直在学习机器学习的内容，所以没空也没有新鲜的技术值得写下来分享。还好经过一段时间的积累（学习线性代数和概率论），机器学习这块内容也算是入门了。这是机器学习的第一个习题，线性回归。用最直白的话来说，就是用函数去拟合数据分布，从而达到预测新数据的效果。需要的知识是矩阵的计算，最小二乘法以及求偏微分。</p><p>关键的公式只有两个：</p><span>$$\begin{align}Cost(\theta) = \frac{1}{2m}\,\sum^{m}_{i=1}\,(h_\theta(x^{i})-y^{i})^2 \tag{1}\\\theta_{j} = \theta_{j}-\alpha\frac{1}{m}\,\sum^{m}_{i=1}(h_\theta(x^{i})-y^{i})\frac{\partial{h_\theta(x^{i})}}{\partial{\theta_{j}}}\tag{2}\end{align}$$</span><!-- Has MathJax --><p>那么最后需要确定的只剩下一个，我们希望用什么样的曲线去拟合样本，这个就需要经验和尝试了。这里的练习只需要用直线来拟合就足够了: \( h_\theta(x) = \theta^{T}x = \theta_{0}+\theta_{1}x_{1} \) .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">'ex1data1.txt'</span>, delimiter=<span class="string">','</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离样本数据输入X和输出Y</span></span><br><span class="line">X = np.concatenate((np.ones((len(data),<span class="number">1</span>)), data[:,<span class="number">0</span>].reshape((len(data),<span class="number">1</span>))), axis=<span class="number">1</span>)</span><br><span class="line">theta = np.random.randn(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">Y = data[:,<span class="number">1</span>].reshape((len(data),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了加速计算，把除法优化位乘法</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">div_m = <span class="number">1</span> / len(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> loop_count <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    Y1 = X.dot(theta)</span><br><span class="line">    <span class="comment"># 根据公式计算损失</span></span><br><span class="line">    cost = ((Y-Y1)**<span class="number">2</span>).sum() * <span class="number">0.5</span> * div_m;</span><br><span class="line">    print(cost)</span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        theta[i, <span class="number">0</span>] = theta[i, <span class="number">0</span>] - alpha * div_m * (np.diagflat(X[:, i]) * (Y1 - Y)).sum()    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后把拟合直线画出来</span></span><br><span class="line">Xl = np.linspace(<span class="number">0</span>, <span class="number">30</span>, <span class="number">100</span>)</span><br><span class="line">Yl = Xl * theta[<span class="number">1</span>, <span class="number">0</span>] + theta[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(data[:,<span class="number">0</span>],data[:,<span class="number">1</span>],<span class="string">'x'</span>, Xl, Yl, <span class="string">'r'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="/uploads/2018/06/2018-06-23-machine-learning-ex1.jpg"><img src="/uploads/2018/06/2018-06-23-machine-learning-ex1.jpg" alt="2018-06-23-machine-learning-ex1"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;掐指一算，已经有三个月没有更新blog了。因为最近一直在学习机器学习的内容，
      
    
    </summary>
    
      <category term="machinelearning" scheme="http://0cch.com/categories/machinelearning/"/>
    
    
  </entry>
  
  <entry>
    <title>广度遍历删除文件</title>
    <link href="http://0cch.com/2018/03/29/breadth-first-traversal-to-del-file/"/>
    <id>http://0cch.com/2018/03/29/breadth-first-traversal-to-del-file/</id>
    <published>2018-03-29T06:17:34.000Z</published>
    <updated>2019-07-24T07:55:31.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近遇到一个要删除文件夹的问题，文件夹内有大量文件和子文件夹，而且结构非常复杂，删除特别慢。于是思考了一下如何能加速文件删除的问题。我看到大部分的实现方法都是深度遍历，即遇到新的文件夹就进入文件夹遍历文件，直到结束后返回上一层继续遍历。实际上这种方法存在一个问题，在我们的硬盘上，文件夹和文件一般是B-Tree分布的，所以同一层文件夹的文件的数据都比较相近，而不同的层的文件夹的文件可能差距比较远，于是深度遍历让硬盘磁头从一个文件夹跨越到另外一个文件夹，磁头花的时间更长了，更何况子文件夹遍历结束，还得从子文件夹在移动回父文件夹。而是用广度遍历就不同，他把当前目录遍历完成后才去遍历另外一个，这样磁头移动的总距离肯定更少，遍历速度当然更快。以下代码我的一个实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoFindHandle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AutoFindHandle(HANDLE find_handle) : find_handle_(find_handle) &#123;&#125;</span><br><span class="line">    ~AutoFindHandle() &#123;</span><br><span class="line">        FindClose(find_handle_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HANDLE find_handle_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CollectFileAndDir</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::wstring &amp;dir, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; &amp;file_path, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; &amp;dir_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE find_handle;</span><br><span class="line">    WIN32_FIND_DATAW data;</span><br><span class="line">    <span class="built_in">std</span>::wstring temp_path;</span><br><span class="line">    <span class="built_in">std</span>::wstring current_dir = dir;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::wstring&gt; temp_dir;</span><br><span class="line"></span><br><span class="line">    if (current_dir[current_dir.length() - 1] != L'\\') &#123;</span><br><span class="line">        current_dir += <span class="string">L"\\"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::wstring path = current_dir + <span class="string">L"*"</span>;</span><br><span class="line"></span><br><span class="line">    find_handle = FindFirstFileW(path.c_str(), &amp;data);</span><br><span class="line">    <span class="keyword">if</span> (find_handle == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AutoFindHandle <span class="title">auto_find_handle</span><span class="params">(find_handle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wcscmp(data.cFileName, <span class="string">L".."</span>) != <span class="number">0</span> &amp;&amp; </span><br><span class="line">        wcscmp(data.cFileName, <span class="string">L"."</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            temp_path = current_dir;</span><br><span class="line">            temp_path += data.cFileName;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((data.dwFileAttributes &amp; (FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)) != <span class="number">0</span>) &#123;</span><br><span class="line">                SetFileAttributesW(temp_path.c_str(), FILE_ATTRIBUTE_NORMAL);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((data.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                temp_dir.push(temp_path);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                file_path.push_back(temp_path);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (FindNextFileW(find_handle, &amp;data)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wcscmp(data.cFileName, <span class="string">L".."</span>) != <span class="number">0</span> &amp;&amp; </span><br><span class="line">            wcscmp(data.cFileName, <span class="string">L"."</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                temp_path = current_dir;</span><br><span class="line">                temp_path += data.cFileName;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((data.dwFileAttributes &amp; (FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    SetFileAttributesW(temp_path.c_str(), FILE_ATTRIBUTE_NORMAL);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((data.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    temp_dir.push(temp_path);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    file_path.push_back(temp_path);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!temp_dir.empty()) &#123;</span><br><span class="line"></span><br><span class="line">        CollectFileAndDir(temp_dir.top(), file_path, dir_path);</span><br><span class="line">        </span><br><span class="line">        temp_dir.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dir_path.push_back(dir);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">DeleteFolder</span><span class="params">(LPCWSTR path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; file_path;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt; dir_path;</span><br><span class="line">    <span class="keyword">if</span> (!CollectFileAndDir(path, file_path, dir_path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt;::iterator it = file_path.begin(); it != file_path.end(); ++it) &#123;</span><br><span class="line">        DeleteFileW(it-&gt;c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::wstring&gt;::iterator it = dir_path.begin(); it != dir_path.end(); ++it) &#123;</span><br><span class="line">        RemoveDirectoryW(it-&gt;c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;最近遇到一个要删除文件夹的问题，文件夹内有大量文件和子文件夹，而且结构非常复
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>鸡年总结，狗年计划</title>
    <link href="http://0cch.com/2018/02/25/2018-plan/"/>
    <id>http://0cch.com/2018/02/25/2018-plan/</id>
    <published>2018-02-25T13:00:28.000Z</published>
    <updated>2019-07-24T07:55:31.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>虽然没到十五，但是这个年基本上也是过完了。是收心总结鸡年，展望狗年的时候了。</p><p>生活方面，鸡年过的不算顺心，尤其是上半年，麻烦事情接二连三，具体也事情也就不想多写了，不愉快的事情就应该被忘记。工作上，虽然没有明显的进步，但也算是得到了不错的回报，内心有愧的拿了一个优秀员工。重点来了，要说说技术方面的事情。去年下半年快到年底的时候，我做了一个决定，学习深度学习相关知识，作为今后转型的砝码。这里不得不说，做这个决定其实已经很晚了，因为已经有很多人早就踏入了这个领域。我总是想，如果能早两年开窍就好了，但是凡是哪有如果呢。更何况就在去年初我还在跟以前同事争论，坚定的认为个人PC行业还是非常宽阔的，但实际上那个想法也只是说自己的一厢情愿而已。下半年某企业找到我说想让我去他们的个人PC业务部门，给的等级还不错，薪资水平也很快给我翻倍了，但是我拒绝了，那个时候我就知道自己内心里已经不看好个人PC，尤其是Windows上面的发展了。于是乎，打算学习更接近未来趋势的一些东西。</p><p>当今最火的两个领域，区块链和深度学习，我很快的就选择学习深度学习的相关知识了。原因很简单，深度学习现在已经在很大程度上推进了社会发展。而区块链技术，除了在各种加密币方面非常火之外，貌似还没看到什么用途能促进社会进步，至少没有深度学习那么明显吧。下半年的两三个月里开始慢慢接触了深度学习，当然也包括一些其他的机器学习领域的知识。于是深深的感慨，数学在这些领域的重要性，当然又一次后悔没有学好数学，也不得不吐槽我们的高等数学教育是多么的死板无趣。</p><p>今年计划，生活上的事情其实没有什么计划可言，就希望过的更加顺心吧。工作方面，希望能主导一些真正有意义的项目，希望能推进公司往深度学习方面来发展。另外技术方面专注于数学和深度学习。具体的计划就不列了，因为貌似每次列出来也不一定能全部完成 =v=</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;虽然没到十五，但是这个年基本上也是过完了。是收心总结鸡年，展望狗年的时候了。
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh的反向连接</title>
    <link href="http://0cch.com/2018/01/20/reverse-ssh/"/>
    <id>http://0cch.com/2018/01/20/reverse-ssh/</id>
    <published>2018-01-20T08:53:39.000Z</published>
    <updated>2019-07-24T07:55:31.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>家里有个树莓派，基本上用来当了一个微型服务器，24小时跑着。主要用途是在我不在家的时候控制家里网络，充分利用带宽。一直以来，我都是用树莓派把IP更新到DDNS（家里是外网IP），并且在路由器上做端口映射。这样就能在其他地方访问树莓派了。但是不知为何，这段时间无法从外网ping通家里（后来发现是光猫问题，换了个猫就好了），从外围直接联通家里的树莓派这条路被封了，所以就折腾了SSH的反向连接功能。用这个方法也可以克服家里是内网IP的情况，当然前提是我们在外网有一台服务器或者vps。原理上和其他的反向连接是一样的，这里就不讨论原理了，直接介绍方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -fCNR remote_port:localhost:local_port user@remote_addr</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f 后台执行ssh指令</span><br><span class="line">-C 允许压缩数据</span><br><span class="line">-N 不执行远程指令</span><br><span class="line">-R 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</span><br></pre></td></tr></table></figure><p>这条命令的意思是：请将remote_addr机器里对remote_port的连接转发到本地机器的本地端口。举个例子，假设我有一台内网机器A，其ssh端口为6622，另外有一台VPS，地址是VPS_ADDR.com，SSH端口是8822。这个时候我想通过VPS的9922端口去访问树莓派的SSH。那么我需要用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -fCNR 9922:localhost:6622 user@VPS_ADDR.com</span><br></pre></td></tr></table></figure><p>当完成了这个命令后，我们就可以在VPS上登陆树莓派了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -p 9922 pi@localhost</span><br></pre></td></tr></table></figure><p>解决了这个问题后，我们需要解决另外一个问题。我们每次输入反向连接的命令的时候总需要输入VPS密码，这个非常不利于我们把命令设置为开机启动。为了解决这个问题，首先想到的是sshpass。这个工具可以帮助我们自动输入密码，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sshpass -p your_VPS_password ssh -fCNR 9922:localhost:6622 user@VPS_ADDR.com</span><br></pre></td></tr></table></figure><p>把命令放到树莓派的开机启动命令后，重启树莓派，成功从VPS连入了树莓派。不过第二天，我又发现了另外一个问题，SSH的反向连接在无人访问的时候会超时，超时后会断开链接。这样明显不符合我想连就连的需求。于是就得上autossh这个工具了，这个工具会守护ssh，让ssh的反向连接保持联通。但是autossh不支持自动输入密码，网上很多解决办法是用证书的方式省去了输入密码的过程，不过我这里提供另外一个方法，使用expect工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># expect -c &quot;</span><br><span class="line">spawn autossh -M 11122 -CNR 9922:localhost:6622 user@VPS_ADDR.com -o StrictHostKeyChecking=no</span><br><span class="line">expect \&quot;Password:\&quot;</span><br><span class="line">send \&quot;your_password\r\&quot;</span><br><span class="line">expect eof</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>这个工具可以自动和ssh进行交互，当VPS提示Password:的时候，我们send密码过去就行了，注意使用StrictHostKeyChecking=no来避免Host key的验证提示。把这个命令放在开机启动的时候执行，完美解决了外网访问家里树莓派的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;家里有个树莓派，基本上用来当了一个微型服务器，24小时跑着。主要用途是在我不
      
    
    </summary>
    
      <category term="Tips" scheme="http://0cch.com/categories/Tips/"/>
    
    
  </entry>
  
  <entry>
    <title>将图片转化成mnist格式</title>
    <link href="http://0cch.com/2017/12/09/image-to-mnist1/"/>
    <id>http://0cch.com/2017/12/09/image-to-mnist1/</id>
    <published>2017-12-09T12:51:42.000Z</published>
    <updated>2019-07-24T07:55:31.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>利用mnist数据对数字符号进行识别基本上算是深度学习的Hello World了。在我学习这个“hello world”的过程中，多多少少有点不爽，原因是无论是训练数据还是测试数据，都是mnist准备好的，即使最后训练的数字识别率很高，我也没有什么参与感。其实，我特别想测试自己手写数字的识别率。<br>为了完成上述想法，我第一个想到的是将普通图片数据转换成mnist数据。mnist的数据格式非常简单，如下图所示：</p><p><a href="/uploads/2017/12/2017-12-10-t10k-images.idx3-ubyte.png"><img src="/uploads/2017/12/2017-12-10-t10k-images.idx3-ubyte.png" alt="2017-12-10-t10k-images.idx3-ubyte"></a></p><p><a href="/uploads/2017/12/2017-12-10-t10k-labels.idx1-ubyte.png"><img src="/uploads/2017/12/2017-12-10-t10k-labels.idx1-ubyte.png" alt="2017-12-10-t10k-labels.idx1-ubyte"></a></p><p>两幅图分别表示了图形数据和标签数据。他们都有一个4字节长度的magic number，用来识别数据的具体格式。如果是标签数据，那么格式相对简单，后续是一个标签数量，接着的是标签数据（0-9的值）。如果是图像数据，那么magic number后，出了4个字节的数据数量以外，还有分别占4字节的行列数据，最后的就是图像数据。结构非常简单，但是值得注意的事情有两点：</p><blockquote><ol><li>数据使用big endian组织的。</li><li>图像数据中，255表示前景，也就是黑色，0表示背景，也就是白色，这和我们平时看到的RGB是不同的。</li></ol></blockquote><p>知道了数据格式，接下来的事情就是用程序将图像转换到mnist了。说实在的，如果对于操作二进制的数据，C比python还是方便不少的。但是C读取图像更加麻烦。所以这里推荐还是使用python对数据做转化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先导入图像处理库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 接下来打开图片，并且将像转化为8bit黑白像素</span></span><br><span class="line">im = Image.open(path_to_image)</span><br><span class="line">im = im.convert(<span class="string">'L'</span>)</span><br><span class="line"><span class="comment"># 转换图像到mnist的大小28*28</span></span><br><span class="line">im = im.resize((<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line"><span class="comment"># 获取图像长宽</span></span><br><span class="line">width, height = im.size()</span><br><span class="line"><span class="comment"># 将图像数据转化位mnist</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>,height):</span><br><span class="line">        data_image.append(<span class="number">255</span> - pixel[y,x])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写到mnist文件中</span></span><br><span class="line">header = array(<span class="string">'B'</span>)</span><br><span class="line"><span class="comment"># 写入magic number</span></span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 写入数据数量，以一个图片为例</span></span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 写入行列像素数</span></span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">28</span>])</span><br><span class="line">header.extend([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">28</span>])</span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">header.extend(data_image)</span><br><span class="line"><span class="comment"># 最后写文件</span></span><br><span class="line">output_file = open(<span class="string">r'data.mnist'</span>, <span class="string">'wb'</span>)</span><br><span class="line">header.tofile(output_file)</span><br><span class="line">output_file.close()</span><br></pre></td></tr></table></figure><p>以上是对图像数据的转换，标签数据的转换代码和以上代码基本一样，所以这里不再赘述。<br>有了这个方法，我们可以通过画图软件画上一堆自己手写的数字，通过python批量转化成mnist格式的数据，再让tensorflow进行测试，算出模型对我们自己手写数字的识别正确率。</p><p>好了，以上就是我说的第一种让模型识别自己的手写数字的方法。不过，这个方法不能实时的识别我手写的数字，让人总觉得缺点什么。于是就有了第二种方法，这种方法将借助浏览器，js以及web server等工具将手写的数字实时的传给后台的模型进行识别，然后把结果回复给用户。不过这个方法就要等待下一篇文章来描述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;利用mnist数据对数字符号进行识别基本上算是深度学习的Hello Worl
      
    
    </summary>
    
      <category term="DeepLearner" scheme="http://0cch.com/categories/DeepLearner/"/>
    
    
  </entry>
  
</feed>
