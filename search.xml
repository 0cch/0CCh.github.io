<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[测试math-plugin]]></title>
      <url>/2017/08/17/test-math-plugin/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h2><p>Simple inline \(a = b + c\).</p>
<p>This equation \(\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1 \) is inline.</p>
<h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>$$\frac{\partial u}{\partial t}<br>= h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p>
<span>$$\begin{aligned}
\dot{x} &amp; = \sigma(y-x) \\
\dot{y} &amp; = \rho x - y - xz \\
\dot{z} &amp; = -\beta z + xy
\end{aligned}$$</span><!-- Has MathJax -->]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[调试COM的一个tip]]></title>
      <url>/2017/07/09/tip-about-com/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近遇到朋友的一个程序崩溃，原因是接口没有释放的时候调用了CoUninitialize，接着才释放接口。这个应该是个很明显的问题，但是朋友告诉我以前代码就是这个样子的，没有崩溃过，最近修改了部分代码但并不是这一块的。为了看看究竟什么回事，我把没有崩溃的程序抓了dump，看了COM的初始化引用计数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0:000&gt; dt _teb @$teb ReservedForOle</div><div class="line">ntdll!_TEB</div><div class="line">   +0x1758 ReservedForOle : 0x00000000`00271b00 Void</div><div class="line"></div><div class="line">0:000&gt; dt ole32!SOleTlsData 0x00000000`00271b00 cComInits pNativeApt</div><div class="line">   +0x028 cComInits  : 5</div><div class="line">   +0x080 pNativeApt : 0x00000000`00272680 CComApartment</div><div class="line">   </div><div class="line">0:000&gt; dt 0x00000000`00272680 CComApartment _AptKind</div><div class="line">ole32!CComApartment</div><div class="line">   +0x010 _AptKind : 4 ( APTKIND_APARTMENTTHREADED )</div></pre></td></tr></table></figure>
<p>没有崩溃的时候，引用计数确实不为0，也能看出是个STA。后来朋友发现，之所以之前没有崩溃，是因为之前线程加载的某个dll中，有初始化COM的调用，所以引用计数不为0。后来移开了这个dll，问题就出现了。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[gotcha sdk 文件监控功能更新]]></title>
      <url>/2017/07/02/gotcha-sdk-monitor-update/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在15年的一篇blog中，我介绍了gotcha sdk。<a href="https://0cch.com/ntinternals/2015/11/25/gotcha-sdk.html">https://0cch.com/ntinternals/2015/11/25/gotcha-sdk.html</a></p>
<p>当时gotcha sdk没有提供文件监控功能，也就是说当搜索文件发生变化的时候，这个变化不会体现到搜索结果列表中。其实这个功能一直在todo list中，只不过忙的时候没时间写这部分代码，闲的时候又忘了。前几天终于有时间把这部分代码补上，升级了sdk。</p>
<p>gotcha sdk 代码SVN:<br><a href="http://code.taobao.org/svn/gotcha_sdk/" target="_blank" rel="external">http://code.taobao.org/svn/gotcha_sdk/</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[切换到session 0]]></title>
      <url>/2017/06/25/switch-to-session-0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这是一个小技巧，可以帮助我们从session 1切换到session 0，并且获得system权限。有了system权限，可以做一些admin做不了的事情，具体哪些事情大伙可以自己挖掘。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">切换到session 0：    rundll32 winsta.dll WinStationSwitchToServicesSession</div><div class="line">切换会原session：    rundll32 winsta.dll WinStationRevertFromServicesSession</div></pre></td></tr></table></figure>
<p>但是如果直接切换到session 0，会发现一个问题，我们没有桌面程序，所以什么事情也做不了。解决方法也很简单，创建一个explorer就可以了。但是普通方法创建explorer，怎么会不能创建到session 0，于是这里可想而知，我们需要一个服务来创建explorer。专门写一个服务程序未免太麻烦，这里可以使用cmd来快速创建explorer。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sc create desktop0 binpath= &quot;cmd /c start explorer.exe&quot; type= own type= interact</div><div class="line">net start desktop0</div></pre></td></tr></table></figure>
<p>虽然cmd不是服务，但是也会被运行起来，只不过不能与服务管理器交互，所以在超时的时候会被结束。不过那个时候已经没关系了，因为explorer已经创建起来了。接下来就可以切换了session 0，用system权限管理电脑了。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[0cchext插件实用命令dttoc]]></title>
      <url>/2017/05/02/0cchext-dttoc-command/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近给<a href="https://github.com/0cch/0cchext/releases/tag/1.0.16.3.55" target="_blank" rel="external">0cchext</a>添加了一个实用的逆向命令，dttoc，这个命令可以把dt命令输出的结构体转化为C的结构，方便我们做逆向还原工作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !0cchext.dttoc nt!_peb</div><div class="line">struct _PEB &#123;</div><div class="line">	BYTE InheritedAddressSpace;</div><div class="line">	BYTE ReadImageFileExecOptions;</div><div class="line">	BYTE BeingDebugged;</div><div class="line">	union &#123;</div><div class="line">		BYTE BitField;</div><div class="line">		struct &#123;</div><div class="line">			BYTE ImageUsesLargePages:1;</div><div class="line">			BYTE IsProtectedProcess:1;</div><div class="line">			BYTE IsImageDynamicallyRelocated:1;</div><div class="line">			BYTE SkipPatchingUser32Forwarders:1;</div><div class="line">			BYTE IsPackagedProcess:1;</div><div class="line">			BYTE IsAppContainer:1;</div><div class="line">			BYTE IsProtectedProcessLight:1;</div><div class="line">			BYTE IsLongPathAwareProcess:1;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	VOID* Mutant;</div><div class="line">	VOID* ImageBaseAddress;</div><div class="line">	_PEB_LDR_DATA* Ldr;</div><div class="line">	_RTL_USER_PROCESS_PARAMETERS* ProcessParameters;</div><div class="line">	VOID* SubSystemData;</div><div class="line">	VOID* ProcessHeap;</div><div class="line">	_RTL_CRITICAL_SECTION* FastPebLock;</div><div class="line">	_SLIST_HEADER* AtlThunkSListPtr;</div><div class="line">	VOID* IFEOKey;</div><div class="line">	union &#123;</div><div class="line">		DWORD CrossProcessFlags;</div><div class="line">		struct &#123;</div><div class="line">			DWORD ProcessInJob:1;</div><div class="line">			DWORD ProcessInitializing:1;</div><div class="line">			DWORD ProcessUsingVEH:1;</div><div class="line">			DWORD ProcessUsingVCH:1;</div><div class="line">			DWORD ProcessUsingFTH:1;</div><div class="line">			DWORD ReservedBits0:27;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	union &#123;</div><div class="line">		VOID* KernelCallbackTable;</div><div class="line">		VOID* UserSharedInfoPtr;</div><div class="line">	&#125;;</div><div class="line">	DWORD SystemReserved[1];</div><div class="line">	_SLIST_HEADER* AtlThunkSListPtr32;</div><div class="line">	VOID* ApiSetMap;</div><div class="line">	DWORD TlsExpansionCounter;</div><div class="line">	VOID* TlsBitmap;</div><div class="line">	DWORD TlsBitmapBits[2];</div><div class="line">	VOID* ReadOnlySharedMemoryBase;</div><div class="line">	VOID* SparePvoid0;</div><div class="line">	VOID** ReadOnlyStaticServerData;</div><div class="line">	VOID* AnsiCodePageData;</div><div class="line">	VOID* OemCodePageData;</div><div class="line">	VOID* UnicodeCaseTableData;</div><div class="line">	DWORD NumberOfProcessors;</div><div class="line">	DWORD NtGlobalFlag;</div><div class="line">	_LARGE_INTEGER CriticalSectionTimeout;</div><div class="line">	DWORD HeapSegmentReserve;</div><div class="line">	DWORD HeapSegmentCommit;</div><div class="line">	DWORD HeapDeCommitTotalFreeThreshold;</div><div class="line">	DWORD HeapDeCommitFreeBlockThreshold;</div><div class="line">	DWORD NumberOfHeaps;</div><div class="line">	DWORD MaximumNumberOfHeaps;</div><div class="line">	VOID** ProcessHeaps;</div><div class="line">	VOID* GdiSharedHandleTable;</div><div class="line">	VOID* ProcessStarterHelper;</div><div class="line">	DWORD GdiDCAttributeList;</div><div class="line">	_RTL_CRITICAL_SECTION* LoaderLock;</div><div class="line">	DWORD OSMajorVersion;</div><div class="line">	DWORD OSMinorVersion;</div><div class="line">	WORD OSBuildNumber;</div><div class="line">	WORD OSCSDVersion;</div><div class="line">	DWORD OSPlatformId;</div><div class="line">	DWORD ImageSubsystem;</div><div class="line">	DWORD ImageSubsystemMajorVersion;</div><div class="line">	DWORD ImageSubsystemMinorVersion;</div><div class="line">	DWORD ActiveProcessAffinityMask;</div><div class="line">	DWORD GdiHandleBuffer[34];</div><div class="line">	void* PostProcessInitRoutine;</div><div class="line">	VOID* TlsExpansionBitmap;</div><div class="line">	DWORD TlsExpansionBitmapBits[32];</div><div class="line">	DWORD SessionId;</div><div class="line">	_ULARGE_INTEGER AppCompatFlags;</div><div class="line">	_ULARGE_INTEGER AppCompatFlagsUser;</div><div class="line">	VOID* pShimData;</div><div class="line">	VOID* AppCompatInfo;</div><div class="line">	_UNICODE_STRING CSDVersion;</div><div class="line">	_ACTIVATION_CONTEXT_DATA* ActivationContextData;</div><div class="line">	_ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;</div><div class="line">	_ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;</div><div class="line">	_ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;</div><div class="line">	DWORD MinimumStackCommit;</div><div class="line">	_FLS_CALLBACK_INFO* FlsCallback;</div><div class="line">	_LIST_ENTRY FlsListHead;</div><div class="line">	VOID* FlsBitmap;</div><div class="line">	DWORD FlsBitmapBits[4];</div><div class="line">	DWORD FlsHighIndex;</div><div class="line">	VOID* WerRegistrationData;</div><div class="line">	VOID* WerShipAssertPtr;</div><div class="line">	VOID* pUnused;</div><div class="line">	VOID* pImageHeaderHash;</div><div class="line">	union &#123;</div><div class="line">		DWORD TracingFlags;</div><div class="line">		struct &#123;</div><div class="line">			QWORD HeapTracingEnabled:1;</div><div class="line">			QWORD CritSecTracingEnabled:1;</div><div class="line">			QWORD LibLoaderTracingEnabled:1;</div><div class="line">			QWORD SpareTracingBits:29;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	QWORD CsrServerReadOnlySharedMemoryBase;</div><div class="line">	DWORD TppWorkerpListLock;</div><div class="line">	_LIST_ENTRY TppWorkerpList;</div><div class="line">	VOID* WaitOnAddressHashTable[128];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Delphi异常0EEDFADE]]></title>
      <url>/2017/04/04/delphi-exception/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>0EEDFADE是Delphi内部异常代码，该异常通常有7个参数，我们用的上的是第二个参数，这个参数指向的是Exception的对象，通过这个对象，我们就可以查出异常的一些信息。</p>
<p>以Delphi XE2为例,Class name的偏移为（不同的版本偏移有所不同）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x86_vmtClassName = -56(0x38);</div><div class="line">x64_vmtClassName = -112(0x70);</div></pre></td></tr></table></figure></p>
<p>我们可以用如下命令获取相关信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x86: da poi(poi(exception_object)-38)+1;du /c 100 poi(exception_object+4)  </div><div class="line">x64: da poi(poi(exception_object)-70)+1;du /c 100 poi(exception_object+8)</div></pre></td></tr></table></figure></p>
<p>以上命令就能获取异常的类名，而exception_object+sizeof(pointer)则是Exception Message的所在偏移，这是一个unicode string。实际效果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0:002&gt; da poi(poi(003a2800)-38)+1;du /c 100 poi(003a2800 +4)</div><div class="line">00b9ec47  &quot;TTransportExceptionUnknown&quot;</div><div class="line">00375b8c  &quot;ServerTransport.Accept() may not return NULL&quot;</div></pre></td></tr></table></figure>
<p>当然，我们也可以设置event filter去截获异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x86: sxe -c &quot;da poi(poi(poi(@ebp+1c))-38)+1;du /c 100 poi(poi(@ebp+1c)+4)&quot; 0EEDFADE</div><div class="line">x64: sxe -c &quot;da poi(poi(poi(@rbp+48))-70)+1;du /c 100 poi(poi(@rbp+48)+8)&quot; 0EEDFADE</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 10设置系统DPI]]></title>
      <url>/2017/03/08/set-dpi/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>现在的显示器分辨率越来越高2K，4K甚至5K，而很多程序并不支持这一的高分辨率，所以这些程序在桌面上会显示的很小，好在Windows 8以后的系统中，我们可以设置DPI来放大程序的窗口，如下图所示：  </p>
<p><a href="/uploads/2017/03/20170309145111.png"><img src="/uploads/2017/03/20170309145111.png" alt="20170309145111"></a></p>
<p>但是，微软并没有把设置DPI的接口文档化。所以我把这个功能逆了一下，还原的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	BOOL ApplyDpiSetting(int val);</span></div><div class="line"><span class="comment">	val 为DPI要设置的数字，例如0是100%，1是125%，以此类推，注意250%以后是300%。</span></div><div class="line"><span class="comment">	另外上面的对应关系只是通常情况下的，还有可能有其他对应关系，例如0是300%，-1是250%等等。</span></div><div class="line"><span class="comment">	具体怎么对应可以通过GetDpiForMonitor函数来获取</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SET_DPI</span> &#123;</span></div><div class="line">	DISPLAYCONFIG_DEVICE_INFO_HEADER header;</div><div class="line">	ULONG val;</div><div class="line">&#125; SET_DPI;</div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">ApplyDpiSetting</span><span class="params">(ULONG val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	UINT32 num_of_paths = <span class="number">0</span>;</div><div class="line">	UINT32 num_of_modes = <span class="number">0</span>;</div><div class="line">	DISPLAYCONFIG_PATH_INFO* display_paths = <span class="literal">NULL</span>; </div><div class="line">	DISPLAYCONFIG_MODE_INFO* display_modes = <span class="literal">NULL</span>;</div><div class="line">	BOOL retval = FALSE;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> </div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (GetDisplayConfigBufferSizes(QDC_ONLY_ACTIVE_PATHS, </div><div class="line">			&amp;num_of_paths, </div><div class="line">			&amp;num_of_modes) != ERROR_SUCCESS) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		display_paths = (DISPLAYCONFIG_PATH_INFO*)<span class="built_in">calloc</span>((<span class="keyword">int</span>)num_of_paths, <span class="keyword">sizeof</span>(DISPLAYCONFIG_PATH_INFO));</div><div class="line">		display_modes = (DISPLAYCONFIG_MODE_INFO*)<span class="built_in">calloc</span>((<span class="keyword">int</span>)num_of_modes, <span class="keyword">sizeof</span>(DISPLAYCONFIG_MODE_INFO));</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (QueryDisplayConfig(QDC_ONLY_ACTIVE_PATHS, </div><div class="line">			&amp;num_of_paths, </div><div class="line">			display_paths, </div><div class="line">			&amp;num_of_modes, </div><div class="line">			display_modes, </div><div class="line">			<span class="literal">NULL</span>) != ERROR_SUCCESS) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		SET_DPI dpi;</div><div class="line">		dpi.header.type = (DISPLAYCONFIG_DEVICE_INFO_TYPE)<span class="number">0xFFFFFFFC</span>;</div><div class="line">		dpi.header.size = <span class="keyword">sizeof</span>(dpi);</div><div class="line">		dpi.header.adapterId = display_paths[<span class="number">0</span>].sourceInfo.adapterId;</div><div class="line">		dpi.header.id = display_paths[<span class="number">0</span>].sourceInfo.id;</div><div class="line">		dpi.val = val;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (DisplayConfigSetDeviceInfo((DISPLAYCONFIG_DEVICE_INFO_HEADER*)&amp;dpi) == ERROR_SUCCESS) &#123;</div><div class="line">			retval = TRUE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125; <span class="keyword">while</span> (<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (display_paths) &#123;</div><div class="line">		<span class="built_in">free</span>(display_paths);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (display_modes) &#123;</div><div class="line">		<span class="built_in">free</span>(display_modes);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> retval;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[让编译器不推荐(deprecate)使用一个函数]]></title>
      <url>/2017/02/12/deprecate-a-function/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在开发一些公共库函数的时候，我们常常会对函数进行改写，这个时候我们会希望使用者用新的函数。为了提醒使用者，我们可以通过将函数声明为deprecated，这样编译器在编译的时候会抛出一个C4995或者C4996的警告。这个警告我们应该也经常看到过，比如使用strcpy，编译器会提示我们使用strcpy_s。  </p>
<p>使用这个编译器特性有两种方法：  </p>
<ol>
<li>__declspec(deprecated)</li>
<li>#pragma deprecated</li>
</ol>
<ul>
<li>__declspec(deprecated)<br><a href="https://msdn.microsoft.com/en-us/library/044swk7y.aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/044swk7y.aspx</a><br>这种方法直接声明在函数或者类之前，在使用函数的地方会抛出C4996的警告  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__declspec(deprecated) void func1(int) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当然我们还可以给警告自定义消息信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__declspec(deprecated(&quot;** this is a deprecated function **&quot;)) void func2(int) &#123;&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>#pragma deprecated<br><a href="https://msdn.microsoft.com/en-us/library/c8xdzzhh.aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/c8xdzzhh.aspx</a><br>这种方法可以一次性声明多个函数或者类，使用函数的地方会抛出C4995的警告  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#pragma deprecated(func1, func2)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PDB 下载工具]]></title>
      <url>/2017/01/02/pdbdownloader/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前段时间微软的符号服务器特别不稳定，Windbg下载符号文件老是失败，所以就专门写了个pdb的下载工具(<a href="https://github.com/0cch/pdbdownloader" target="_blank" rel="external">pdbdownloader</a>)放到Github上。  </p>
<p>P.S. 用WPF写界面确实是很有趣  </p>
<p><a href="/uploads/2017/01/20170103120319.png"><img src="/uploads/2017/01/20170103120319.png" alt="20170103120319"></a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[快速抛出失败的方法 INT 29H]]></title>
      <url>/2016/12/13/int29h/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>从Windows8开始，Windows设计了一个新的中断，INT 29H，用来快速的抛出失败。在sdk中，他被声明为 __fastfail:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_LEGACY_GS_VIOLATION          0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_VTGUARD_CHECK_FAILURE        1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_STACK_COOKIE_CHECK_FAILURE   2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_CORRUPT_LIST_ENTRY           3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INCORRECT_STACK              4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_ARG                  5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GS_COOKIE_INIT               6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_FATAL_APP_EXIT               7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_RANGE_CHECK_FAILURE          8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_UNSAFE_REGISTRY_ACCESS       9</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GUARD_ICALL_CHECK_FAILURE    10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GUARD_WRITE_CHECK_FAILURE    11</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_FIBER_SWITCH         12</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_SET_OF_CONTEXT       13</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_REFERENCE_COUNT      14</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_JUMP_BUFFER          18</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_MRDATA_MODIFIED              19</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_CERTIFICATION_FAILURE        20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_EXCEPTION_CHAIN      21</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_CRYPTO_LIBRARY               22</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT  23</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_IMAGE_BASE           24</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_DLOAD_PROTECTION_FAILURE     25</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_UNSAFE_EXTENSION_CALL        26</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_DEPRECATED_SERVICE_INVOKED   27</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_BUFFER_ACCESS        28</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_BALANCED_TREE        29</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_NEXT_THREAD          30</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED 31         <span class="comment">// Telemetry, nonfatal</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_APCS_DISABLED                32</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_IDLE_STATE           33</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_MRDATA_PROTECTION_FAILURE    34</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION    35</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_FAIL_INVALID_FAST_FAIL_CODE       0xFFFFFFFF</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt;= 1610</span></div><div class="line"></div><div class="line">DECLSPEC_NORETURN</div><div class="line">VOID</div><div class="line">__fastfail(</div><div class="line">    _In_ <span class="keyword">unsigned</span> <span class="keyword">int</span> Code</div><div class="line">    );</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> intrinsic(__fastfail)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	// 汇编代码为</span></div><div class="line"><span class="comment">	mov ecx, code</span></div><div class="line"><span class="comment">	int 29h</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div></pre></td></tr></table></figure>
<p>在中断代码执行后，操作系统会根据执行代码的环境来做出不同的处理。<br>如果<strong>fastfail发生在Ring0中，操作系统会抛出一个KERNEL_SECURITY_CHECK_FAILURE (0x139)的蓝屏。如果</strong>fastfail发生在Ring3，系统会抛出一个第二次机会的不可继续执行的异常，异常代码为0xC0000409，然后走进我们熟悉的Windows Error Reporting(WER)流程。另外，无论__fastfail发生在R0或者R3，如果有调试器正在调试系统或进程，都将得到一次中断到调试器的机会，这让我们能够看清楚具体发生了什么事情。但是正如我上面所说，这个是一个不可继续执行的异常，所以我们不能在调试器里处理了异常后让程序继续向前跑，当然也不能用try和except去捕获异常。</p>
<p>我觉得__fastfail是个非常不错的设计，它让程序可以快速的进入内核异常处理流程，不需要执行额外的用户层的代码，也不需要额外的内存空间，提高了不可恢复的异常处理的性能，更重要的是，简单快速不依赖内存的执行方式也保证了系统的安全。所以在系统的安全检查失败处理中，大量使用了这个方式，减少被攻击的可能性。</p>
<p>最后，如果INT 29H发生在Windows8以下的系统上，内核里会抛出一个常规的UNEXPECTED_KERNEL_MODE_TRAP的蓝屏，而用户层程序会抛出一个ACCESS VIOLATION的异常。</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[windbg的lua脚本扩展luadbg]]></title>
      <url>/2016/11/15/luadbg-windbg-ext/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>2012年的时候，我在blog上写到过开发了一个windbg的lua扩展<a href="https://0cch.com/debugging/2012/08/16/dbglua-ef-bc-8c-e8-ae-a9lua-e8-84-9a-e6-9c-ac-e4-b9-9f-e8-83-bd-e6-8e-a7-e5-88-b6windbg-e8-bf-9b-e8-a1-8c-e8-b0-83-e8-af-95.html">dbglua</a>，当时觉得windbg的原生脚本语法太奇怪了，而且太不容易使用。现在来看，依旧如此，只不过我已经很熟悉这个原生脚本了。而这个lua扩展反倒是没什么用，因为用起来也不太方便，比如访问结构体。</p>
<p>最近无意之中看了一眼pykd，他用重载.操作符的方式访问符号和结构体深深的吸引了我，感觉非常有趣。而python本身依赖比较多，这也促使我拿起之前的代码看了看，并且决定在github上重新建立这个项目叫做<a href="https://github.com/0cch/luadbg" target="_blank" rel="external">luadbg</a>，这次我决定长期维护这个项目，想到新的功能就往里面写，就像我一直维护的<a href="https://github.com/0cch/0cchext" target="_blank" rel="external">0cchext</a>一样。luadbg除了兼容了老dbglua的函数以外，还添加了几个我觉得很方便的类，主要是用重载.操作符的方式来访问模块和结构体的数据，效果如下图所示：</p>
<p><a href="/uploads/2016/11/20161116113129.png"><img src="/uploads/2016/11/20161116113129.png" alt="20161116113129"></a></p>
<p>当然，也可以用!luacmd命令进入input模式，从而一条一条的输入语句来测试正确性。</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[编译时自动增加build number]]></title>
      <url>/2016/10/18/auto-increase-build-number/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近和朋友讨论版本号常用的几种规范，前三位&lt;主版本&gt;.&lt;子版本&gt;.&lt;修正版本&gt;基本上一致，不需要详说。主要区别产生在最后一位，有的是build number，有的是时间日期，还有的是git或者svn的revision。我习惯用build number，每次编译都会增加版本号最后一位的数字。但是手动去修改明显不科学也不可靠，所以给和我有一样习惯的朋友分享一个我早年写的python脚本，无论是自己的工具还是公司的产品我一直都在用这个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用法就是在VS的工程属性Build Event -&gt; Pre Build Event里设置x:\incbuildnum.py $(ProjectDir)$(ProjectName).rc。</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"></div><div class="line"><span class="keyword">if</span> os.path.isfile(sys.argv[<span class="number">1</span>] + <span class="string">".bak"</span>):</div><div class="line">	os.remove(sys.argv[<span class="number">1</span>] + <span class="string">".bak"</span>)</div><div class="line">shutil.copy(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">1</span>] + <span class="string">".bak"</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">'r+'</span>) <span class="keyword">as</span> content_file:</div><div class="line">    content = content_file.read()</div><div class="line">    </div><div class="line">    </div><div class="line">    m = re.search(<span class="string">"VALUE \"FileVersion\", \"(([\\d]+).[ ]*)*([\\d]+)\""</span>, content)</div><div class="line">    new_ver = str(int(m.group(<span class="number">3</span>)) + <span class="number">1</span>)</div><div class="line">    content = re.sub(<span class="string">"(VALUE \"FileVersion\", \"([\\d]+.[ ]*)*)[\\d]+\""</span>, <span class="string">"\\g&lt;1&gt;"</span> + new_ver + <span class="string">"\""</span>, content)</div><div class="line"></div><div class="line">    m = re.search(<span class="string">"FILEVERSION (([\\d]+).[ ]*)*([\\d]+)"</span>, content)</div><div class="line">    new_ver = str(int(m.group(<span class="number">3</span>)) + <span class="number">1</span>)</div><div class="line">    content = re.sub(<span class="string">"(FILEVERSION ([\\d]+.[ ]*)*)([\\d]+)"</span>, <span class="string">"\\g&lt;1&gt;"</span> + new_ver, content)</div><div class="line"></div><div class="line">    m = re.search(<span class="string">"VALUE \"ProductVersion\", \"(([\\d]+).[ ]*)*([\\d]+)\""</span>, content)</div><div class="line">    new_ver = str(int(m.group(<span class="number">3</span>)) + <span class="number">1</span>)</div><div class="line">    content = re.sub(<span class="string">"(VALUE \"ProductVersion\", \"([\\d]+.[ ]*)*)[\\d]+\""</span>, <span class="string">"\\g&lt;1&gt;"</span> + new_ver + <span class="string">"\""</span>, content)</div><div class="line"></div><div class="line">    m = re.search(<span class="string">"PRODUCTVERSION (([\\d]+).[ ]*)*([\\d]+)"</span>, content)</div><div class="line">    new_ver = str(int(m.group(<span class="number">3</span>)) + <span class="number">1</span>)</div><div class="line">    content = re.sub(<span class="string">"(PRODUCTVERSION ([\\d]+.[ ]*)*)([\\d]+)"</span>, <span class="string">"\\g&lt;1&gt;"</span> + new_ver, content)</div><div class="line">    </div><div class="line">    content_file.seek(<span class="number">0</span>)</div><div class="line">    content_file.write(content)</div><div class="line">    content_file.truncate()</div><div class="line">    content_file.close()</div><div class="line">    </div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[验证文件签名]]></title>
      <url>/2016/09/21/verify-cert/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Sysinternal(<a href="http://forum.sysinternals.com/howto-verify-the-digital-signature-of-a-file_topic19247.html)上有关于验证签名的代码，不过代码有点问题，他只能验证PE签名，无法验证文件签名，所以我这里稍作了点修改，记录一下" target="_blank" rel="external">http://forum.sysinternals.com/howto-verify-the-digital-signature-of-a-file_topic19247.html)上有关于验证签名的代码，不过代码有点问题，他只能验证PE签名，无法验证文件签名，所以我这里稍作了点修改，记录一下</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODING (X509_ASN_ENCODING | PKCS_7_ASN_ENCODING)</span></div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">CheckFileTrust</span><span class="params">(LPCTSTR filename, CString &amp;signer_file)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	HCATADMIN cat_admin_handle = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">if</span> (!CryptCATAdminAcquireContext(&amp;cat_admin_handle, <span class="literal">NULL</span>, <span class="number">0</span>))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	HANDLE hFile = CreateFileW(filename, GENERIC_READ, FILE_SHARE_READ,</div><div class="line">		<span class="literal">NULL</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile)</div><div class="line">	&#123;</div><div class="line">		CryptCATAdminReleaseContext(cat_admin_handle, <span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	DWORD hash_count = <span class="number">100</span>;</div><div class="line">	BYTE hash_data[<span class="number">100</span>];</div><div class="line">	CryptCATAdminCalcHashFromFileHandle(hFile, &amp;hash_count, hash_data, <span class="number">0</span>);</div><div class="line">	CloseHandle(hFile);</div><div class="line"></div><div class="line">	LPWSTR member_tag = <span class="keyword">new</span> WCHAR[hash_count * <span class="number">2</span> + <span class="number">1</span>];</div><div class="line">	<span class="keyword">for</span> (DWORD dw = <span class="number">0</span>; dw &lt; hash_count; ++dw)</div><div class="line">	&#123;</div><div class="line">		wsprintfW(&amp;member_tag[dw * <span class="number">2</span>], <span class="string">L"%02X"</span>, hash_data[dw]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	WINTRUST_DATA wd = &#123; <span class="number">0</span> &#125;;</div><div class="line">	WINTRUST_FILE_INFO wfi = &#123; <span class="number">0</span> &#125;;</div><div class="line">	WINTRUST_CATALOG_INFO wci = &#123; <span class="number">0</span> &#125;;</div><div class="line">	CATALOG_INFO ci = &#123; <span class="number">0</span> &#125;;</div><div class="line">	HCATINFO cat_admin_info = CryptCATAdminEnumCatalogFromHash(cat_admin_handle,</div><div class="line">		hash_data, hash_count, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == cat_admin_info)</div><div class="line">	&#123;</div><div class="line">		wfi.cbStruct = <span class="keyword">sizeof</span>(WINTRUST_FILE_INFO);</div><div class="line">		wfi.pcwszFilePath = filename;</div><div class="line">		wfi.hFile = <span class="literal">NULL</span>;</div><div class="line">		wfi.pgKnownSubject = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">		wd.cbStruct = <span class="keyword">sizeof</span>(WINTRUST_DATA);</div><div class="line">		wd.dwUnionChoice = WTD_CHOICE_FILE;</div><div class="line">		wd.pFile = &amp;wfi;</div><div class="line">		wd.dwUIChoice = WTD_UI_NONE;</div><div class="line">		wd.fdwRevocationChecks = WTD_REVOKE_NONE;</div><div class="line">		wd.dwStateAction = WTD_STATEACTION_IGNORE;</div><div class="line">		wd.dwProvFlags = WTD_SAFER_FLAG;</div><div class="line">		wd.hWVTStateData = <span class="literal">NULL</span>;</div><div class="line">		wd.pwszURLReference = <span class="literal">NULL</span>;</div><div class="line">		signer_file = filename;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		CryptCATCatalogInfoFromContext(cat_admin_info, &amp;ci, <span class="number">0</span>);</div><div class="line">		wci.cbStruct = <span class="keyword">sizeof</span>(WINTRUST_CATALOG_INFO);</div><div class="line">		wci.pcwszCatalogFilePath = ci.wszCatalogFile;</div><div class="line">		wci.pcwszMemberFilePath = filename;</div><div class="line">		wci.pcwszMemberTag = member_tag;</div><div class="line">		wci.pbCalculatedFileHash = hash_data;</div><div class="line">		wci.cbCalculatedFileHash = hash_count;</div><div class="line"></div><div class="line">		wd.cbStruct = <span class="keyword">sizeof</span>(WINTRUST_DATA);</div><div class="line">		wd.dwUnionChoice = WTD_CHOICE_CATALOG;</div><div class="line">		wd.pCatalog = &amp;wci;</div><div class="line">		wd.dwUIChoice = WTD_UI_NONE;</div><div class="line">		wd.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;</div><div class="line">		wd.dwProvFlags = <span class="number">0</span>;</div><div class="line">		wd.hWVTStateData = <span class="literal">NULL</span>;</div><div class="line">		wd.pwszURLReference = <span class="literal">NULL</span>;</div><div class="line">		signer_file = ci.wszCatalogFile;</div><div class="line">	&#125;</div><div class="line">	GUID action = WINTRUST_ACTION_GENERIC_VERIFY_V2;</div><div class="line">	HRESULT hr = WinVerifyTrust(<span class="literal">NULL</span>, &amp;action, &amp;wd);</div><div class="line">	BOOL retval = SUCCEEDED(hr);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> != cat_admin_info) &#123;</div><div class="line">		CryptCATAdminReleaseCatalogContext(cat_admin_handle, cat_admin_info, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	CryptCATAdminReleaseContext(cat_admin_handle, <span class="number">0</span>);</div><div class="line">	<span class="keyword">delete</span>[] member_tag;</div><div class="line">	<span class="keyword">return</span> retval;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">GetCertificateInfo</span><span class="params">(PCCERT_CONTEXT cert_context, CString &amp;signer_name)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	LPTSTR name = <span class="literal">NULL</span>;</div><div class="line">	DWORD data;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!(data = CertGetNameString(cert_context,</div><div class="line">		CERT_NAME_SIMPLE_DISPLAY_TYPE,</div><div class="line">		<span class="number">0</span>,</div><div class="line">		<span class="literal">NULL</span>,</div><div class="line">		<span class="literal">NULL</span>,</div><div class="line">		<span class="number">0</span>))) &#123;</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Allocate memory for subject name.</span></div><div class="line">	name = (LPTSTR)LocalAlloc(LPTR, data * <span class="keyword">sizeof</span>(TCHAR));</div><div class="line">	<span class="keyword">if</span> (!name) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Get subject name.</span></div><div class="line">	<span class="keyword">if</span> (!(CertGetNameString(cert_context,</div><div class="line">		CERT_NAME_SIMPLE_DISPLAY_TYPE,</div><div class="line">		<span class="number">0</span>,</div><div class="line">		<span class="literal">NULL</span>,</div><div class="line">		name,</div><div class="line">		data))) &#123;</div><div class="line"></div><div class="line">			LocalFree(name);</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line">	signer_name = name;</div><div class="line">	LocalFree(name);</div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">GetFileSigner</span><span class="params">(LPCTSTR szFileName, CString &amp;signer_name)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	HCERTSTORE store_handle = <span class="literal">NULL</span>;</div><div class="line">	HCRYPTMSG msg_handle = <span class="literal">NULL</span>;</div><div class="line">	PCCERT_CONTEXT cert_context = <span class="literal">NULL</span>;</div><div class="line">	BOOL retval = FALSE;</div><div class="line">	DWORD encoding, content_type, format_type;</div><div class="line">	PCMSG_SIGNER_INFO signer_info = <span class="literal">NULL</span>;</div><div class="line">	DWORD signer_info_size;</div><div class="line">	CERT_INFO cert_info;</div><div class="line">	<span class="keyword">do</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// Get message handle and store handle from the signed file.</span></div><div class="line">		retval = CryptQueryObject(CERT_QUERY_OBJECT_FILE,</div><div class="line">			szFileName,</div><div class="line">			CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED,</div><div class="line">			CERT_QUERY_FORMAT_FLAG_BINARY,</div><div class="line">			<span class="number">0</span>,</div><div class="line">			&amp;encoding,</div><div class="line">			&amp;content_type,</div><div class="line">			&amp;format_type,</div><div class="line">			&amp;store_handle,</div><div class="line">			&amp;msg_handle,</div><div class="line">			<span class="literal">NULL</span>);</div><div class="line">		<span class="keyword">if</span> (!retval) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Get signer information size.</span></div><div class="line">		retval = CryptMsgGetParam(msg_handle,</div><div class="line">			CMSG_SIGNER_INFO_PARAM,</div><div class="line">			<span class="number">0</span>,</div><div class="line">			<span class="literal">NULL</span>,</div><div class="line">			&amp;signer_info_size);</div><div class="line">		<span class="keyword">if</span> (!retval) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Allocate memory for signer information.</span></div><div class="line">		signer_info = (PCMSG_SIGNER_INFO)LocalAlloc(LPTR, signer_info_size);</div><div class="line">		<span class="keyword">if</span> (!signer_info) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Get Signer Information.</span></div><div class="line">		retval = CryptMsgGetParam(msg_handle,</div><div class="line">			CMSG_SIGNER_INFO_PARAM,</div><div class="line">			<span class="number">0</span>,</div><div class="line">			(PVOID)signer_info,</div><div class="line">			&amp;signer_info_size);</div><div class="line">		<span class="keyword">if</span> (!retval) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">// Search for the signer certificate in the temporary </span></div><div class="line">		<span class="comment">// certificate store.</span></div><div class="line">		cert_info.Issuer = signer_info-&gt;Issuer;</div><div class="line">		cert_info.SerialNumber = signer_info-&gt;SerialNumber;</div><div class="line"></div><div class="line">		cert_context = CertFindCertificateInStore(store_handle,</div><div class="line">			ENCODING,</div><div class="line">			<span class="number">0</span>,</div><div class="line">			CERT_FIND_SUBJECT_CERT,</div><div class="line">			(PVOID)&amp;cert_info,</div><div class="line">			<span class="literal">NULL</span>);</div><div class="line">		<span class="keyword">if</span> (!cert_context) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		retval = GetCertificateInfo(cert_context, signer_name);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">while</span> (<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (signer_info != <span class="literal">NULL</span>) &#123; </div><div class="line">		LocalFree(signer_info); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (cert_context != <span class="literal">NULL</span>) &#123;</div><div class="line">		CertFreeCertificateContext(cert_context);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (store_handle != <span class="literal">NULL</span>) &#123;</div><div class="line">		CertCloseStore(store_handle, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (msg_handle != <span class="literal">NULL</span>) &#123;</div><div class="line">		CryptMsgClose(msg_handle);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> retval;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[在NTFS元文件目录里创建文件]]></title>
      <url>/2016/08/23/create-file-in-metadata/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>说到Rootkit就不能提到他的文件隐藏，Rootkit隐藏文件的方式千奇百怪，这里说其中一个通过NTFS元文件目录无法被普通程序显示的特性隐藏文件的方法。</p>
<p>我们都知道NTFS是有元文件的，比如$MFT(NTFS主文件表)，这种文件是我们看不到的，但是系统能访问。同样还有一种元文件目录，这个目录也是看不到的，无论你是否打开了显示系统文件，隐藏文件的选项。那么如果我们把要隐藏的文件放在这种目录下，那么就达到了隐藏的效果。</p>
<p>举个例子 $Extend\$RmMetadata 这个目录。我们可以通过Winhex解析NTFS来读取这个目录的情况，而普通程序不行。这里我们通过这样的代码来创建文件。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GPA(x) *(FARPROC *)&amp;My##x = GetProcAddress(GetModuleHandle(<span class="meta-string">L"ntdll.dll"</span>), #x)	</span></div><div class="line">	GPA(NtCreateFile);</div><div class="line">	GPA(RtlInitUnicodeString);</div><div class="line">	IO_STATUS_BLOCK iob;</div><div class="line">	HANDLE h;</div><div class="line">	UNICODE_STRING uni_str;</div><div class="line">	MyRtlInitUnicodeString(&amp;uni_str, <span class="string">L"\\??\\Global\\D:\\$Extend\\$RmMetadata\\$0cch"</span>);</div><div class="line"></div><div class="line">	OBJECT_ATTRIBUTES oa;</div><div class="line">	InitializeObjectAttributes(&amp;oa, &amp;uni_str, OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</div><div class="line"></div><div class="line">	LONG l = MyNtCreateFile(&amp;h, </div><div class="line">	FILE_APPEND_DATA | SYNCHRONIZE, </div><div class="line">	&amp;oa, </div><div class="line">	&amp;iob, </div><div class="line">	<span class="number">0</span>, </div><div class="line">	FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_SYSTEM, </div><div class="line">	<span class="number">0</span>, </div><div class="line">	FILE_SUPERSEDE, </div><div class="line">	FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE, </div><div class="line">	<span class="literal">NULL</span>, </div><div class="line">	<span class="number">0</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">char</span> buffer[] = <span class="string">"0123456789"</span>;</div><div class="line">	WriteFile(h, buffer, <span class="built_in">strlen</span>(buffer), (ULONG *)&amp;l, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	CloseHandle(h);</div></pre></td></tr></table></figure>
<p>值得注意的是我们必须用System用户权限去运行这个程序，才能创建文件到元文件目录，这里要用到psexec：</p>
<p>psexec  -s C:\0cch\Test.exe</p>
<p>然后我们看看效果</p>
<p><a href="/uploads/2016/08/20160824115523.png"><img src="/uploads/2016/08/20160824115523.png" alt="20160824115523"></a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Windows Timer精确度]]></title>
      <url>/2016/07/24/something-about-windows-timer-resolution/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Windows Timer相比大家都用过，WM_TIMER, WM_SYSTIMER, Waitable Timer, Multimedia Timer, Timer Queue Timer，这么多种Timer，给我们变成提供了很大的方便，有窗口无窗口都能自如选择。所以尽量也不要自己再造轮子，用什么Sleep来写Timer。这种“自定义”的Timer肯定是没有由系统内核DPC触发的Timer效率高的。</p>
<p>OK，回到正题，关于Timer的精确度。首先看看SysInternal工具集的clockres的显示：</p>
<p><a href="/uploads/2016/07/20160725102628.png"><img src="/uploads/2016/07/20160725102628.png" alt="20160725102628"></a></p>
<p>从图中可以看出，我这个系统的最大精确度15.6毫秒，最小是0.5毫秒，当前是15.6毫秒。默认情况下，Windows会用最大精确度，因为这样可以减少CPU的消耗，而且高精度的定时器，绝大多数程序都不会用到。基于15.6毫秒这个精度，那么我们设置Timer间隔为15.6毫秒以下都是没有意义的，这里再提一下，Sleep函数在内核也是用的定时器，也就是说这个精确度下，Sleep(10)也是没有意义的，间隔会达到15-16毫秒。</p>
<p>当然，我们有的时候也是需要高精度的定时器的，这个时候我们需要设置时间精度。timeBeginPeriod这个函数就可以完成这个任务，这个函数调用了ntdll的NtSetTimerResolution函数，我们也可以直接调用这个ntdll函数，只不过我们需要动态获得这个函数的地址罢了。值得注意的是，并不是你想设置什么精确度都可以，Windows内部实际上维护了一份可以设置的精度列表，他会选择一个和你设置相近的的精度设置上去，这个列表保存在Hal里面。</p>
<p>好了，再说下Windows时钟，Windows时钟更新时间总是用的最大精度，在我个系统上也就是每次更新时间都是间隔15.6毫秒。也就是说如果用GetTickCount来统计性能问题，最大精度也就是15-16毫秒。举个例子，一段代码运行时间不足15.6毫秒，要么统计结果是0，要么是15-16毫秒，时间精度不会影响Windows时钟更新。</p>
<p>最后说下Windows高精度时钟查询的实现，在2000和XP时代，系统用TSC来演算时间，但是那个时候，多核并不支持TSC同步，这回带来一些问题。Vista系统采用了High Precision Event Timer (HPET)或者ACPI Power Management Timer (PM timer)，但是这种Timer的延时比较高，当然，这个延时是百纳秒级别的，可以说基本上不会对普通程序有什么影响。之后的系统就使用了固定频率的TSC，这样在多核状态下也能保证同步，而且延时很低。更详细的资料可以参考：<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn553408(v=vs.85).aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/windows/desktop/dn553408(v=vs.85).aspx</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 10 任务管理器结束任务流程]]></title>
      <url>/2016/06/26/win10-taskmgr-killproc/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>从Win8开始，任务管理已经悄然发生变化了，这篇文章要说的就是结束任务这一个功能。以Win10的任务管理器为主来说明，没有了从窗口关闭进程的标签。取而代之的是一个区分前台和后台程序的进程树。通过这个界面结束进程也不再像以前一样调用User32的EndTask(<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633492(v=vs.85).aspx)，而是重新规划了一套逻辑。" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/windows/desktop/ms633492(v=vs.85).aspx)，而是重新规划了一套逻辑。</a></p>
<p>具体逻辑如下：  </p>
<blockquote>
<p>1.区分程序类型  </p>
<p>2.如果是窗口程序，则给窗口发送WM_SYSCOMMAND+SC_CLOSE结束窗口来结束进程  </p>
<p>3.如果是服务程序，则调用ControlService+SERVICE_CONTROL_STOP结束服务来结束进程  </p>
<p>4.如果既没有窗口也不是服务的程序，或者说在第2，3步没有结束成功的进程，会调用TerminateProcess来强行结束进程。  </p>
<p> 5.第五步是和之前结束任务最大的一个区别，以前的任务管理器，如果没能结束进程，例如一些僵尸进程，他就不会做其他动作了，而新的任务管理器为了释放这种进程所占用的内核资源，他还会做另外一些事情，那就是关闭目标进程的所有句柄。使用的方式就是DuplicateHandle+DUPLICATE_CLOSE_SOURCE。这样做的另外一个好处就是，如果顽固进程还在运行，句柄关闭会造成其崩溃而结束。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 8 Shell API对于长路径文件名的支持]]></title>
      <url>/2016/05/17/win8-shell-long-filename/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在Windows 8之前，Shell API对于长路径的文件名的支持并不理想。比如PathAppend这个函数，函数规定pszPath，也就是第一个参数，它的buffer大小必须要能够容纳MAX_PATH个字符。第二个参数pszMore也不能超过MAX_PATH的长度。这样的API不仅不能满足我们对长文件路径需求，同时也可能让我们的软件由于字符串检查不严格出现严重BUG和漏洞。</p>
<p>还好，这个问题在Windows 8以及以后的系统上得到了解决。还是以路径拼接为例。微软向我们介绍了PathCchAppend和PathCchAppendEx函数。其中PathCchAppend函数，增加了cchPath参数，用来指定输出buffer的大小。用这样的方式来加强参数的检查，增加了函数的安全性。而PathCchAppendEx这个函数在PathCchAppend基础上，又加入了dwFlags，现在这个标志只有PATHCCH_ALLOW_LONG_PATHS，意思就是让我们的路径名超过MAX_PATH。</p>
<p>不知道微软设计PathCchAppend和PathCchAppendEx这两个API的时候是怎么样的一个想法，我觉得完全没必要设计成两个函数，一个PathCchAppendEx就足够了。大家是不是也有这个疑问呢？</p>
<p>最后，由于Windows 7现在的使用量还是非常大的，我们也不能因为要使用这些新的API而放弃兼容老版本的Windows。比较合适的做法还是动态导入这些函数，如果成功了就可以使用新的函数，失败就用老的函数。另外值得注意的是，PathCchAppend这类新的函数并不是放在shlwapi.dll里面，而是在kernelbase.dll，动态获取函数的时候需要注意这一点。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[获取桌面图标位置]]></title>
      <url>/2016/04/12/get-desktop-icon-pos/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>用来干什么就不用说了，反正不是什么好事情 =v=</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DESKTOP_ICON_INFO</span> &#123;</span></div><div class="line">	LVITEMW item;</div><div class="line">	WCHAR item_text[MAX_PATH];</div><div class="line">	RECT rc;</div><div class="line">&#125; DESKTOP_ICON_INFO, *PDESKTOP_ICON_INFO;</div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">GetDesktopIconInfo</span><span class="params">(LPCWSTR pattern, RECT &amp;rc, HWND &amp;desktop)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	HWND progman = FindWindow(TEXT(<span class="string">"Progman"</span>), TEXT(<span class="string">"Program Manager"</span>));</div><div class="line">	<span class="keyword">if</span> (progman == <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">	HWND def_view = FindWindowEx(progman, <span class="literal">NULL</span>, TEXT(<span class="string">"SHELLDLL_DefView"</span>), <span class="literal">NULL</span>);</div><div class="line">	<span class="keyword">if</span> (def_view == <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	HWND list_view = FindWindowEx(def_view, <span class="literal">NULL</span>, TEXT(<span class="string">"SysListView32"</span>), TEXT(<span class="string">"FolderView"</span>));</div><div class="line">	<span class="keyword">if</span> (list_view == <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line">	desktop = list_view;</div><div class="line"></div><div class="line">	ULONG process_id = <span class="number">0</span>;</div><div class="line">	GetWindowThreadProcessId(progman, &amp;process_id);</div><div class="line">	<span class="keyword">if</span> (process_id == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> count = (<span class="keyword">int</span>)::SendMessage(list_view, LVM_GETITEMCOUNT, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">	HANDLE process_handle = OpenProcess(</div><div class="line">		PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_QUERY_INFORMATION, FALSE, process_id);</div><div class="line">	<span class="keyword">if</span> (process_handle == <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	PUCHAR remote_addr = (PUCHAR)VirtualAllocEx(process_handle, <span class="literal">NULL</span>, </div><div class="line">		<span class="keyword">sizeof</span>(DESKTOP_ICON_INFO), MEM_COMMIT, PAGE_READWRITE);</div><div class="line"></div><div class="line">	DESKTOP_ICON_INFO icon_info;</div><div class="line">	icon_info.item.iItem = <span class="number">0</span>;</div><div class="line">	icon_info.item.iSubItem = <span class="number">0</span>;</div><div class="line">	icon_info.item.mask = LVIF_TEXT;</div><div class="line">	icon_info.item.pszText = (WCHAR *)(remote_addr + offsetof(DESKTOP_ICON_INFO, item_text));</div><div class="line">	icon_info.item.cchTextMax = MAX_PATH;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">		icon_info.rc.left = LVIR_BOUNDS;</div><div class="line">		ZeroMemory(icon_info.item_text, <span class="keyword">sizeof</span>(icon_info.item_text));</div><div class="line">		<span class="keyword">if</span> (WriteProcessMemory(process_handle, remote_addr, &amp;icon_info, <span class="keyword">sizeof</span>(icon_info), <span class="literal">NULL</span>)) &#123;</div><div class="line">			 ::SendMessage(list_view, LVM_GETITEMTEXT, (WPARAM)i, (LPARAM)(remote_addr + offsetof(DESKTOP_ICON_INFO, item)));</div><div class="line">			 ::SendMessage(list_view, LVM_GETITEMRECT, (WPARAM)i, (LPARAM)(remote_addr + offsetof(DESKTOP_ICON_INFO, rc)));</div><div class="line">			 ReadProcessMemory(process_handle, remote_addr, &amp;icon_info, <span class="keyword">sizeof</span>(icon_info), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">			 <span class="keyword">if</span> (_wcsicmp(icon_info.item_text, pattern) == <span class="number">0</span>) &#123;</div><div class="line">				 rc = icon_info.rc;</div><div class="line">				 <span class="keyword">break</span>;</div><div class="line">			 &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	VirtualFreeEx(process_handle, remote_addr, <span class="number">0</span>, MEM_RELEASE);</div><div class="line">	CloseHandle(process_handle);</div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[查看消息窗口工具]]></title>
      <url>/2016/03/17/msg-wnd-view/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们都知道用Spy++去查看窗口句柄的相关信息，但是这款工具无法找到消息窗口(Message-Only Windows)。所以写了个查看消息窗口的工具，帮我排查一些这方面的问题。</p>
<p><a href="/uploads/2016/03/20160317120246.png"><img src="/uploads/2016/03/20160317120246.png" alt="20160317120246"></a></p>
<p>下载：<a href="/uploads/2016/03/MsgOnlyWnd.zip">MsgOnlyWnd</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[c06d007f异常的解决方法]]></title>
      <url>/2016/02/23/delay-load-error/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>c06d007f这个异常通常是在PE的延迟加载dll的时候发生的，加载器找不到对应的dll就会抛出这个异常。如果我们对这个异常不熟悉，按照常规方式去找上下文，那么结果肯定会让你失望。例如3.2526.1373.0版本的libcef在XP上运行的情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; kb</div><div class="line"> # ChildEBP RetAddr  Args to Child              </div><div class="line">00 0012f218 7c92d9ac 7c86449d d0000144 00000004 ntdll!KiFastSystemCallRet</div><div class="line">01 0012f21c 7c86449d d0000144 00000004 00000000 ntdll!ZwRaiseHardError+0xc</div><div class="line">02 0012f4a0 7c843892 0012f4c8 7c839b21 0012f4d0 kernel32!UnhandledExceptionFilter+0x628</div><div class="line">03 0012f4a8 7c839b21 0012f4d0 00000000 0012f4d0 kernel32!BaseProcessStart+0x39</div><div class="line">04 0012f4d0 7c9232a8 0012f5bc 0012ffe0 0012f5d4 kernel32!_except_handler3+0x61</div><div class="line">05 0012f4f4 7c92327a 0012f5bc 0012ffe0 0012f5d4 ntdll!ExecuteHandler2+0x26</div><div class="line">06 0012f5a4 7c92e46a 00000000 0012f5d4 0012f5bc ntdll!ExecuteHandler+0x24</div><div class="line">07 0012f5a4 00000000 00000000 0012f5d4 0012f5bc ntdll!KiUserExceptionDispatcher+0xe</div><div class="line">WARNING: Frame IP not in any known module. Following frames may be wrong.</div><div class="line">08 0012fff4 004a991e 00000000 78746341 00000020 0x0</div><div class="line">09 0012fff8 00000000 78746341 00000020 00000001 cefclient!pre_c_init+0xb9 [f:\dd\vctools\crt_bld\self_x86\crt\src\crtexe.c @ 261]</div><div class="line"></div><div class="line">0:000&gt; .cxr 0012f5d4;k</div><div class="line">eax=0012f8a4 ebx=1314a58c ecx=00000000 edx=00000001 esi=0012f954 edi=68d60000</div><div class="line">eip=00000000 esp=0012fff8 ebp=00000000 iopl=0         nv up ei pl nz na po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</div><div class="line">00000000 ??              ???</div><div class="line">  *** Stack trace for last set context - .thread/.cxr resets it</div><div class="line"> # ChildEBP RetAddr  </div><div class="line">WARNING: Frame IP not in any known module. Following frames may be wrong.</div><div class="line">00 0012fff4 004a991e 0x0</div><div class="line">01 0012fff8 00000000 cefclient!pre_c_init+0xb9 [f:\dd\vctools\crt_bld\self_x86\crt\src\crtexe.c @ 261]</div><div class="line"></div></pre></td></tr></table></figure>
<p>直接看栈回溯或者通过设置cxr看栈回溯，并没有帮助我们找到什么有用的信息。</p>
<p>这里要使用的方法是，利用异常的参数来找到具体延迟加载谁的时候发生了异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; .exr 0012f5bc </div><div class="line">ExceptionAddress: 7c812aeb (kernel32!RaiseException+0x00000053)</div><div class="line">   ExceptionCode: c06d007f</div><div class="line">  ExceptionFlags: 00000000</div><div class="line">NumberParameters: 1</div><div class="line">   Parameter[0]: 0012f918</div><div class="line">   </div></pre></td></tr></table></figure>
<p>这里的参数0，就是我们要找的目标，记录了出错时候ebp-0x30的数据，也就是含有关键信息的地方。让我们仔细看看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; dds 0012f918</div><div class="line">0012f918  00000024</div><div class="line">0012f91c  1314a58c libcef!_DELAY_IMPORT_DESCRIPTOR_dbghelp_dll</div><div class="line">0012f920  13181dbc libcef!_imp__SymGetSearchPathW</div><div class="line">0012f924  12ebdd20 libcef!_sz_dbghelp_dll</div><div class="line">0012f928  00000001</div><div class="line">0012f92c  1314ac8e libcef!dxva2_NULL_THUNK_DATA_DLN+0x7e</div><div class="line">0012f930  68d60000 dbghelp!_imp__CryptAcquireContextA &lt;PERF&gt; (dbghelp+0x0)</div><div class="line">0012f934  00000000</div><div class="line">0012f938  0000007f</div><div class="line">0012f93c  1314c138 libcef!dxva2_NULL_THUNK_DATA_DLN+0x1528</div><div class="line">0012f940  00000003</div><div class="line">0012f944  00000000</div><div class="line">0012f948  0012f9f8</div><div class="line">0012f94c  11d17587 libcef!_tailMerge_dbghelp_dll+0xd</div><div class="line">0012f950  0012f918</div><div class="line">0012f954  13181dbc libcef!_imp__SymGetSearchPathW</div><div class="line">0012f958  00000008</div><div class="line">0012f95c  7c9301bb ntdll!RtlAllocateHeap+0xeac</div><div class="line">0012f960  1019014e libcef!base::debug::`anonymous namespace&apos;::InitializeSymbols+0x9e [f:\stnts\browser\cef\ws\src\chromium\src\base\debug\stack_trace_win.cc @ 79]</div><div class="line">0012f964  ffffffff</div><div class="line">0012f968  00170880</div><div class="line"></div></pre></td></tr></table></figure>
<p>我们可以清楚的看到加载器延迟加载SymGetSearchPathW的时候发生了问题。让我们进一步用depends工具验证一下</p>
<p><a href="/uploads/2016/02/20160223003624.png"><img src="/uploads/2016/02/20160223003624.png" alt="20160223003624"></a></p>
<p>如上图所示，XP自带的dbghelp里没有SymGetSearchPathW这个导出函数。要解决这个异常，实际上就需要在运行目录里添加一个稍微新一点的dbghelp文件，我这里替换的是6.2.9200.16384的dbghelp，替换过后问题已经不再出现了。</p>
<p><a href="/uploads/2016/02/20160223003711.png"><img src="/uploads/2016/02/20160223003711.png" alt="20160223003711"></a></p>
]]></content>
      
        <categories>
            
            <category> debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[调试器最早的中断应用程序的方法]]></title>
      <url>/2016/02/02/app-cpr-event/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这篇Blog分享一个Windbg的小技巧，就是让被调试程序更早的中断到调试器。熟悉Windbg的朋友都知道，用调试器运行程序，默认情况下都会中断到ntdll!LdrpDoDebuggerBreak。但是有时候我们会想去调试程序加载的过程，这个时候就需要我们更早的中断下来。那么这里就用利用到调试器最早接受到的调试事件了。CREATE_PROCESS_DEBUG_EVENT，这个调试事件是创建进程的时候进程发给调试器的，在这个时候，你甚至连ntdll都没有完成加载，这也导致ntdll的符号无法加载，很多有用的功能用不上。但幸运的是，虽然ntdll没有完成加载，但是已经加载到了内存，另外我们可以用手动加载符号的方法，把符号文件加载到ntdll的内存上去。</p>
<p>演示如下：</p>
<p>windbg.EXE -xe cpr -xe ld notepad.exe</p>
<p>这里设置中断系统事件cpr，也就是CREATE_PROCESS_DEBUG_EVENT</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; lm</div><div class="line">start             end                 module name</div><div class="line">00007ff7`3f6e0000 00007ff7`3f721000   notepad    (deferred)             </div><div class="line">0:000&gt; !teb</div><div class="line">TEB at 000000d995d21000</div><div class="line">error InitTypeRead( TEB )...</div><div class="line"></div></pre></td></tr></table></figure>
<p>中断下来后我们可以看到，!teb是没法用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; .imgscan</div><div class="line">MZ at 00007ff7`3f6e0000, prot 00000002, type 01000000 - size 41000</div><div class="line">  Name: notepad.exe</div><div class="line">MZ at 00007ffb`7c7b0000, prot 00000002, type 01000000 - size 1c1000</div><div class="line">  Name: ntdll.dll</div><div class="line">0:000&gt; .reload /f ntdll.dll=00007ffb`7c7b0000</div><div class="line"></div></pre></td></tr></table></figure>
<p>我们需要找到ntdll的模块，然后手动加载符号，然后就可以使用和ntdll有关系的命令了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; lm</div><div class="line">start             end                 module name</div><div class="line">00007ff7`3f6e0000 00007ff7`3f721000   notepad    (deferred)             </div><div class="line">00007ffb`7c7b0000 00007ffb`7c971000   ntdll      (pdb symbols)          e:\workspace\mysymbols\ntdll.pdb\F296699DB5314A06935E88564D8CD2731\ntdll.pdb</div><div class="line"></div><div class="line">0:000&gt; !teb</div><div class="line">TEB at 000000d995d21000</div><div class="line">    ExceptionList:        0000000000000000</div><div class="line">    StackBase:            000000d995af0000</div><div class="line">    StackLimit:           000000d995adf000</div><div class="line">    SubSystemTib:         0000000000000000</div><div class="line">    FiberData:            0000000000001e00</div><div class="line">    ArbitraryUserPointer: 0000000000000000</div><div class="line">    Self:                 000000d995d21000</div><div class="line">    EnvironmentPointer:   0000000000000000</div><div class="line">    ClientId:             0000000000001c8c . 00000000000017c4</div><div class="line">    RpcHandle:            0000000000000000</div><div class="line">    Tls Storage:          0000000000000000</div><div class="line">    PEB Address:          000000d995d20000</div><div class="line">    LastErrorValue:       0</div><div class="line">    LastStatusValue:      0</div><div class="line">    Count Owned Locks:    0</div><div class="line">    HardErrorMode:        0</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[总结和展望：转折的一年]]></title>
      <url>/2016/01/11/2016-zjzw/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>过去的2015年应该是我工作和生活中的一个大转折。</p>
<p>这一年里，我选择从北京回到了武汉。这件事情上还是需要一些魄力的，最主要的就是收入拦腰截断，剩下原来的二分之一。其次发展空间上也不能和帝都相提并论。就拿接到猎头电话这件事情上说，回来大半年里，猎头电话一个接一个，但是绝大部分都是北京打来的。不过，在家乡有父母，有亲戚，有未婚妻，这种“交换”也是值得的，毕竟我不能期待什么都能得到。回来后，健身依然在坚持，只不过没有跑步机，还是觉得缺少了很多东西。自己的兴趣方面，MiniKernel，编译器和虚拟机依旧没什么进展，有一种写不动了的感觉，有进展的依旧是小工具合集，有些工具增加了一些新的功能，比如everything_study就优化了算法，现在查找速度已经和everthing看不出区别了。今年最美好的事情就是求婚，最悲催的事情就是学车。求婚对每个人来说想必都是最美好的事情，这个自然不必多说。至于学车，也是找了个不靠谱的驾校，被坑的不轻。幸运的是自己对车接受的比较快，没被教练坑的太惨，科目一到科目三都是满分通过，现在就剩下科目四了，春节前就把驾照给拿了。另外IXWebhosting这个主机我也不准备用了，换成GitHub Page来当blog，过段时间把0CCh.net这个域名也转移的godaddy算了。</p>
<p>新的2016将会是一个真正新的开始！我将在这一年组建自己的小家，要买车，要装修房子。工作上希望武汉的互联网大环境会更好，希望我的劳动能给公司带来更高的价值。健身方面，我打算在新家里买上一个跑步机，过时如同北京时那样的健康生活。另外，练字也应该继续。兴趣方面，小工具集可以继续壮大，MiniKernel，编译器和虚拟机中，我更倾向多花时间写写编译器。</p>
<p>另外，好友初步完成了自己的梦想，去美国工作了。很羡慕，祝福他能扎根那边，别回来吸雾霾了=v=。</p>
<p>最后，还是祝愿家人，朋友，在新的2016健健康康，平平安安，开开心心，财源广进！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[C++异常的参数分析(0xE06D7363)]]></title>
      <url>/2015/12/06/cpp-exception-params/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Visual C++ 的编译器用0xE06D7363表示C++异常。 0xE06D7363表示的意思就是.msc。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:025&gt; .formats 0xE06D7363</div><div class="line">Evaluate expression:</div><div class="line">  Hex:     e06d7363</div><div class="line">  Decimal: -529697949</div><div class="line">  Octal:   34033271543</div><div class="line">  Binary:  11100000 01101101 01110011 01100011</div><div class="line">  Chars:   .msc</div><div class="line">  Time:    ***** Invalid</div><div class="line">  Float:   low -6.84405e+019 high 0</div><div class="line">  Double:  1.86029e-314</div><div class="line">  </div></pre></td></tr></table></figure>
<p>抛出异常代码的同时，还会带有三个到四个参数：<br>参数0是一个magic code，一般为0x19930520，我们不用管他<br>参数1是时异常抛出的对象指针<br>参数2是抛出异常的基本信息<br>参数3是抛出异常的模块基址(只有64位的程序才会有这个参数)，该基址加上异常信息的偏移才能获得信息的真正内存地址。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:025&gt; .exr -1</div><div class="line">ExceptionAddress: 75c8c41f (KERNELBASE!RaiseException+0x00000058)</div><div class="line">   ExceptionCode: e06d7363 (C++ EH exception)</div><div class="line">  ExceptionFlags: 00000001</div><div class="line">NumberParameters: 3</div><div class="line">   Parameter[0]: 19930520</div><div class="line">   Parameter[1]: 09c9f324</div><div class="line">   Parameter[2]: 6b5d0298</div><div class="line">   </div></pre></td></tr></table></figure>
<p>6b5d0298就是我们想要取得的信息，信息存储的格式为_s__ThrowInfo。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:025&gt; dt 6b5d0298 ole32!_s__ThrowInfo</div><div class="line">   +0x000 attributes       : 0</div><div class="line">   +0x004 pmfnUnwind       : 0x6b523b50     void  +0</div><div class="line">   +0x008 pForwardCompat   : (null) </div><div class="line">   +0x00c pCatchableTypeArray : 0x6b5d028c _s__CatchableTypeArray</div><div class="line">   </div></pre></td></tr></table></figure>
<p>然后可以取得pCatchableTypeArray，我们可以从中获取抛出异常的类型信息。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:025&gt; dt 0x6b5d028c ole32!_s__CatchableTypeArray -r1</div><div class="line">   +0x000 nCatchableTypes  : 0n2</div><div class="line">   +0x004 arrayOfCatchableTypes : [0] 0x6b5d0270 _s__CatchableType</div><div class="line">      +0x000 properties       : 0</div><div class="line">      +0x004 pType            : 0x6b5e58f0 _TypeDescriptor</div><div class="line">      +0x008 thisDisplacement : _PMD</div><div class="line">      +0x014 sizeOrOffset     : 0n48</div><div class="line">      +0x018 copyFunction     : 0x6b523cc0        void  +0</div><div class="line">	  </div></pre></td></tr></table></figure>
<p>到这里我们就取得了类型的描述结构体了，最后就能从中获取抛出的异常类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:025&gt; dt 0x6b5e58f0 ole32!_TypeDescriptor</div><div class="line">   +0x000 pVFTable         : 0x6b5c36e8 Void</div><div class="line">   +0x004 spare            : (null) </div><div class="line">   +0x008 name             : [0]  &quot;.?AVinterprocess_exception@interprocess@boost@@&quot;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[gotcha sdk 全盘文件名搜索开发库]]></title>
      <url>/2015/11/24/gotcha-sdk/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>想必大家都知道著名的全盘搜索工具everything，它极速的搜索速度让人眼前一亮。虽然everything提供了SDK，但是SDK是通过IPC的方式，获得everything程序里的数据。也就是说想在自己的程序中使用搜索功能那么必须带everything的主程序，这就是我开发gotcha sdk的主要原因，他能集成到程序当中，不需要依赖其他主程序，只需要你的程序是管理员权限运行，因为这样才能直接访问磁盘数据。另外网上也有一些关于everything原理和实现的代码，但是大部分都有问题，比如崩溃，死锁，内存占用过高等，并不适合直接用到产品当中。而gotcha sdk在自己开发了everything_study，并且使用了相当长的时间，解决性能，内存占用，死锁等问题的基础上提炼出来的开发库，我对其稳定性还是比较有信心的。</p>
<p>利用gotcha sdk，既可以开发出everything_study这样用C++写的程序，也能够开发出如gotcha sdk的sample里的gotcha，一个C#编写的全盘搜索程序，该程序也展示了gotcha sdk的用法。</p>
<p>gotcha sdk的用法非常简单，详细情况可以参考sample里的simple例子，该例子展示了sdk最简单的使用方式，我下一篇blog会介绍这套sdk的用法。</p>
<p><a href="/uploads/2015/11/20151124233627.png"><img src="/uploads/2015/11/20151124233627.png" alt="20151124233627"></a></p>
<p>gotcha sdk 代码SVN:<br><a href="http://code.taobao.org/svn/gotcha_sdk/" target="_blank" rel="external">http://code.taobao.org/svn/gotcha_sdk/</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[程序初始化失败DUMP分析]]></title>
      <url>/2015/11/01/app-startup-fail-dump/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>拿到程序初始化失败的DUMP，一般情况下我们看到的栈是这个样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; kb</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">0012fc7c 7c92d9ca 7c972b53 c0000145 00000001 ntdll!KiFastSystemCallRet</div><div class="line">0012fc80 7c972b53 c0000145 00000001 00000000 ntdll!NtRaiseHardError+0xc</div><div class="line">0012fca4 7c960f9f c0000005 0012fd30 00370034 ntdll!LdrpInitializationFailure+0x2d</div><div class="line">0012fd1c 7c92e457 0012fd30 7c920000 00000000 ntdll!_LdrpInitialize+0x1f9</div><div class="line">00000000 00000000 00000000 00000000 00000000 ntdll!KiUserApcDispatcher+0x7</div><div class="line"></div><div class="line">0:000&gt; !error c0000145</div><div class="line">Error code: (NTSTATUS) 0xc0000145 (3221225797) - &#123;Application Error&#125;  The application was unable to start correctly (0x%lx). Click OK to close the application.</div><div class="line"></div><div class="line">0:000&gt; !error c0000005</div><div class="line">Error code: (NTSTATUS) 0xc0000005 (3221225477) - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.</div><div class="line"></div></pre></td></tr></table></figure>
<p>可以看到最后报错是c0000145，应用程序无法运行。而引起出错的是LdrpInitializationFailure，出错原因内存访问异常。但是具体是哪出错还不无法从此刻的栈看到，我们需要进一步分析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; dds esp-1000 esp</div><div class="line">...</div><div class="line">0012f3c0  7c92e920 ntdll!_except_handler3</div><div class="line">0012f3c4  00000001</div><div class="line">0012f3c8  0012f470</div><div class="line">0012f3cc  0012fd0c</div><div class="line">0012f3d0  7c953fdc ntdll!RtlDispatchException+0xb1</div><div class="line">0012f3d4  0012f470</div><div class="line">0012f3d8  0012fd0c</div><div class="line">0012f3dc  0012f48c</div><div class="line">0012f3e0  0012f444</div><div class="line">0012f3e4  7c92e920 ntdll!_except_handler3</div><div class="line">0012f3e8  003d3810 someapp!PostMsg+0x27aa0</div><div class="line">0012f3ec  0012f470</div><div class="line">0012f3f0  b36caf32</div><div class="line">0012f3f4  00153960</div><div class="line">0012f3f8  7c93e584 ntdll!DbgPrint+0x1c</div><div class="line">0012f3fc  00150178</div><div class="line">0012f400  000000e8</div><div class="line">0012f404  00000668</div><div class="line">0012f408  00150000</div><div class="line">0012f40c  0012f204</div><div class="line">0012f410  7c940571 ntdll!RtlCreateActivationContext+0x2c</div><div class="line">0012f414  c0000000</div><div class="line">0012f418  00153960</div><div class="line">0012f41c  003f0000</div><div class="line">0012f420  00000000</div><div class="line">0012f424  0012f444</div><div class="line">0012f428  7c940610 ntdll!RtlCreateActivationContext+0xed</div><div class="line">0012f42c  001539b4</div><div class="line">0012f430  00000002</div><div class="line">0012f434  00000008</div><div class="line">0012f438  00000000</div><div class="line">0012f43c  00000000</div><div class="line">0012f440  00000000</div><div class="line">0012f444  0012f750</div><div class="line">0012f448  7c814880 kernel32!CreateActCtxW+0x75c</div><div class="line">0012f44c  00130000</div><div class="line">0012f450  0012d000</div><div class="line">0012f454  00000000</div><div class="line">0012f458  0012f76c</div><div class="line">0012f45c  7c92e48a ntdll!KiUserExceptionDispatcher+0xe</div><div class="line">0012f460  00000000</div><div class="line">0012f464  0012f48c</div><div class="line">0012f468  0012f470</div><div class="line">0012f46c  0012f48c</div><div class="line">0012f470  c0000005</div><div class="line">0012f474  00000000</div><div class="line">0012f478  00000000</div><div class="line">0012f47c  7c93ccf2 ntdll!LdrpHandleOneOldFormatImportDescriptor+0x21</div><div class="line">0012f480  00000002</div><div class="line">0012f484  00000000</div><div class="line">0012f488  d16cca32</div><div class="line">0012f48c  0001003f</div><div class="line">...</div><div class="line"></div></pre></td></tr></table></figure>
<p>这里我们就可以看到异常发生的栈了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; .exr 0012f470</div><div class="line">ExceptionAddress: 7c93ccf2 (ntdll!LdrpHandleOneOldFormatImportDescriptor+0x00000021)</div><div class="line">   ExceptionCode: c0000005 (Access violation)</div><div class="line">  ExceptionFlags: 00000000</div><div class="line">NumberParameters: 2</div><div class="line">   Parameter[0]: 00000000</div><div class="line">   Parameter[1]: d16cca32</div><div class="line">Attempt to read from address d16cca32</div><div class="line"></div><div class="line">0:000&gt; .cxr 0012f48c</div><div class="line">eax=003a0000 ebx=00253010 ecx=d132ca32 edx=00033810 esi=b36caf32 edi=003d3810</div><div class="line">eip=7c93ccf2 esp=0012f758 ebp=0012f76c iopl=0         nv up ei ng nz na po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010282</div><div class="line">ntdll!LdrpHandleOneOldFormatImportDescriptor+0x21:</div><div class="line">7c93ccf2 833c0800        cmp     dword ptr [eax+ecx],0 ds:0023:d16cca32=????????</div><div class="line">0:000&gt; kb</div><div class="line">  *** Stack trace for last set context - .thread/.cxr resets it</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">0012f76c 7c93ccc4 7ffd9000 00020498 00253010 ntdll!LdrpHandleOneOldFormatImportDescriptor+0x21</div><div class="line">0012f784 7c93bc1e 7ffd9000 00020498 00253010 ntdll!LdrpHandleOldFormatImportDescriptors+0x1f</div><div class="line">0012f800 7c93d216 00020498 00253010 00434398 ntdll!LdrpWalkImportDescriptor+0x19e</div><div class="line">0012fa50 7c93cd1d 00020498 004396ca 00400000 ntdll!LdrpLoadImportModule+0x1c8</div><div class="line">0012fa80 7c93ccc4 7ffd9000 00020498 00251ec0 ntdll!LdrpHandleOneOldFormatImportDescriptor+0x5e</div><div class="line">0012fa98 7c93bc1e 7ffd9000 00020498 00251ec0 ntdll!LdrpHandleOldFormatImportDescriptors+0x1f</div><div class="line">0012fb14 7c9418b5 00020498 00251ec0 7ffdf000 ntdll!LdrpWalkImportDescriptor+0x19e</div><div class="line">0012fc94 00000000 0012fca0 00000000 0012fd1c ntdll!LdrpInitializeProcess+0xe02</div><div class="line"></div><div class="line">0:000&gt; dt ntdll!_LDR_DATA_TABLE_ENTRY 00253010 </div><div class="line">   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x251e9c - 0x252ee0 ]</div><div class="line">   +0x008 InMemoryOrderLinks : _LIST_ENTRY [ 0x251ea4 - 0x252ee8 ]</div><div class="line">   +0x010 InInitializationOrderLinks : _LIST_ENTRY [ 0x0 - 0x0 ]</div><div class="line">   +0x018 DllBase          : 0x003a0000 Void</div><div class="line">   +0x01c EntryPoint       : 0x003c1ae4 Void</div><div class="line">   +0x020 SizeOfImage      : 0x43000</div><div class="line">   +0x024 FullDllName      : _UNICODE_STRING &quot;C:\Program Files\S-dir\Some-dir\someapp.dll&quot;</div><div class="line">   +0x02c BaseDllName      : _UNICODE_STRING &quot;someapp.dll&quot;</div><div class="line">   +0x034 Flags            : 0x200006</div><div class="line">   +0x038 LoadCount        : 0</div><div class="line">   +0x03a TlsIndex         : 0</div><div class="line">   +0x03c HashLinks        : _LIST_ENTRY [ 0x7c99e2f0 - 0x252a5c ]</div><div class="line">   +0x03c SectionPointer   : 0x7c99e2f0 Void</div><div class="line">   +0x040 CheckSum         : 0x252a5c</div><div class="line">   +0x044 TimeDateStamp    : 0x5618c3dc</div><div class="line">   +0x044 LoadedImports    : 0x5618c3dc Void</div><div class="line">   +0x048 EntryPointActivationContext : 0x00153960 Void</div><div class="line">   +0x04c PatchInformation : (null) </div><div class="line">   </div></pre></td></tr></table></figure>
<p>可以看到正在加载someapp.dll，并且处理导入表的时候出了错。来看看这个模块的导入表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:000&gt; !dh someapp -f</div><div class="line"></div><div class="line">File Type: DLL</div><div class="line">FILE HEADER VALUES</div><div class="line">     14C machine (i386)</div><div class="line">       6 number of sections</div><div class="line">5618C3DC time date stamp Sat Oct 10 15:53:00 2015</div><div class="line"></div><div class="line">       0 file pointer to symbol table</div><div class="line">       0 number of symbols</div><div class="line">      E0 size of optional header</div><div class="line">    2102 characteristics</div><div class="line">            Executable</div><div class="line">            32 bit word machine</div><div class="line">            DLL</div><div class="line"></div><div class="line">OPTIONAL HEADER VALUES</div><div class="line">     10B magic #</div><div class="line">   10.00 linker version</div><div class="line">   27A00 size of code</div><div class="line">   15C00 size of initialized data</div><div class="line">       0 size of uninitialized data</div><div class="line">   21AE4 address of entry point</div><div class="line">    1000 base of code</div><div class="line">         ----- new -----</div><div class="line">10000000 image base</div><div class="line">    1000 section alignment</div><div class="line">     200 file alignment</div><div class="line">       2 subsystem (Windows GUI)</div><div class="line">    5.01 operating system version</div><div class="line">    0.00 image version</div><div class="line">    5.01 subsystem version</div><div class="line">   43000 size of image</div><div class="line">     400 size of headers</div><div class="line">   4943E checksum</div><div class="line">00100000 size of stack reserve</div><div class="line">00001000 size of stack commit</div><div class="line">00100000 size of heap reserve</div><div class="line">00001000 size of heap commit</div><div class="line">     140  DLL characteristics</div><div class="line">            Dynamic base</div><div class="line">            NX compatible</div><div class="line">   34BE0 [     1E0] address [size] of Export Directory</div><div class="line">   33810 [      B4] address [size] of Import Directory</div><div class="line">   3A000 [     4CC] address [size] of Resource Directory</div><div class="line">       0 [       0] address [size] of Exception Directory</div><div class="line">       0 [       0] address [size] of Security Directory</div><div class="line">   3B000 [    3954] address [size] of Base Relocation Directory</div><div class="line">   29340 [      1C] address [size] of Debug Directory</div><div class="line">       0 [       0] address [size] of Description Directory</div><div class="line">       0 [       0] address [size] of Special Directory</div><div class="line">   2DD80 [      18] address [size] of Thread Storage Directory</div><div class="line">   2DD38 [      40] address [size] of Load Configuration Directory</div><div class="line">       0 [       0] address [size] of Bound Import Directory</div><div class="line">   29000 [     2CC] address [size] of Import Address Table Directory</div><div class="line">       0 [       0] address [size] of Delay Import Directory</div><div class="line">       0 [       0] address [size] of COR20 Header Directory</div><div class="line">       0 [       0] address [size] of Reserved Directory</div><div class="line"></div><div class="line">0:000&gt; dc someapp+33810 someapp+33810+B4</div><div class="line">003d3810  60325c32 68326432 90326c32 b332af32  2\2`2d2h2l2.2.2.</div><div class="line">003d3820  d132ca32 df32db32 0032fc32 30332033  2.2.2.2.2.2.3 30</div><div class="line">003d3830  40333833 4c334833 54335033 5c335833  383@3H3L3P3T3X3\</div><div class="line">003d3840  64336033 6c336833 74337033 7c337833  3`3d3h3l3p3t3x3|</div><div class="line">003d3850  84338033 8c338833 94339033 ce33b433  3.3.3.3.3.3.3.3.</div><div class="line">003d3860  e933d233 f733f333 b134a633 0434e134  3.3.3.3.3.4.4.4.</div><div class="line">003d3870  44353935 94357135 d435c935 57361a35  595D5q5.5.5.5.6W</div><div class="line">003d3880  be366736 0c36d036 4b374037 b3377b37  6g6.6.6.7@7K7&#123;7.</div><div class="line">003d3890  ea37cf37 45380e37 81385e38 a0388a38  7.7.7.8E8^8.8.8.</div><div class="line">003d38a0  fb38d338 4b392438 a4399939 0039dd39  8.8.8$9K9.9.9.9.</div><div class="line">003d38b0  403a353a c33a863a 2a3ad33a 6b3b3c3b  :5:@:.:.:.:*;&lt;;k</div><div class="line">003d38c0  cf3b933b 1d3bea3b                    ;.;.;.;.</div><div class="line"></div></pre></td></tr></table></figure>
<p>所以这样就清楚了，someapp.dll的输入表被破坏了，导致加载他的程序无法运行起来。</p>
]]></content>
      
        <categories>
            
            <category> debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windbg插件0cchext]]></title>
      <url>/2015/10/05/0cchext/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://github.com/0cch/0cchext" target="_blank" rel="external">0cchext.dll</a>是我一直在开发和维护的一个Windbg扩展程序。扩展程序中包含了一些或者有趣，或者实用，或者纯个人偏好的功能。这篇文章就来介绍一些主要的功能：</p>
<hr>
<h4 id="a"><a href="#a" class="headerlink" title="!a"></a>!a</h4><blockquote>
<p> !a               - Assembles instruction mnemonics and puts the resulting<br>                     instruction codes into memory.</p>
</blockquote>
<p>  这个指令是写入汇编代码的扩展，虽然Windbg有自己的汇编命令a，但是这个命令无法配合脚本使用。你一旦输入命令a，Windbg就会进入汇编模式，此时你就无法让脚本继续进行了。所以我开发了!a，这个命令只会对一条命令进行汇编，并且将下一条汇编的地址存储在@#LastAsmAddr中，然后马上执行下面的命令，对脚本而已再好不过了。<br>例如下面这个脚本，他可以注入dll到debuggee<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ad /q $&#123;/v:alloc_addr&#125;</div><div class="line">ad /q $&#123;/v:@#LastAsmAddr&#125;</div><div class="line">x kernel32!LoadlibraryA</div><div class="line">.foreach /pS 5 (alloc_addr &#123;.dvalloc 0x200&#125;) &#123;r $.u0 = alloc_addr&#125;</div><div class="line">.block &#123;aS $&#123;/v:@#LastAsmAddr&#125; 0; !a $u0 pushfd&#125;;</div><div class="line">.block &#123;!a $&#123;@#LastAsmAddr&#125; pushad&#125;</div><div class="line">.block &#123;!a $&#123;@#LastAsmAddr&#125; push 0x$u0+0x100&#125;</div><div class="line">.block &#123;!a $&#123;@#LastAsmAddr&#125; call kernel32!LoadLibraryA&#125;</div><div class="line">.block &#123;!a $&#123;@#LastAsmAddr&#125; popad&#125;</div><div class="line">.block &#123;!a $&#123;@#LastAsmAddr&#125; popfd&#125;</div><div class="line">.block &#123; eza 0x$u0+0x100 &quot;$&#123;$arg1&#125;&quot;&#125;</div><div class="line">r @$t0=@eip</div><div class="line">r @eip=$u0</div><div class="line">.block &#123;g $&#123;@#LastAsmAddr&#125;&#125;</div><div class="line">r @eip=@$t0</div><div class="line">.dvfree 0x$u0 0</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="autocmd"><a href="#autocmd" class="headerlink" title="!autocmd"></a>!autocmd</h4><blockquote>
<p>!autocmd         - Execute the debugger commands.(The config file is<br>                     autocmd.ini)</p>
</blockquote>
<p>自动执行特定指令。有的时候我希望调试器附加到进程或者运行程序的时候能够自动运行一连串的命令，这个功能虽然可以由脚本完成，但是对我而言还是不够简洁，所以就有了这个命令。我可以在0cchext.dll的目录下，创建autocmd.ini文件，然后输入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[notepad.exe]</div><div class="line">.sympath+ c:\notepad_pdb</div><div class="line">~*k</div><div class="line"></div><div class="line">[calc.exe]</div><div class="line">.sympath+ c:\calc_pdb</div><div class="line">~*k</div></pre></td></tr></table></figure>
<p>这样，在调试不同程序的时候输入!autocmd会执行不同的命令。</p>
<hr>
<h4 id="bing-amp-google"><a href="#bing-amp-google" class="headerlink" title="!bing &amp; !google"></a>!bing &amp; !google</h4><blockquote>
<p>!bing            - Use bing to search.<br>!google          - Use google to search.</p>
</blockquote>
<p>这个命令非常简单，就是用bing和google去搜索指定的字符串。</p>
<hr>
<h4 id="favcmd"><a href="#favcmd" class="headerlink" title="!favcmd"></a>!favcmd</h4><blockquote>
<p>!favcmd           - Display the favorite debugger commands.(The config file is<br>                     favcmd.ini)</p>
</blockquote>
<p>这个命令也非常简单，只需要把自己喜欢的命令一行一行的写在favcmd.ini文件里就行了，当然这个文件也需要和0cchext.dll在同一个目录。然后运行这个命令后，你所喜欢的命令就会打印到Windbg上，你可以用鼠标选择执行这些命令。</p>
<p>例如在文件中分别写入：</p>
<blockquote>
<p>~*k<br>!address<br>!heap</p>
</blockquote>
<p><a href="/uploads/2015/10/20151005162754.png"><img src="/uploads/2015/10/20151005162754.png" alt="20151005162754"></a></p>
<hr>
<h4 id="hwnd"><a href="#hwnd" class="headerlink" title="!hwnd"></a>!hwnd</h4><blockquote>
<p>!hwnd            - Show window information by handle.</p>
</blockquote>
<p>这个命令很简单，可以输入窗口句柄为参数，查看窗口相关信息。主要作用是在内核调试的时候，用调试器看到窗口信息会比较方便。</p>
<hr>
<h4 id="url"><a href="#url" class="headerlink" title="!url"></a>!url</h4><blockquote>
<p>!url             - Open a URL in a default browser.</p>
</blockquote>
<p>这个命令会打开一个url，实际上他就是一个ShellExecute。Windbg本来就有.shell功能了，这个似乎是多余了一点。</p>
<hr>
<h4 id="init-script-env"><a href="#init-script-env" class="headerlink" title="!init_script_env"></a>!init_script_env</h4><blockquote>
<p>!init_script_env - Initialize script environment.</p>
</blockquote>
<p>这个命令是我给脚本准备的，他方便了脚本判断系统环境。如下图所示</p>
<p><a href="/uploads/2015/10/20151005163744.png"><img src="/uploads/2015/10/20151005163744.png" alt="20151005163744"></a></p>
<hr>
<h4 id="import-vs-bps"><a href="#import-vs-bps" class="headerlink" title="!import_vs_bps"></a>!import_vs_bps</h4><blockquote>
<p>!import_vs_bps   - Import visual studio breakpoints.</p>
</blockquote>
<p>这个命令可以将VS存储在suo文件的断点导入到Windbg中。我有的时候会碰到这样的情况，VS里设置了一堆断点，但是调试环境里只有Windbg，那么我需要把这些断点转移到Windbg，有了这个命令，我只需要将VS解决方案的suo文件拷贝到调试环境中，然后运行这条命令即可。</p>
<p>例如</p>
<blockquote>
<p>!import_vs_bps c:\proj\xxx.suo</p>
</blockquote>
<hr>
<h4 id="setvprot"><a href="#setvprot" class="headerlink" title="!setvprot"></a>!setvprot</h4><blockquote>
<p>!setvprot        - Set the protection on a region of committed pages in the<br>                     virtual address space of the debuggee process.</p>
</blockquote>
<p>这个命令能帮助我设置debuggee的内存属性，一个有趣的用法就是模仿Ollydbg的内存断点功能，比如给目标内存设置一个PAGE_GUARD属性，这样访问这部分内存的时候就会触发访问异常，调试器就能捕获到它了。</p>
<p>例如</p>
<blockquote>
<p>!setvprot 0x410000 0x1000 0x100</p>
</blockquote>
<hr>
<h4 id="pe-export-amp-pe-import"><a href="#pe-export-amp-pe-import" class="headerlink" title="!pe_export &amp; !pe_import"></a>!pe_export &amp; !pe_import</h4><blockquote>
<p>!pe_export       - Dump PE export functions<br>!pe_import       - Dump PE import modules and functions</p>
</blockquote>
<p>这两个命令可以分别帮助我们查看导出和导入函数，他们都支持通配符查找函数，在没有符号的情况下有时候会起到很好的作用。另外，他们配合好参数/b和.foreach命令，可以发挥出API Monitor的作用。</p>
<p>例如</p>
<blockquote>
<p>.foreach( place  { !pe_export /b kernel32 *Create* } ) { bp place “g” }</p>
</blockquote>
<hr>
<h4 id="wql"><a href="#wql" class="headerlink" title="!wql"></a>!wql</h4><blockquote>
<p>!wql             - Query system information with WMI.</p>
</blockquote>
<p>这也是我比较喜欢的一个功能，他可以在调试的时候通过WQL来查询系统的一些信息，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !0cchext.wql select * from win32_process where name=&quot;explorer.exe&quot;</div><div class="line">-------------------------------------------------------------</div><div class="line">  Caption                                   local       CIM_STRING  explorer.exe</div><div class="line">  CommandLine                               local       CIM_STRING  C:\Windows\Explorer.EXE</div><div class="line">  CreationClassName                         local       CIM_STRING  Win32_Process</div><div class="line">  CreationDate                              local       CIM_DATETIME  2015-09-17 09:41:53.959</div><div class="line">  CSCreationClassName                       local       CIM_STRING  Win32_ComputerSystem</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  ThreadCount                               local       CIM_UINT32  40</div><div class="line">  UserModeTime                              local       CIM_UINT64  605439881</div><div class="line">  VirtualSize                               local       CIM_UINT64  435580928</div><div class="line">  WindowsVersion                            local       CIM_STRING  6.1.7601</div><div class="line">  WorkingSetSize                            local       CIM_UINT64  109813760</div><div class="line">  WriteOperationCount                       local       CIM_UINT64  399</div><div class="line">  WriteTransferCount                        local       CIM_UINT64  1545945</div><div class="line">-------------------------------------------------------------</div><div class="line"></div></pre></td></tr></table></figure>
<hr>
<h4 id="logcmd"><a href="#logcmd" class="headerlink" title="!logcmd"></a>!logcmd</h4><blockquote>
<p>!logcmd          - Log command line to log file</p>
</blockquote>
<p>这个命令是一个开关，打开后，他会记录调试的命令到文件中，这样下次调试相同的程序的时候就不需要在此去输入这些命令了，只需要读取这个命令文件，就可以用鼠标点击执行命令了。</p>
<p><a href="/uploads/2015/10/20151005170422.png"><img src="/uploads/2015/10/20151005170422.png" alt="20151005170422"></a></p>
<hr>
<h4 id="dpx"><a href="#dpx" class="headerlink" title="!dpx"></a>!dpx</h4><blockquote>
<p>!dpx             - Display the contents of memory in the given range.</p>
</blockquote>
<p>这个命令是集dps dpa dpu大成者。他的会对目标指针做一个简单的判断，判断是符号，字符串，还是宽字符串。这样在我们查看栈信息的时候就不会漏掉一些有用的线索了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !dpx esp 100</div><div class="line">00c3f28c  7605cb33  [S] USER32!GetMessageA+0x53 (7605cb33)</div><div class="line">...</div><div class="line">00c3f2b4  012b6ca9  [S] usbview!WinMain+0xe3 (012b6ca9)</div><div class="line">...</div><div class="line">00c3f2f4  012ce723  [S] usbview!WinMainCRTStartup+0x151 (012ce723)</div><div class="line">00c3f2f8  01260000  [S] usbview!__guard_check_icall_fptr &lt;PERF&gt; (usbview+0x0) </div><div class="line">...</div><div class="line">00c3f320  01025618  [A] &quot;Winsta0\Default&quot;</div><div class="line">00c3f324  01025640  [A] &quot;C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\usbview.exe&quot;</div><div class="line">00c3f328  00000000  [D] ....</div></pre></td></tr></table></figure>
<hr>
<h4 id="dtx"><a href="#dtx" class="headerlink" title="!dtx"></a>!dtx</h4><blockquote>
<p>!dtx             - Displays information about structures. (The config file is<br>                     struct.ini)</p>
</blockquote>
<p>这个命令主要用在逆向工程的时候。因为逆向工程的时候，我们往往没有符号文件，就不可能直接知道内存数据的结构是什么样子的，我们需要自己通过代码推断出来。在IDA中，我们可以自己设置结构体帮助分析。但是在Windbg中，并没有一个功能能方便的帮助我们用这推断的结构体去显示内存。不可否认我们其实可以用其他的办法来完成这个目的，但操作很繁琐。那么这个命令就解决了这些问题。我们可以在struct.ini文件中写入我们推断的结构体，然后通过这个命令去打印内存数据。当然，这个文件也必须在0cchext.dll的同目录下。</p>
<p><a href="/uploads/2015/10/20151005172455.png"><img src="/uploads/2015/10/20151005172455.png" alt="20151005172455"></a></p>
<p>到目前位置脚本解析器支持的基本类型有BYTE WORD DWORD CHAR WCHAR，支持数组和指针，支持结构体嵌套，有了这些，对于基本的逆向就能够满足需求了。</p>
<hr>
<p>现在0cchext.dll就是这些命令了，我也会根据自己的需求继续添加命令，如果你有什么有趣或者实用的想法，可以通过邮件或者留言告诉我。</p>
]]></content>
      
        <categories>
            
            <category> debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Foxmail无法响应]]></title>
      <url>/2015/09/07/foxmail-hung/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Foxmail是一款不错的邮件客户端软件，小巧实用，我在公司就是用的它。早上一如既往的先打开Foxmail，然后去倒杯水，回来发现Foxmail还在收取邮件的状态，“这也太慢了”，我心想。用鼠标点了点，出现了程序挂起的特征，标题栏上显示无法响应，程序界面变白。经验告诉我挂起的问题70%都还是比较容易调的，好吧，就让我看看这是怎么回事。</p>
<p>打开Windbg，Attach到Foxmail上，习惯做的第一件事情就是保存Full dump</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.dump /ma /u e:\foxmail.dmp</div></pre></td></tr></table></figure>
<p>由于程序的主界面出现了挂起的现象，而一般情况下主线程就是程序的界面线程，所以此时根本没必要去查看所有线程的情况，直接看看主线程的栈信息吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">0:000&gt; k</div><div class="line">ChildEBP RetAddr  </div><div class="line">0018f454 770fd993 ntdll!ZwWaitForSingleObject+0x15</div><div class="line">0018f4b8 770fd877 ntdll!RtlpWaitOnCriticalSection+0x13e</div><div class="line">0018f4e0 770f84ca ntdll!RtlEnterCriticalSection+0x150</div><div class="line">0018f514 76734e8c ntdll!RtlLockHeap+0x3d</div><div class="line">0018f558 004091af KERNELBASE!GlobalAlloc+0x92</div><div class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</div><div class="line">0018f578 0042bf97 Foxmail+0x91af</div><div class="line">0018f588 0042c115 Foxmail+0x2bf97</div><div class="line">0018f5a4 007c5f25 Foxmail+0x2c115</div><div class="line">0018f9fc 007c50ce Foxmail+0x3c5f25</div><div class="line">0018fa34 007c516a Foxmail+0x3c50ce</div><div class="line">0018fa44 007c9e57 Foxmail+0x3c516a</div><div class="line">0018faac 007ca28b Foxmail+0x3c9e57</div><div class="line">0018fae0 007c9370 Foxmail+0x3ca28b</div><div class="line">0018fb10 007ca3fb Foxmail+0x3c9370</div><div class="line">0018fb1c 00dd8a96 Foxmail+0x3ca3fb</div><div class="line">0018fb44 007c93bb Foxmail+0x9d8a96</div><div class="line">0018fb64 007c9479 Foxmail+0x3c93bb</div><div class="line">0018fba8 00dd0492 Foxmail+0x3c9479</div><div class="line">0018fcd4 00dd019d Foxmail+0x9d0492</div><div class="line">0018fd00 00dd454a Foxmail+0x9d019d</div><div class="line">0018fd44 00dcf20d Foxmail+0x9d454a</div><div class="line">0018fd60 007ca59d Foxmail+0x9cf20d</div><div class="line">0018fd84 0044e9d6 Foxmail+0x3ca59d</div><div class="line">0018fd94 0044e844 Foxmail+0x4e9d6</div><div class="line">0018fdbc 00434a96 Foxmail+0x4e844</div><div class="line">0018fdd4 74aa62fa Foxmail+0x34a96</div><div class="line">0018fe00 74aa6d3a user32!InternalCallWinProc+0x23</div><div class="line">0018fe78 74aa77c4 user32!UserCallWinProcCheckWow+0x109</div><div class="line">0018fed8 74aa7bca user32!DispatchMessageWorker+0x3bc</div><div class="line">0018fee8 00dc5e7a user32!DispatchMessageA+0xf</div><div class="line">0018ff04 00dc5ee4 Foxmail+0x9c5e7a</div><div class="line">0018ff2c 00dc61bf Foxmail+0x9c5ee4</div><div class="line">0018ff5c 00ded3a0 Foxmail+0x9c61bf</div><div class="line">0018ff88 75b9336a Foxmail+0x9ed3a0</div><div class="line">0018ff94 770f9882 kernel32!BaseThreadInitThunk+0xe</div><div class="line">0018ffd4 770f9855 ntdll!__RtlUserThreadStart+0x70</div><div class="line">0018ffec 00000000 ntdll!_RtlUserThreadStart+0x1b</div></pre></td></tr></table></figure>
<p>可以看到界面线程调用GlobalAlloc的时候在等HeapLock被释放。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:000&gt; kb L5</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">0018f454 770fd993 00000698 00000000 00000000 ntdll!ZwWaitForSingleObject+0x15</div><div class="line">0018f4b8 770fd877 00000000 00000000 00000000 ntdll!RtlpWaitOnCriticalSection+0x13e</div><div class="line">0018f4e0 770f84ca 014d0138 0044e9b8 0018f4ac ntdll!RtlEnterCriticalSection+0x150</div><div class="line">0018f514 76734e8c 014d0000 4d5402d1 00000000 ntdll!RtlLockHeap+0x3d</div><div class="line">0018f558 004091af 00000002 00002000 0042c07c KERNELBASE!GlobalAlloc+0x92</div></pre></td></tr></table></figure>
<p>那么014d0138比如是默认堆的Critical Section了。来看看这个cs的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !cs 014d0138 </div><div class="line">*************************************************************************</div><div class="line">***                                                                   ***</div><div class="line">***                                                                   ***</div><div class="line">***    Either you specified an unqualified symbol, or your debugger   ***</div><div class="line">***    doesn&apos;t have full symbol information.  Unqualified symbol      ***</div><div class="line">***    resolution is turned off by default. Please either specify a   ***</div><div class="line">***    fully qualified symbol module!symbolname, or enable resolution ***</div><div class="line">***    of unqualified symbols by typing &quot;.symopt- 100&quot;. Note that   ***</div><div class="line">***    enabling unqualified symbol resolution with network symbol     ***</div><div class="line">***    server shares in the symbol path may cause the debugger to     ***</div><div class="line">***    appear to hang for long periods of time when an incorrect      ***</div><div class="line">***    symbol name is typed or the network symbol server is down.     ***</div><div class="line">***                                                                   ***</div><div class="line">***    For some commands to work properly, your symbol path           ***</div><div class="line">***    must point to .pdb files that have full type information.      ***</div><div class="line">***                                                                   ***</div><div class="line">***    Certain .pdb files (such as the public OS symbols) do not      ***</div><div class="line">***    contain the required information.  Contact the group that      ***</div><div class="line">***    provided you with these symbols if you need this command to    ***</div><div class="line">***    work.                                                          ***</div><div class="line">***                                                                   ***</div><div class="line">***    Type referenced: ntdll!_RTL_CRITICAL_SECTION                   ***</div><div class="line">***                                                                   ***</div><div class="line">*************************************************************************</div><div class="line">Bad symbols for NTDLL (error 3). Aborting.</div></pre></td></tr></table></figure>
<p>嗯，ntdll的符号文件的结构体信息没有了！这个问题发生在2015年7月份的，安装KB3071756和KB3060716补丁后产生的。详情可以查看<br><a href="http://www.osronline.com/showthread.cfm?link=269221" target="_blank" rel="external">http://www.osronline.com/showthread.cfm?link=269221</a></p>
<p>既然新的符号不让用，那就只有用老的了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0:000&gt; .reload /f /i E:\WorkSpace\MySymbols\ntdll.dll\49900AFA96000\ntdll.dll=77ffe000   </div><div class="line">0:000&gt; lm m ntdll*</div><div class="line">start    end        module name</div><div class="line">770c0000 77240000   ntdll      (pdb symbols)          e:\workspace\mysymbols\wntdll.pdb\FA9C48F9C11D4E0894B8970DECD92C972\wntdll.pdb</div><div class="line">77ffe000 78094000   ntdll_77ffe000   (pdb symbols)          e:\workspace\mysymbols\ntdll.pdb\6992F4DAF4B144068D78669D6CB5D2072\ntdll.pdb</div><div class="line">0:000&gt; dt ntdll_77ffe000!_RTL_CRITICAL_SECTION 014d0138</div><div class="line">   +0x000 DebugInfo        : 0x771c4960 _RTL_CRITICAL_SECTION_DEBUG</div><div class="line">   +0x004 LockCount        : 0n-30</div><div class="line">   +0x008 RecursionCount   : 0n1</div><div class="line">   +0x00c OwningThread     : 0x00001730 Void</div><div class="line">   +0x010 LockSemaphore    : 0x00000698 Void</div><div class="line">   +0x014 SpinCount        : 0xfa0</div><div class="line"></div></pre></td></tr></table></figure>
<p>好了，这样就够用了。可以看到TID=1730的线程正在占用这个cs，马上去看看这个线程在干什么。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">0:041&gt; k</div><div class="line">ChildEBP RetAddr  </div><div class="line">06e1f214 770fd993 ntdll!ZwWaitForSingleObject+0x15</div><div class="line">06e1f278 770fd877 ntdll!RtlpWaitOnCriticalSection+0x13e</div><div class="line">06e1f2a0 770f84ca ntdll!RtlEnterCriticalSection+0x150</div><div class="line">06e1f2d4 7717fd7d ntdll!RtlLockHeap+0x3d</div><div class="line">06e1f3bc 7714de8e ntdll!RtlpQueryExtendedHeapInformation+0xbd</div><div class="line">06e1f3fc 7716476b ntdll!RtlQueryHeapInformation+0x4a</div><div class="line">06e1f4a0 77143320 ntdll!RtlQueryProcessHeapInformation+0x288</div><div class="line">06e1f51c 75c15f4b ntdll!RtlQueryProcessDebugInformation+0x28a</div><div class="line">Unable to load image D:\Program Files\Foxmail 7.2\libeay32.dll, Win32 error 0n2</div><div class="line">*** ERROR: Symbol file could not be found.  Defaulted to export symbols for libeay32.dll - </div><div class="line">06e1f54c 0606ad6a kernel32!Heap32Next+0x4d</div><div class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</div><div class="line">06e1fab0 06069c77 libeay32!RAND_poll+0x5fa</div><div class="line">06e1facc 06023db7 libeay32!RAND_SSLeay+0x447</div><div class="line">06e1fb00 06069f71 libeay32!CRYPTO_set_ex_data_implementation+0x387</div><div class="line">00000000 00000000 libeay32!RAND_SSLeay+0x741</div><div class="line"></div></pre></td></tr></table></figure>
<p>从栈的信息看来，这个线程是OpenSSL的一个线程，正在做随机数处理，而枚举Heap的信息应该也是随机数的一个组成部分。在枚举Heap的时候也处于等待一个HeapLock的情况，来具体看看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:041&gt; kb L5</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">06e1f214 770fd993 00000b10 00000000 00000000 ntdll!ZwWaitForSingleObject+0x15</div><div class="line">06e1f278 770fd877 00000000 00000000 06e1f428 ntdll!RtlpWaitOnCriticalSection+0x13e</div><div class="line">06e1f2a0 770f84ca 04560138 00000000 00000000 ntdll!RtlEnterCriticalSection+0x150</div><div class="line">06e1f2d4 7717fd7d 04560000 71edefe5 06e1f468 ntdll!RtlLockHeap+0x3d</div><div class="line">06e1f3bc 7714de8e 06e1f428 771640d3 00000000 ntdll!RtlpQueryExtendedHeapInformation+0xbd</div></pre></td></tr></table></figure>
<p>看来正在等一个基地址是04560000的Heap的cs。顺藤摸瓜看看这个cs又被谁占用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:041&gt; dt ntdll_77ffe000!_RTL_CRITICAL_SECTION 04560138 </div><div class="line">   +0x000 DebugInfo        : 0x0151df40 _RTL_CRITICAL_SECTION_DEBUG</div><div class="line">   +0x004 LockCount        : 0n-6</div><div class="line">   +0x008 RecursionCount   : 0n1</div><div class="line">   +0x00c OwningThread     : 0x00001994 Void</div><div class="line">   +0x010 LockSemaphore    : 0x00000b10 Void</div><div class="line">   +0x014 SpinCount        : 0xfa0</div></pre></td></tr></table></figure>
<p>继续看看0x00001994这个线程在做什么事情</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">0:002&gt; kb</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">0438d2c4 770fd993 00000698 00000000 00000000 ntdll!ZwWaitForSingleObject+0x15</div><div class="line">0438d328 770fd877 00000000 00000000 014d0000 ntdll!RtlpWaitOnCriticalSection+0x13e</div><div class="line">0438d350 770fdaf8 014d0138 7334c875 00078000 ntdll!RtlEnterCriticalSection+0x150</div><div class="line">0438d42c 770f2fe3 000001f8 00000200 00000000 ntdll!RtlpAllocateHeap+0x159</div><div class="line">0438d4b0 770f7bfb 014d0000 00800000 000001f8 ntdll!RtlAllocateHeap+0x23a</div><div class="line">0438d4fc 770f70f1 00000028 7334c9d5 07240048 ntdll!RtlpAllocateUserBlock+0xae</div><div class="line">0438d58c 770ee0e2 07240048 07240048 00000000 ntdll!RtlpLowFragHeapAllocFromContext+0x802</div><div class="line">0438d600 770f8129 014d0000 00000000 00000020 ntdll!RtlAllocateHeap+0x206</div><div class="line">0438d610 770f3f21 04560000 07240048 00000000 ntdll!RtlpAllocateDebugInfo+0x28</div><div class="line">0438d64c 770f4262 07240048 00000000 00000000 ntdll!RtlInitializeCriticalSectionEx+0x93</div><div class="line">0438d660 771031e2 07240048 07240048 04560000 ntdll!RtlInitializeCriticalSection+0x12</div><div class="line">0438d674 771031b0 00000000 00000800 04560000 ntdll!RtlpInitializeLowFragHeap+0x28</div><div class="line">0438d684 77102f5a 7334cae5 045600cc 04560000 ntdll!RtlpCreateLowFragHeap+0x28</div><div class="line">0438d6bc 77103002 04560000 04560194 0438d7a8 ntdll!RtlpActivateLowFragmentationHeap+0xc9</div><div class="line">0438d6cc 77102fce 04560000 7334cbf1 00000000 ntdll!RtlpPerformHeapMaintenance+0x2a</div><div class="line">0438d7a8 770f2fe3 00000008 00000010 04560194 ntdll!RtlpAllocateHeap+0x172</div><div class="line">0438d82c 6fef1e62 04560000 00000008 00000008 ntdll!RtlAllocateHeap+0x23a</div><div class="line">0438d844 6fef20f9 0438d858 04560984 00000007 nlaapi!NlapAllocNlaDataSet+0x18</div><div class="line">0438d85c 6fef2096 00000007 00000003 045608f0 nlaapi!QueryCtxtDeserializeTuplesToTrieMap+0x20</div><div class="line">0438d888 6fef23a7 045608f0 000003c8 04560958 nlaapi!QueryCtxtDeserializeEntityToTrieMap+0x38</div><div class="line">0438d924 6fef58e0 7972514e 00000001 00000000 nlaapi!NLA_QUERY_HANDLE_completion_internal+0x21f</div><div class="line">0438d944 6fef5cd7 00000000 00000000 0c7507d0 nlaapi!NlaRegisterQuery+0x7d</div><div class="line">0438d99c 6fef5bac 044907d0 4e3f415a 014587b0 nlaapi!GetNlaV2Handle+0x7e</div><div class="line">0438d9d0 769d59b1 01435244 0438db88 044907d0 nlaapi!WSM_NSPLookupServiceBegin_v2+0xc9</div><div class="line">0438d9ec 769d598d 01435208 0438db88 00000000 ws2_32!NSPROVIDER::NSPLookupServiceBegin+0x1b</div><div class="line">0438da08 769d591c 01458960 0438db88 00000000 ws2_32!NSPROVIDERSTATE::LookupServiceBegin+0x1d</div><div class="line">0438da6c 769d57cc 014587b0 0438db88 00000ff0 ws2_32!NSQUERY::LookupServiceBegin+0x18d</div><div class="line">0438dabc 0fd7fca2 0438db88 00000ff0 0438dbd0 ws2_32!WSALookupServiceBeginW+0x7f</div><div class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</div><div class="line">0438dd18 0fd0c6a1 0fa9df49 03ac9c20 03b5da80 libcef!cef_time_delta+0x3ddc22</div><div class="line">0438e2f0 0fa9ec71 0438e698 03a91e00 0438e310 libcef!cef_time_delta+0x36a621</div><div class="line">0438e37c 0fa8d58f 0438e698 03ac9c00 03b5da80 libcef!cef_time_delta+0xfcbf1</div><div class="line">0438eb88 0fa9915f 0438ebc8 fffffffe ffffffff libcef!cef_time_delta+0xeb50f</div><div class="line">0438ebe8 0fb3605d 03b5da80 fffffffe 03ac9d20 libcef!cef_time_delta+0xf70df</div><div class="line">0438ec04 0fb3744d 03b5da80 fffffffe fffffffe libcef!cef_time_delta+0x193fdd</div><div class="line">0438ecd8 0fb37ad2 00000003 fffffffe 00000000 libcef!cef_time_delta+0x1953cd</div><div class="line">0438edc0 0fb37f5d 03ac9400 11c9bee1 03ac9400 libcef!cef_time_delta+0x195a52</div><div class="line">0438edfc 0fa9ab19 03ac9400 03ac9c38 03ac9c00 libcef!cef_time_delta+0x195edd</div><div class="line">0438f20c 0fa9b466 03ac9400 00000000 03ac9c38 libcef!cef_time_delta+0xf8a99</div><div class="line">0438f220 0fb3c815 00000000 03ac9400 0fb3aee5 libcef!cef_time_delta+0xf93e6</div><div class="line">0438f2e8 0fb3d2e3 00000000 03b53384 03ac9c38 libcef!cef_time_delta+0x19a795</div><div class="line">0438f690 0fb3ad7b 0438f600 03b53384 03b2ddc0 libcef!cef_time_delta+0x19b263</div><div class="line">0438f8ac 0f985613 0438fb64 03b53384 00000001 libcef!cef_time_delta+0x198cfb</div><div class="line">0438fbec 0f98016a ffffffff ffffffff 03b53368 libcef!cef_string_multimap_free+0x18b63</div><div class="line">0438fc28 0fa208a4 03b53340 03ac0dd0 03a87b00 libcef!cef_string_multimap_free+0x136ba</div><div class="line">0438fd70 0fa223ba 0438fdd0 03a878c0 03ac0d00 libcef!cef_time_delta+0x7e824</div><div class="line">0438fe0c 0fa4edfc 00000000 03a878c0 03ac0dd0 libcef!cef_time_delta+0x8033a</div><div class="line">0438fe3c 0fa4ec2e 00000000 03ac0dd0 03ac0dd0 libcef!cef_time_delta+0xacd7c</div><div class="line">0438fe5c 0fa2177f 03ac0dd0 0438ff34 03ac0dd0 libcef!cef_time_delta+0xacbae</div><div class="line">0438ff24 0fa3a323 03a8d7d0 0fa1fc56 03ac0dd0 libcef!cef_time_delta+0x7f6ff</div><div class="line">0438ff50 0fa39b9b 0438ff74 0fa39c6a 03ac0dd0 libcef!cef_time_delta+0x982a3</div><div class="line">0438ff58 0fa39c6a 03ac0dd0 03a80f40 03a8d7d0 libcef!cef_time_delta+0x97b1b</div><div class="line">0438ff74 0fa22ad8 00000000 00000000 03a80f40 libcef!cef_time_delta+0x97bea</div><div class="line">0438ff88 75b9336a 000001a8 0438ffd4 770f9882 libcef!cef_time_delta+0x80a58</div><div class="line">0438ff94 770f9882 03a80f40 7334e38d 00000000 kernel32!BaseThreadInitThunk+0xe</div><div class="line">0438ffd4 770f9855 0fa22a80 03a80f40 00000000 ntdll!__RtlUserThreadStart+0x70</div><div class="line">0438ffec 00000000 0fa22a80 03a80f40 00000000 ntdll!_RtlUserThreadStart+0x1b</div><div class="line"></div></pre></td></tr></table></figure>
<p>这个线程正在为04560000这个heap创建LowFragHeap，但是在获取014d0138的cs的时候被卡住了。这里就发现问题所在了！014d0138不正是我们主线程在等待的cs么，这个线程的10f0和1994都在等待1730的cs=014d0138，而1730却在等待1994的cs=04560138。</p>
<p><a href="/uploads/2015/09/20150908002438.png"><img src="/uploads/2015/09/20150908002438.png" alt="20150908002438"></a></p>
<p>反汇编RtlpQueryExtendedHeapInformation就能知道这里造成死锁的真正原因。实际上Heap32Next函数枚举所有Heap信息的时候，先统一锁住进程里面所有的Heap，然后做枚举工作，最后再统一释放锁。所以它在正在锁住所有HeapLock过程中的时候，例如锁住了一半，正在尝试锁住另一半，另外一个线程正好拥有他没锁住的HeapLock，但是不巧的时候他在给这个Heap创建LowFragHeap，而创建LowFragHeap需要初始化HeapLock，其中HeapLock的DebugInfo又是用默认Heap去分配内存的，默认堆的锁正好在第一个线程被锁住的那一半里，这就是事情的真相！</p>
<p>那么微软为什么要提供一个会造成死锁的API，而且不去修复呢？按照Raymond的说法，这个系列的函数目的只是诊断，性能很低，不应该用于普通程序中。<br><a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/03/23/10286665.aspx" target="_blank" rel="external">http://blogs.msdn.com/b/oldnewthing/archive/2012/03/23/10286665.aspx</a><br>但是，我觉得既然是文档化的接口，而且文档里面没有提到会造成死锁，那么它就应该是安全的。</p>
]]></content>
      
        <categories>
            
            <category> debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[介绍三个有趣的API]]></title>
      <url>/2015/08/27/3-interesting-API/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>####PickIconDlg</p>
<p>相信给快捷方式指定过图标的朋友肯定看过一个这样的对话框吧，如果你看到过，你肯定已经知道了这个API是怎么一回事。这个API会弹出一个选择图标的窗口给你选择，确定后返回图标在资源中的索引值。这样你可以通过这个索引值和ExtractIcon函数获得这个图标的句柄。</p>
<p><a href="/uploads/2015/08/20150827113011.png"><img src="/uploads/2015/08/20150827113011.png" alt="20150827113011"></a></p>
<p>示例代码如下：</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> Index = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> DWORD BuffSize = MAX_PATH;</div><div class="line">TCHAR Path[BuffSize] = _T(<span class="string">"c:\\windows\\system32\\shell32.dll"</span>);</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Sel = PickIconDlg(<span class="literal">NULL</span>, Path, BuffSize, &amp;Index);</div><div class="line"><span class="keyword">if</span>(Sel)</div><div class="line">&#123;</div><div class="line">	HMODULE hMod = ::LoadLibrary(Path);</div><div class="line">	HICON hIcon = ExtractIcon(hMod, Path, Index);</div><div class="line">	FreeLibrary(hMod);</div><div class="line">&#125;</div></pre></td></tr></table></figure></h2><p>####WNetConnectionDialog和WNetConnectionDialog1</p>
<p>这两个函数是帮助我们在程序中显示映射网络驱动器对话框的，虽然用的不多，但是也应该见到过它。这两个函数区别不大，只不过WNetConnectionDialog1比WNetConnectionDialog提供了更多的参数去设置。</p>
<p><a href="/uploads/2015/08/20150827114516.png"><img src="/uploads/2015/08/20150827114516.png" alt="20150827114516"></a></p>
<p>示例代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Mpr.lib"</span>)</span></div><div class="line"></div><div class="line">CONNECTDLGSTRUCT condlg = &#123; <span class="number">0</span> &#125;;</div><div class="line">condlg.cbStructure = <span class="keyword">sizeof</span>(condlg);</div><div class="line">condlg.hwndOwner = GetConsoleWindow();</div><div class="line">condlg.dwFlags =  CONNDLG_USE_MRU;</div><div class="line"></div><div class="line">NETRESOURCE nr = &#123; <span class="number">0</span> &#125;;</div><div class="line">nr.dwScope = RESOURCE_GLOBALNET;</div><div class="line">nr.dwType = RESOURCETYPE_DISK;</div><div class="line">nr.lpRemoteName = <span class="literal">NULL</span>;</div><div class="line">nr.dwDisplayType = RESOURCEDISPLAYTYPE_DOMAIN;</div><div class="line"></div><div class="line">condlg.lpConnRes = &amp;nr;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> RetVal = WNetConnectionDialog1(&amp;condlg);</div></pre></td></tr></table></figure>
<hr>
<p>####SHOpenWithDialog</p>
<p>这个API所显示的对话框我们应该是最多见的，它显示了一个打开方式的对话框。不过有点可惜的是，XP并不支持这个API，我们只能将它用在Vista开始的系统上。</p>
<p><a href="/uploads/2015/08/20150827115225.png"><img src="/uploads/2015/08/20150827115225.png" alt="20150827115225"></a></p>
<p>示例代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">OPENASINFO Info = &#123; <span class="number">0</span> &#125;;</div><div class="line">Info.pcszFile = _T(<span class="string">"C:\\Windows\\win.ini"</span>);</div><div class="line">Info.oaifInFlags = OAIF_EXEC | OAIF_ALLOW_REGISTRATION;</div><div class="line">SHOpenWithDialog(<span class="literal">NULL</span>, &amp;Info);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[OleFileView 查看Ole文件数据结构的工具]]></title>
      <url>/2015/08/03/ole-file-view-tool/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>OleFileView是一个查看结构化存储文件的工具，我们熟悉的Ole存储的文件就是这种格式，虽然很老了，但是依旧被广泛使用，例如老版本Office的文件doc，xls等，包括msi，jumplist等，都是采用的这种格式。<br>所以我也就抽了点时间研究了一下这个数据结构，可以说这就是个小型的文件系统，虽然比不上NTFS，但是对于一般的存储可以说是小菜一碟。</p>
<p><a href="/uploads/2015/08/20150803003316.png"><img src="/uploads/2015/08/20150803003316.png" alt="20150803003316"></a></p>
<p>下载：<a href="/uploads/2015/08/OleFileView.zip">OleFileView.zip</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用WMI监控进程创建和结束]]></title>
      <url>/2015/07/13/monitor-process-with-wmi/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Windows Management Instrumentation (WMI) 是微软实现的一套可以通过网页管理计算机的系统，我们可以通过WMI查询计算机的方方面面。从Vista开始，这个机制增加了Instance Event的提醒机制，这个机制可以帮助我们监控各种Instance的创建、删除和修改。所以，我们可以想到的是进程也是在WMI里的Win32_Process有Instance的记录，这样我们就可以跟踪到进程的创建和结束了。当然，我们还可能监控到文件等等WMI里的各种Instance。下面是一个监控进程的例子：</p>
<p><a href="/uploads/2015/05/20150712232158.png"><img src="/uploads/2015/07/20150712232158.png" alt="20150712232158"></a></p>
<p>下载：<a href="/uploads/2015/07/MonitorProcessWithWMI.zip">MonitorProcessWithWMI.zip</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用Windbg script将内存中的PE文件dump出来]]></title>
      <url>/2015/07/01/dump-pe-with-windbg-script/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近看到有些恶意程序，从网络上下载PE文件后，直接放在内存里重定位和初始化，为了能将其dump出来，所以写了这个Windbg脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">.foreach( place  &#123; !address /f:VAR,MEM_PRIVATE,MEM_COMMIT /c:&quot;s -[1]a %1 %2 \&quot;MZ\&quot;&quot; &#125; ) </div><div class="line">&#123;</div><div class="line">	ad *</div><div class="line">	.catch &#123;</div><div class="line">		r @$t2 = place;</div><div class="line">		r @$t0 = place;</div><div class="line">		r @$t1 = @@C++(((ntdll!_IMAGE_DOS_HEADER *)@$t0)-&gt;e_lfanew);</div><div class="line">		r @$t0 = @$t0 + @$t1;</div><div class="line">		r @$t1 = $vvalid(@$t0, 4);</div><div class="line"></div><div class="line">		.if (@@C++(@$t1 &amp;&amp; @@C++(((ntdll!_IMAGE_NT_HEADERS *)@$t0)-&gt;Signature) == 0x00004550))</div><div class="line">		&#123;</div><div class="line">			r @$t1 = @@C++(((ntdll!_IMAGE_NT_HEADERS *)@$t0)-&gt;OptionalHeader.SizeOfImage);</div><div class="line">			.printf &quot;%08x  %08x\n&quot;, @$t2, @$t1;</div><div class="line">			aS /x start_addr @$t2</div><div class="line">			aS /x dump_size @$t1</div><div class="line">			.block &#123;</div><div class="line">				aS target_file e:\\$&#123;start_addr&#125;.dll</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			.block &#123;</div><div class="line">				.printf &quot;$&#123;target_file&#125;&quot;</div><div class="line">				.writemem &quot;$&#123;target_file&#125;&quot; $&#123;start_addr&#125; L?$&#123;dump_size&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[将blog迁移到了jekyll]]></title>
      <url>/2015/06/28/move-blog-to-jekyll/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>上周终于下定决心把blog从<a href="http://0cch.net" target="_blank" rel="external">wordpress</a>转到<a href="http://0cch.com">jekyll</a>，不是因为wordpress臃肿，也不是因为jekyll的更加Geek，纯粹是因为穷。我一直都觉得wordpress是一个非常伟大的blog程序，虽然臃肿了点，但确实功能强大操作简单，对于我这种懒人和对前端代码完全不熟的程序员来说，wordpress确实是一个非常好的选择。但是问题就出在了webhost上，我使用的webhost刚刚买的时候是50多刀一年，之后每年涨价，今年续费看了下需要100刀左右，这个确实让我心中无数的羊驼奔腾了起来。于是就决定把blog搬离这个地方。</p>
<p>刚开始我只是想找便宜的地方转移wordpress的blog。网上也有很多这类的webhost，第一年进去都很便宜，甚至有1刀一个月的。但是一朝被蛇咬啊，为了防止以后又被迫搬家，于是打消了这个念头。想要便宜和稳定的blog空间，看来是只有伟大的Github。而Github只支持静态程序，那么我也只能放弃wordpress的方便，自己折腾点静态博客程序了。摆在眼前的选择其实很多最基础jekyll，加强版的octopress以及hexo。第一个程序的优点就是简单基础，缺点就是太基础了，而octopress在jekyll的基础之上加上了一些插件，让blog默认的功能变得丰富起来。之后hexo，也是一个自带很多基础功能的程序而且还带了很多非常漂亮的主题，主题控的bloger不妨选择这个，我就特别喜欢他其中的一个默认主题，但是折腾样式的时候jekyll的基本结构都搭建好了，所以就没有更换hexo程序，于是极度痛苦的折腾了一周的css和ruby插件才把现在的blog折腾的和之前的差不多。</p>
<p>简单说下用jekyll在Github上搭建blog的步骤，其实网上很多很多教程，这里记录下就是防止自己忘了把。  </p>
<ol>
<li>首先在<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">http://rubyinstaller.org/downloads/</a>下载ruby和DevKit，安装分别安装他们，然后运行Devkit，分别执行：<br> 1) dk.rb init<br> 2) dk.rb review<br> 3) dk.rb install  </li>
<li>接下来就是安装jekyll了，安装之前推荐更换Gem的源到<a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a> 这样下载程序比较快。具体方式是：<br> 1) gem source -r (url)<br> 2) gem source -a (new url)<br> 3) gem source -u  </li>
<li>然后就可以开始下载jekyll和他的代码高亮程序rouge了，gem install (app name)  </li>
<li>最后记得要设置_config.yml文件，尤其是高亮highlighter: rouge</li>
</ol>
<p>这样，最基础功能的blog就搭建好了，接下来就是把blog从wordpress转移到jekyll了。方法是使用exitwp这个python脚本。  </p>
<ol>
<li>先导出wordpress的数据到一个xml里，这个功能wordpress是自带的。  </li>
<li>然后同个这个脚本把数据转换成markdown文件，放在jekyll生产的_post里面。并且把里面的图片和下载的url替换了。  </li>
<li>最后把wordpress的upload目录下载下来，放到jekyll里面即可。</li>
</ol>
<p>这样我们看到的就是一个最简单的jekyll的blog，要想改变主题，自己去折腾吧。我能做的就是推荐两个jekyll的插件，分别是按日期和分类生成归档网页的，可以在我的<a href="https://github.com/0cch/0CChBlog/tree/master/_plugins" target="_blank" rel="external">Github</a>上看到。</p>
<p>最后要说的是rouge语法高亮有个bug，在使用显示行号linenos参数的时候会出现嵌套错误的问题，解决方法倒是有，不过有了行号之后高亮的显示极其丑陋，所以还是我还是没用这个参数。如果有需求可以使用代码<a href="https://gist.github.com/0cch/775e4a8a94be175cae9c" target="_blank" rel="external">rouge_linenos_patch.rb</a>覆盖”\lib\ruby\gems\2.2.0\gems\jekyll-2.5.3\lib\jekyll\tags\highlight.rb”里对应的函数即可。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Zone.Identifier的一点记录]]></title>
      <url>/2015/06/15/e585b3e4ba8ezone-identifiere79a84e4b880e782b9e8aeb0e5bd95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>自从Windows XP SP2开始，微软对文件加入了Zone.Identifier的数据流，所以这个也不算什么新东西了，最近偶然有机会研究了下所以就记录了下来。<br>说起Zone.Identifier，我们最常见的应用就是在我们从Internet上下载了可执行文件后，运行的时候会弹出如下图的警告窗口：</p>
<p><a href="/uploads/2015/06/20150615150628.png"><img src="/uploads/2015/06/20150615150628.png" alt="20150615150628"></a></p>
<p>弹出这个窗口就是因为Explorer在运行这个文件的时候先检查了Zone.Identifier的数据，发现了如下文本<br>[ZoneTransfer]<br>ZoneId=3</p>
<p>这个ZoneId=3，就是指明这个文件是由Internet上下载的。根据MSDN，这个id有以下几种：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> tagURLZONE &#123; </div><div class="line">  URLZONE_INVALID         = <span class="number">-1</span>,</div><div class="line">  URLZONE_PREDEFINED_MIN  = <span class="number">0</span>,</div><div class="line">  URLZONE_LOCAL_MACHINE   = <span class="number">0</span>,</div><div class="line">  URLZONE_INTRANET,</div><div class="line">  URLZONE_TRUSTED,</div><div class="line">  URLZONE_INTERNET,</div><div class="line">  URLZONE_UNTRUSTED,</div><div class="line">  URLZONE_PREDEFINED_MAX  = <span class="number">999</span>,</div><div class="line">  URLZONE_USER_MIN        = <span class="number">1000</span>,</div><div class="line">  URLZONE_USER_MAX        = <span class="number">10000</span></div><div class="line">&#125; URLZONE; </div></pre></td></tr></table></figure>
<p>查看这个数据流的方法也很简单，用notepad就行了。</p>
<p><a href="/uploads/2015/06/20150615153805.png"><img src="/uploads/2015/06/20150615153805.png" alt="20150615153805"></a></p>
<p>另外如果想给添加或者去除这个数据流，我们这里有两种方法：<br>1.直接读写数据流，其实这个跟普通文件读写没什么两样。<br>2.调用微软提供的com接口，这个比较是规范的。  </p>
<p>对于第一种方法，没什么可说的，无非就是文件操作的那些API。第二种方法我们需要用到以下两个接口：<br>IPersistFile<br>IZoneIdentifier</p>
<p>我们先创建IZoneIdentifier接口，然后query出IPersistFile打开文件，最后读取或者写入文件。<br>代码详见：<a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/04/10463035.aspx" target="_blank" rel="external">http://blogs.msdn.com/b/oldnewthing/archive/2013/11/04/10463035.aspx</a></p>
<p>最后说一下，之所以能有Zone.Identifier这种功能，完全依赖于NTFS文件系统，它允许多个数据流的存在，对它而言，每个数据流无非就是一个属性而已，只不过Zone.Identifier是一个名字为Zone.Identifier的数据流，而文件本身的数据是一个没有命名的数据流而已。用ntfs_study查看，如下图，第一个Data数据没有名字是文件本身的数据，第二个就是Zone.Identifier的数据了。<br><a href="/uploads/2015/06/20150615160110.png"><img src="/uploads/2015/06/20150615160110.png" alt="20150615160110"></a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 8 SpellChecking API]]></title>
      <url>/2015/05/18/windows-8-spellchecking-api/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在Windows 8下，多了一套很有趣的API，SpellChecking，这套API的作用也是一目了然，是做拼写检查的。这么有趣的一套API怎么能不写个程序玩玩呢，于是我写了个小程序，看了看对英文拼写检查的效果，如图。<br><a href="/uploads/2015/05/20150518202121.png"><img src="/uploads/2015/05/20150518202121.png" alt="20150518202121"></a><br>拼写检查会给出三个结果，分别是删除，替换和建议，根据不同的结果我们可以调用不同的接口来获得最佳的体验。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SpellCheck.cpp : Defines the entry point for the console application.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlbase.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlstr.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Spellcheck.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCoInitialize</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	CCoInitialize() &#123;</div><div class="line">		CoInitializeEx(<span class="literal">NULL</span>, COINIT_MULTITHREADED);</div><div class="line">	&#125;</div><div class="line">	~CCoInitialize() &#123; CoUninitialize(); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LPCWSTR kActionStrings[] = &#123;</div><div class="line">	<span class="string">L"CORRECTIVE_ACTION_NONE"</span>,</div><div class="line">	<span class="string">L"CORRECTIVE_ACTION_GET_SUGGESTIONS"</span>,</div><div class="line">	<span class="string">L"CORRECTIVE_ACTION_REPLACE"</span>,</div><div class="line">	<span class="string">L"CORRECTIVE_ACTION_DELETE"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">	CCoInitialize com_init;</div><div class="line">	CComPtr spell_checker_factory;</div><div class="line">	HRESULT hr = CoCreateInstance(__uuidof(SpellCheckerFactory), <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, __uuidof(spell_checker_factory),</div><div class="line">		<span class="keyword">reinterpret_cast</span>(&amp;spell;_checker_factory));</div><div class="line">	<span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	LPCWSTR lang_tag = <span class="string">L"en-US"</span>;</div><div class="line">	BOOL suppored = FALSE;</div><div class="line">	spell_checker_factory-&gt;IsSupported(lang_tag, &amp;suppored;);</div><div class="line">	<span class="keyword">if</span> (!suppored) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	CComPtr spell_checker;</div><div class="line">	hr = spell_checker_factory-&gt;CreateSpellChecker(lang_tag, &amp;spell;_checker);</div><div class="line">	<span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	WCHAR my_text[] = <span class="string">L"Helloo world, I am am new heere, hvae fun"</span>;</div><div class="line">	wprintf(<span class="string">L"%s\n\n"</span>, my_text);</div><div class="line">	CComPtr spell_errors;</div><div class="line">	hr = spell_checker-&gt;Check(my_text, &amp;spell;_errors);</div><div class="line">	<span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	CComPtr spell_error;</div><div class="line">	<span class="keyword">while</span> (spell_errors-&gt;Next(&amp;spell;_error) == S_OK) &#123;</div><div class="line">		ULONG index, length;</div><div class="line">		<span class="keyword">if</span> (SUCCEEDED(spell_error-&gt;get_StartIndex(&amp;index;)) &amp;&amp; SUCCEEDED(spell_error-&gt;get_Length(&amp;length;))) &#123;</div><div class="line">			<span class="function">CStringW <span class="title">tmp_str</span><span class="params">(my_text + index, length)</span></span>;</div><div class="line">			wprintf(<span class="string">L"%-10s    "</span>, tmp_str.GetString());</div><div class="line"></div><div class="line">			CORRECTIVE_ACTION action;</div><div class="line">			<span class="keyword">if</span> (SUCCEEDED(spell_error-&gt;get_CorrectiveAction(&amp;action;))) &#123;</div><div class="line">				wprintf(<span class="string">L"%-40s    "</span>, kActionStrings[action]);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (action == CORRECTIVE_ACTION_DELETE) &#123;</div><div class="line">				wprintf(<span class="string">L"delete %s\n"</span>, tmp_str.GetString());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (action == CORRECTIVE_ACTION_GET_SUGGESTIONS) &#123;</div><div class="line">				CComPtr spell_suggestions;</div><div class="line">				hr = spell_checker-&gt;Suggest(tmp_str.GetString(), &amp;spell;_suggestions);</div><div class="line">				<span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">					<span class="keyword">break</span>;;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				WCHAR *suggestion_str;</div><div class="line">				<span class="keyword">while</span> (spell_suggestions-&gt;Next(<span class="number">1</span>, &amp;suggestion;_str, <span class="literal">NULL</span>) == S_OK) &#123;</div><div class="line">					wprintf(<span class="string">L"%s "</span>, suggestion_str);</div><div class="line">					CoTaskMemFree(suggestion_str);</div><div class="line">				&#125;</div><div class="line">				wprintf(<span class="string">L"\n"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (action == CORRECTIVE_ACTION_REPLACE) &#123;</div><div class="line">				WCHAR *replace_str;</div><div class="line">				hr = spell_error-&gt;get_Replacement(&amp;replace;_str);</div><div class="line">				wprintf(<span class="string">L"%s\n"</span>, replace_str);</div><div class="line">				CoTaskMemFree(replace_str);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		spell_error.Release();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 8.1 GenericMapping对应的ACCESS_MASK]]></title>
      <url>/2015/05/01/windows-8-1-genericmappinge5afb9e5ba94e79a84access_mask/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们在创建或者打开对象的时候需要指定ACCESS_MASK，有的时候为了方便，我们会在ACCESS_MASK的参数中填GenericRead,GenericWrite这样的值，那么对于这些对象来说，这些GenericXXX究竟是什么样的ACCESS_MASK都是保存在对象的GenericMapping中，以下就是Windows 8.1中所有对象的GenericMapping了。<br><a href="/uploads/2015/05/20150502010045.png"><img src="/uploads/2015/05/20150502010045.png" alt="20150502010045"></a></p>
<p>将ACCESS_MASK数字转换成我们看得懂的宏，可以使用我写的一个小网页：<br><a href="http://0cch.com/accessmask.html">http://0cch.com/accessmask.html</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MemMapView —— 查看共享内存映射的工具]]></title>
      <url>/2015/04/18/memmapview-e69fa5e79c8be585b1e4baabe58685e5ad98e698a0e5b084e79a84e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>MemMapView是一个查看Named Shared Memory的工具，它能够枚举系统中的命名共享内存的名称，并且浏览其数据。</p>
<p><a href="/uploads/2015/04/20150418234836.png"><img src="/uploads/2015/04/20150418234836.png" alt="20150418234836"></a></p>
<p>下载：<a href="/uploads/2015/04/MemMapView.zip">MemMapView</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> NTInternals </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[防止Global Windows Hooks注入的一个方法]]></title>
      <url>/2015/04/10/e998b2e6ada2global-windows-hookse6b3a8e585a5e79a84e4b880e4b8aae696b9e6b395/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们都知道SetWindowsHookEx可以设置全局钩子，让自己的dll注入到有窗口的进程中去。注入原理就不再赘述了，网上资料很多，简单看一下调用堆栈方便我们说明怎么去防注入。<br>kernel32!LoadLibraryExW<br>USER32!__ClientLoadLibrary<br>ntdll!KiUserCallbackDispatcher<br>nt!KiCallUserMode<br>nt!KeUserModeCallback<br>win32k!ClientLoadLibrary<br>win32k!xxxLoadHmodIndex<br>win32k!xxxCallHook2<br>win32k!xxxCallHook<br>win32k!xxxCreateWindowEx<br>win32k!NtUserCreateWindowEx<br>nt!KiFastCallEntry<br>ntdll!KiFastSystemCallRet<br>ntdll!KiUserCallbackDispatcher<br>USER32!NtUserCreateWindowEx<br>USER32!_CreateWindowEx  </p>
<p>看着个堆栈，防注入的方法这里就可以大概说出三种：  </p>
<ol>
<li>被创建窗口程序了。  </li>
<li>Hook LoadLibraryExW，判断是否是自己的模块。  </li>
<li>Hook __ClientLoadLibrary，替换为空函数。  </li>
</ol>
<p>第一个方法其实也谈不上方法，也就是说控制台程序就不用担心这些了。第二个方法需要是否是判断自己的模块，这个方法也挺麻烦的，因为你得放过一些不是自己的模块，比如微软的模块。所以这里重点说第三个方法，我们去Hook <strong>ClientLoadLibrary，这样我们就只是避免了全局钩子的注入了。这里我们不用去Inline Hook该函数，Inline Hook比较麻烦。我们的做法是修改user32!apfnDispatch这个数组，直接替换对应于</strong>ClientLoadLibrary所在位置的值。这样摆在我们面前的稍微麻烦一点的事情有两个，一个是确定数组开始的地址，第二就是确定__ClientLoadLibrary在数组中的index。<br>那么分别来解决这两个问题：</p>
<ol>
<li><p>组数的位置<br>其实就是PEB的KernelCallbackTable，虽然PEB没有文档化，但是也没见过他变过什么。所以我们可以写死KernelCallbackTable的偏移。说稍微有点麻烦就是指的，这个偏移在32bit和64bit的系统上是不同的而已，32位系统的偏移是0x2c，64位系统是0x58。另外一个就是获得PEB的方法了，32位程序你既可以写点汇编从fs中获取，也能调用<strong>readfsdword获得，64位程序会麻烦点，你需要先获得TEB，然后从TEB里得到PEB，至于获得TEB的方法，你可以直接调用</strong>readgsqword获得，也可以调用ntdll的NtCurrentTeb获得。</p>
</li>
<li><p><strong>ClientLoadLibrary在数组中的index<br>这个就稍微繁琐点，我们需要把我们关心的系统用windbg带上符号都看一眼才能知道是多少了。<br>我这里提供几个常用系统中</strong>ClientLoadLibrary在数组中的index：<br>XP=0x42，Win7=0x41，Win8.1=0x47</p>
</li>
</ol>
<p>好了，知道了这些，后面的就不用说太详细了，无非就是这三步：  </p>
<ol>
<li>写个空的__ClientLoadLibrary函数MyClientLoadLibrary。  </li>
<li>VirtualProtect设置KernelCallbackTable + index * sizeof(PVOID)地址内存保护属性为PAGE_READWRITE。  </li>
<li>替换__ClientLoadLibrary为MyClientLoadLibrary，再把内存属性换回原来的。  </li>
</ol>
<p>OK，大功告成了。</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[发现File System Minifilter的一处问题]]></title>
      <url>/2015/03/26/e58f91e78eb0file-system-minifiltere79a84e4b880e5a484e997aee9a298/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这两天有个朋友一直问我用用户普通权限连接minifilter server port的问题。给他解答的同时，也发现了这个方面的一个问题。首先说用普通用户权限连接port的方法，其实就是设置FltCreateCommunicationPort参数里ObjectAttributes的SecurityDescriptor，加入everyone的ACE就行了。那么加入everyone的ace你就要指定一个ACCESS_MASK，在MSDN里，介绍了两个可以使用的MASK</p>
<p><a href="/uploads/2015/03/20150326155009.png"><img src="/uploads/2015/03/20150326155009.png" alt="20150326155009"></a></p>
<p>其中FLT_PORT_CONNECT=1，FLT_PORT_ALL_ACCESS=1F0001。看到这里，多数人都可能会认为如果只想让everyone连接上去，不给他所用权限，那么在这个ACE里加入FLT_PORT_CONNECT就可以了。然后就掉到微软的坑里了，和我那个朋友一样:)。</p>
<p><a href="/uploads/2015/03/20150326154028.png"><img src="/uploads/2015/03/20150326154028.png" alt="20150326154028"></a></p>
<p>实际上指定FLT_PORT_CONNECT会让R3的程序无法连接驱动的port，原因就是FilterConnectCommunicationPort函数没有让你指定你需求的ACCESS，而是在底层打开port的时候直接请求FLT_PORT_ALL_ACCESS。这个时候如果你的ACE里面是FLT_PORT_CONNECT，那当然无法连接上去了。所以这里把ACE里的ACCESS_MASK设置为FLT_PORT_ALL_ACCESS就行了。</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windbg查看Object Hook的脚本]]></title>
      <url>/2015/03/24/windbge69fa5e79c8bobject-hooke79a84e8849ae69cac/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>学好Windbg，基本上可以代替很多工具，这次分享一个查看Object Hook的脚本：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">r @$t0 = <span class="number">2</span>;</div><div class="line">r? @$t1 = ((nt!_OBJECT_TYPE**)@@(nt!ObTypeIndexTable))[@$t0];</div><div class="line"></div><div class="line">.<span class="keyword">while</span> ((@$t1 &amp; <span class="number">0xffffffff</span>) != <span class="number">0</span>) &#123;</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"Type Name:%-20msu\t"</span>, @@C++(&amp;@$t1-&gt;Name);</div><div class="line">	.<span class="built_in">printf</span> /D <span class="string">"detail\n"</span>, @$t1;</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"DumpProcedure        : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.DumpProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"OpenProcedure        : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.OpenProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"CloseProcedure       : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.CloseProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"DeleteProcedure      : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.DeleteProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"ParseProcedure       : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.ParseProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"SecurityProcedure    : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.SecurityProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"QueryNameProcedure   : %y\n"</span>, @@C++(@$t1-&gt;TypeInfo.QueryNameProcedure);</div><div class="line">	.<span class="built_in">printf</span> <span class="string">"OkayToCloseProcedure : %y\n\n"</span>, @@C++(@$t1-&gt;TypeInfo.OkayToCloseProcedure);</div><div class="line">	</div><div class="line">	r @$t0 = @$t0 + <span class="number">1</span>;</div><div class="line">	r? @$t1 = ((nt!_OBJECT_TYPE**)@@(nt!ObTypeIndexTable))[@$t0];</div><div class="line">&#125;;</div><div class="line"> </div></pre></td></tr></table></figure>
<p><a href="/uploads/2015/03/20150324095806.png"><img src="/uploads/2015/03/20150324095806.png" alt="20150324095806"></a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个解析INI文件的类]]></title>
      <url>/2015/03/17/e4b880e4b8aae8a7a3e69e90inie69687e4bbb6e79a84e7b1bb/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>虽然微软强烈推荐用注册表代替ini来记录软件配置，但是由于写ini文件的方便性和可读性的优势，还是让很多程序员选择把配置记录到ini文件中。但是用Windows API操作ini文件有个缺点，就是每次调用如GetPrivateProfileInt，WritePrivateProfileString等函数，都会产生一次文件打开关闭以及读写操作，并且对ini文件重新解析，这是非常低效的。所以如果需要大量的操作ini文件，例如需要读取很多配置信息以启动软件，那么这样的用法无疑会增加软件的冷启动时间。为了解决这个问题，我们就需要自己写一个模块，他能够一次性读取并且解析好ini文件。在需要读取的时候直接从内存读取，需要些的时候先全部写到内存里，最后在刷新到文件上。所以我写了一个ParseIni的类，来完成这个工作。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __PARSE_INI_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __PARSE_INI_H__</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INI_KEY_LINE			1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INI_SECTION_LINE		2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INI_COMMENT_LINE		3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INI_NC_KEY_LINE			4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INI_WORNG_SYNTAX		0</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CParseIniA</span> &#123;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	CParseIniA() &#123;&#125;</div><div class="line">	~CParseIniA() &#123;&#125;</div><div class="line"></div><div class="line">	<span class="function">BOOL <span class="title">Open</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;IniPath;, BOOL OpenAlways = TRUE)</span></span>;</div><div class="line">	<span class="function"><span class="built_in">vector</span> <span class="title">EnumSectionNames</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="built_in">vector</span> <span class="title">EnumKeyNamesInSection</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;)</span></span>;</div><div class="line">	<span class="function"><span class="built_in">string</span> <span class="title">GetSectionKeyValue</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;DefaultValue;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetSectionKeyValueInt</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">int</span> DefaultValue)</span></span>;</div><div class="line">    <span class="function">BOOL <span class="title">SetSectionKeyValueInt</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">int</span> value, BOOL CreateNew = TRUE)</span></span>;</div><div class="line">	<span class="function">BOOL <span class="title">SetSectionKeyValue</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;Value;, BOOL CreateNew = TRUE)</span></span>;</div><div class="line">	<span class="function">BOOL <span class="title">Flush</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">VOID <span class="title">Close</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="function">ULONG <span class="title">SyntaxCheck</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyLine;)</span></span>;</div><div class="line">	<span class="built_in">vector</span>::<span class="function">iterator <span class="title">CreateSection</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;)</span></span>;</div><div class="line">	<span class="function">VOID <span class="title">CreateKeyValue</span><span class="params">(<span class="built_in">vector</span>::iterator it, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;Value;)</span></span>;</div><div class="line">	<span class="function">BOOL <span class="title">IsSection</span><span class="params">(<span class="built_in">string</span> &amp;Line;)</span></span>;</div><div class="line">	<span class="function">BOOL <span class="title">SetKeyValue</span><span class="params">(<span class="built_in">string</span> &amp;Line;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;Value;)</span></span>;</div><div class="line">	<span class="function"><span class="built_in">string</span> <span class="title">GetKeyValue</span><span class="params">(<span class="built_in">string</span> &amp;Line;)</span></span>;</div><div class="line">	<span class="function"><span class="built_in">string</span> <span class="title">GetSectionName</span><span class="params">(<span class="built_in">string</span> &amp;Line;)</span></span>;</div><div class="line">	<span class="function"><span class="built_in">string</span> <span class="title">GetKeyName</span><span class="params">(<span class="built_in">string</span> &amp;Line;)</span></span>;</div><div class="line">	<span class="function"><span class="built_in">string</span> <span class="title">trim</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s ,<span class="keyword">const</span> <span class="built_in">string</span>&amp; drop = <span class="string">" "</span>)</span></span>;</div><div class="line">	<span class="built_in">vector</span> m_IniContext; </div><div class="line">	<span class="built_in">string</span> m_IniPath;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> BOOL CParseIniA::Open( <span class="keyword">const</span> <span class="built_in">string</span> &amp;IniPath;, BOOL OpenAlways)</div><div class="line">&#123;</div><div class="line">	ifstream IniFile(IniPath.c_str());</div><div class="line">	INT FileSize;</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!IniFile.is_open()) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!OpenAlways) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		m_IniPath = IniPath;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> TRUE;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	m_IniPath = IniPath;</div><div class="line"></div><div class="line">	IniFile.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios_base::end);</div><div class="line">	FileSize = IniFile.tellg();</div><div class="line">	IniFile.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios_base::beg);</div><div class="line">	<span class="keyword">if</span> (FileSize == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> TRUE;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (IniFile) &#123;</div><div class="line">		<span class="built_in">string</span> IniLine;</div><div class="line">		getline(IniFile, IniLine);</div><div class="line"></div><div class="line">		m_IniContext.push_back(IniLine);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	it = m_IniContext.end();</div><div class="line">    it--;</div><div class="line">	<span class="keyword">while</span> (trim(*it).empty()) &#123;</div><div class="line"></div><div class="line">		m_IniContext.pop_back();</div><div class="line">		it = m_IniContext.end();</div><div class="line">        it--;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> BOOL CParseIniA::IsSection( <span class="built_in">string</span> &amp;Line; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> SectionLine = trim(Line);</div><div class="line">	BOOL Ret = FALSE;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (SectionLine[<span class="number">0</span>] == <span class="string">'['</span> &amp;&amp; SectionLine[SectionLine.length() - <span class="number">1</span>] == <span class="string">']'</span>) &#123;</div><div class="line"></div><div class="line">		Ret = TRUE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> Ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">vector</span> CParseIniA::EnumSectionNames()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span> SectionNames;</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (it = m_IniContext.begin(); it != m_IniContext.end(); ++it) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (IsSection(*it)) &#123;</div><div class="line"></div><div class="line">			SectionNames.push_back(GetSectionName(*it));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> SectionNames;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">vector</span> CParseIniA::EnumKeyNamesInSection(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line">	<span class="built_in">vector</span> KeyNames;</div><div class="line">	ULONG ScanState = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (it = m_IniContext.begin(); it != m_IniContext.end(); ++it) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (ScanState == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!IsSection(*it) || GetSectionName(*it) != SectionName) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ScanState = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ScanState == <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (IsSection(*it)) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			KeyNames.push_back(GetKeyName(*it));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> KeyNames;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">string</span> CParseIniA::GetSectionName( <span class="built_in">string</span> &amp;Line; )</div><div class="line">&#123;</div><div class="line">	INT Count = Line.length();</div><div class="line">	INT i;</div><div class="line">	BOOL Start = FALSE;</div><div class="line">	<span class="built_in">string</span> SectionName;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Count; i++) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (Line[i] == <span class="string">'['</span>) &#123;</div><div class="line"></div><div class="line">			Start = TRUE;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Line[i] == <span class="string">']'</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (Start) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (Start) &#123;</div><div class="line"></div><div class="line">				SectionName += Line[i];</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> SectionName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">string</span> CParseIniA::GetKeyName( <span class="built_in">string</span> &amp;Line; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> KeyName;</div><div class="line"></div><div class="line">	KeyName = Line.substr(<span class="number">0</span>, Line.find_first_of(<span class="string">'='</span>));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> trim(KeyName);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">string</span> CParseIniA::trim(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">string</span>&amp; drop)</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="built_in">string</span> <span class="title">t</span><span class="params">(s)</span></span>;</div><div class="line">	<span class="built_in">string</span> r = t.erase(t.find_last_not_of(drop) + <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> r.erase(<span class="number">0</span>,r.find_first_not_of(drop));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> CParseIniA::GetSectionKeyValueInt( <span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">int</span> DefaultValue )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> DefaultValueString[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    sprintf_s(DefaultValueString, <span class="string">"%d"</span>, DefaultValue);</div><div class="line">    <span class="built_in">string</span> ValueString = GetSectionKeyValue(SectionName, KeyName, DefaultValueString);</div><div class="line">    <span class="keyword">return</span> atoi(ValueString.c_str());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">string</span> CParseIniA::GetSectionKeyValue(<span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;DefaultValue; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line">	ULONG ScanState = <span class="number">0</span>;</div><div class="line">	<span class="built_in">string</span> Value = DefaultValue;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (it = m_IniContext.begin(); it != m_IniContext.end(); ++it) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (ScanState == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!IsSection(*it) || GetSectionName(*it) != SectionName) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ScanState = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ScanState == <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (IsSection(*it)) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (SyntaxCheck(*it) != INI_KEY_LINE) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (GetKeyName(*it) == KeyName) &#123;</div><div class="line"></div><div class="line">				Value = GetKeyValue(*it);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> Value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">string</span> CParseIniA::GetKeyValue( <span class="built_in">string</span> &amp;Line; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> KeyName;</div><div class="line"></div><div class="line">	KeyName = Line.substr(Line.find_first_of(<span class="string">'='</span>) + <span class="number">1</span>);</div><div class="line"> </div><div class="line">	<span class="keyword">return</span> trim(KeyName);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> BOOL CParseIniA::SetKeyValue( <span class="built_in">string</span> &amp;Line;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;Value; )</div><div class="line">&#123;</div><div class="line">	INT Pos = Line.find_first_of(<span class="string">'='</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (Pos == <span class="built_in">string</span>::npos) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Pos = Line.find_first_not_of(<span class="string">' '</span>, Pos + <span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (Pos == <span class="built_in">string</span>::npos) &#123;</div><div class="line"></div><div class="line">		Pos = Line.find_first_of(<span class="string">'='</span>) + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Line.erase(Pos);</div><div class="line">	Line += Value;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> BOOL CParseIniA::SetSectionKeyValueInt( <span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">int</span> Value, BOOL CreateNew <span class="comment">/*= TRUE*/</span> )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> ValueString[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    sprintf_s(ValueString, <span class="string">"%d"</span>, Value);</div><div class="line">    <span class="keyword">return</span> SetSectionKeyValue(SectionName, KeyName, ValueString, CreateNew);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> BOOL CParseIniA::SetSectionKeyValue( <span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;Value;, BOOL CreateNew )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line">	ULONG ScanState = <span class="number">0</span>;</div><div class="line">	BOOL Ret = FALSE;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (it = m_IniContext.begin(); it != m_IniContext.end(); ++it) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (ScanState == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!IsSection(*it) || GetSectionName(*it) != SectionName) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ScanState = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ScanState == <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (IsSection(*it)) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (SyntaxCheck(*it) == INI_KEY_LINE || SyntaxCheck(*it) == INI_NC_KEY_LINE) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (GetKeyName(*it) == KeyName) &#123;</div><div class="line"></div><div class="line">					Ret = SetKeyValue(*it, Value);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (CreateNew &amp;&amp; !Ret) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (ScanState == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">			it = CreateSection(SectionName);</div><div class="line">			CreateKeyValue(it, KeyName, Value);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ScanState == <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">			it--;</div><div class="line">			CreateKeyValue(it, KeyName, Value);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Ret = TRUE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> Ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> BOOL CParseIniA::Flush()</div><div class="line">&#123;</div><div class="line">	ofstream IniFile(m_IniPath.c_str());</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!IniFile.is_open()) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (it = m_IniContext.begin(); it != m_IniContext.end(); ++it) &#123;</div><div class="line"></div><div class="line">		IniFile &lt;&lt; it-&gt;c_str() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> VOID CParseIniA::Close()</div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">vector</span>::iterator CParseIniA::CreateSection( <span class="keyword">const</span> <span class="built_in">string</span> &amp;SectionName; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> FullSectionName;</div><div class="line">	<span class="built_in">vector</span>::iterator it;</div><div class="line"></div><div class="line">	FullSectionName += <span class="string">'['</span>;</div><div class="line">	FullSectionName += SectionName;</div><div class="line">	FullSectionName += <span class="string">']'</span>;</div><div class="line"></div><div class="line">	m_IniContext.push_back(FullSectionName);</div><div class="line">	it = m_IniContext.begin() + m_IniContext.size() - <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> it;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> VOID CParseIniA::CreateKeyValue( <span class="built_in">vector</span>::iterator it, <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyName;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;Value; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> KeyInfo;</div><div class="line"></div><div class="line">	KeyInfo += KeyName;</div><div class="line">	KeyInfo += <span class="string">" = "</span>;</div><div class="line">	KeyInfo += Value;</div><div class="line">	<span class="keyword">while</span> (it != m_IniContext.begin()) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!trim(*it).empty()) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		it--;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	m_IniContext.insert(it + <span class="number">1</span>, KeyInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> ULONG CParseIniA::SyntaxCheck( <span class="keyword">const</span> <span class="built_in">string</span> &amp;KeyLine; )</div><div class="line">&#123;</div><div class="line">	<span class="built_in">string</span> Line = trim(KeyLine);</div><div class="line">	INT Pos, CommentPos1, CommentPos2;</div><div class="line">	<span class="built_in">string</span> KeyName;</div><div class="line">	<span class="built_in">string</span> Value;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (IsSection(Line)) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> INI_SECTION_LINE;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (Line[<span class="number">0</span>] == <span class="string">';'</span> || Line[<span class="number">0</span>] == <span class="string">'#'</span>) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> INI_COMMENT_LINE;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">		Pos = Line.find_first_of(<span class="string">'='</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">string</span>::npos == Pos) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> INI_WORNG_SYNTAX;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		KeyName = trim(Line.substr(<span class="number">0</span>, Pos));</div><div class="line">		<span class="keyword">if</span> (KeyName.empty()) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> INI_WORNG_SYNTAX;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Value = trim(Line.substr(Pos + <span class="number">1</span>));</div><div class="line">		<span class="keyword">if</span> (Value.empty()) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> INI_NC_KEY_LINE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		CommentPos1 = Value.find_first_of(<span class="string">';'</span>);</div><div class="line">		CommentPos2 = Value.find_first_of(<span class="string">'#'</span>);</div><div class="line">		<span class="keyword">if</span> (CommentPos1 == <span class="built_in">string</span>::npos &amp;&amp; CommentPos2 == <span class="built_in">string</span>::npos) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> INI_KEY_LINE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		CommentPos1 = CommentPos1 &lt; CommentPos2 ? CommentPos1 : CommentPos2;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (Value.erase(CommentPos1).empty()) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> INI_NC_KEY_LINE;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> INI_KEY_LINE;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Windows未使用内存原理和应用]]></title>
      <url>/2015/02/02/e4bdbfe794a8windowse69caae4bdbfe794a8e58685e5ad98e58e9fe79086e5928ce5ba94e794a8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="/uploads/2015/02/20150202104522.png"><img src="/uploads/2015/02/20150202104522.png" alt="20150202104522"></a></p>
<p>配置4G内存，并且使用过32bit Windows系统的人都知道，虽然自己有4G的物理内存，但是Windows还是明确的告诉你，它只会用其中的3GB多，还有几百MB物理内存是用不到的，即使你开启了PAE。当然如果你用的服务器系统，那就当我没说。至于微软为啥服务端32bit系统可以用4GB以上，而限制普通客户端系统，按照Windows Internals的说法，是为了考虑驱动程序的兼容性问题。我这里想介绍的是，如何使用这些没有使用的物理内存。</p>
<p><a href="/uploads/2015/02/20150202105145.png"><img src="/uploads/2015/02/20150202105145.png" alt="20150202105145"></a></p>
<p>首先，要想使用这些内存，我们必须找到他们，但是找到他们之前，我们还得了解物理内存地址是怎么分配。物理内存地址除了要给RAM提供地址之外，还需要给设备内存提供地址。为了考虑驱动的兼容性，这些设备内存被分配到4G以内的地址上，这样一来，就会有部分RAM不得不分配到4G以外的地址上了，所以我们无法使用它们。</p>
<p><a href="/uploads/2015/02/20150202110332.png"><img src="/uploads/2015/02/20150202110332.png" alt="20150202110332"></a></p>
<p>知道了这些，我们就需要聚焦到如何访问超过4GB内存的方法上了。不过方法也很简单，就是MmMapIoSpace函数，这个函数可以访问64bit的物理内存地址，并且将其映射到我们可以访问的虚拟内存上。</p>
<p>说到这里，程序的代码仿佛就呈现在脑海了，不过等等，还忽略了一个最困难的问题！到底有存在多少RAM内存在4GB以上的地址空间呢？说这个问题最为困难，是因为你需要根据不同的情况做出不同的选择。</p>
<p><a href="/uploads/2015/02/20150202095553.png"><img src="/uploads/2015/02/20150202095553.png" alt="20150202095553"></a></p>
<p>1.主板支持通过Bios查询RAM内存分配情况，在这种情况下，我们可以调用中断来获得最真实的RAM分配表。<br>2.主板不支持通过Bios查询RAM内存分配情况，那么我们很无奈的必须采用一个简单粗暴的方法，Write &amp; Test来获得4GB以外到底有多少RAM可用。  </p>
<p>对于第二种情况，我们的做法是通过MmMapIoSpace函数，把4GB以上的物理地址逐一映射到虚拟内存中，然后写入特殊值，写入后马上读取，看是否写入成功，成功则证明RAM可用。<br>对于第一种情况，这里又要分为两个分支：<br>首先你的系统是NT6内核以下的情况，这时可以调用Ke386CallBios函数，调用中断接口。<br>而对于NT6的内核，我们需要调用新的x86BiosCall等一套函数。<br>需要调用的中断函数是0x15以及AX=E820，通过这个中断和功能号，我们就能获得SYSTEM MEMORY MAP  </p>
<p>下面附带上这个功能的使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">INT 15 - newer BIOSes - GET SYSTEM MEMORY MAP  </div><div class="line">   AX = E820h  </div><div class="line">   EAX = 0000E820h  </div><div class="line">   EDX = 534D4150h (&apos;SMAP&apos;)  </div><div class="line">   EBX = continuation value or 00000000h to start at beginning of map  </div><div class="line">   ECX = size of buffer for result, in bytes (should be &gt;= 20 bytes)  </div><div class="line">   ES:DI -&gt; buffer for result (see #00581)  </div><div class="line">Return: CF clear if successful  </div><div class="line">    EAX = 534D4150h (&apos;SMAP&apos;)  </div><div class="line">    ES:DI buffer filled  </div><div class="line">    EBX = next offset from which to copy or 00000000h if all done  </div><div class="line">    ECX = actual length returned in bytes  </div><div class="line">   CF set on error  </div><div class="line">    AH = error code (86h) (see #00496 at INT 15/AH=80h)  </div><div class="line">Notes:   originally introduced with the Phoenix BIOS v4.0, this function is  </div><div class="line">    now supported by most newer BIOSes, since various versions of Windows  </div><div class="line">    call it to find out about the system memory  </div><div class="line">   a maximum of 20 bytes will be transferred at one time, even if ECX is  </div><div class="line">    higher; some BIOSes (e.g. Award Modular BIOS v4.50PG) ignore the  </div><div class="line">    value of ECX on entry, and always copy 20 bytes  </div><div class="line">   some BIOSes expect the high word of EAX to be clear on entry, i.e.  </div><div class="line">    EAX=0000E820h  </div><div class="line">   if this function is not supported, an application should fall back  </div><div class="line">    to AX=E802h, AX=E801h, and then AH=88h  </div><div class="line">   the BIOS is permitted to return a nonzero continuation value in EBX  </div><div class="line">    and indicate that the end of the list has already been reached by  </div><div class="line">    returning with CF set on the next iteration  </div><div class="line">   this function will return base memory and ISA/PCI memory contiguous  </div><div class="line">    with base memory as normal memory ranges; it will indicate  </div><div class="line">    chipset-defined address holes which are not in use and motherboard  </div><div class="line">    memory-mapped devices, and all occurrences of the system BIOS as  </div><div class="line">    reserved; standard PC address ranges will not be reported  </div><div class="line">SeeAlso: AH=C7h,AX=E801h&quot;Phoenix&quot;,AX=E881h,MEM xxxxh:xxx0h&quot;ACPI&quot;  </div><div class="line">Format of Phoenix BIOS system memory map address range descriptor:  </div><div class="line">Offset   Size   Description   (Table 00580)  </div><div class="line">00h   QWORD   base address  </div><div class="line">08h   QWORD   length in bytes  </div><div class="line">10h   DWORD   type of address range (see #00581)  </div><div class="line">(Table 00581)  </div><div class="line">Values for System Memory Map address type:  </div><div class="line">01h   memory, available to OS  </div><div class="line">02h   reserved, not available (e.g. system ROM, memory-mapped device)  </div><div class="line">03h   ACPI Reclaim Memory (usable by OS after reading ACPI tables)  </div><div class="line">04h   ACPI NVS Memory (OS is required to save this memory between NVS  </div><div class="line">    sessions)  </div><div class="line">other   not defined yet -- treat as Reserved  </div><div class="line">（from http://www.ctyme.com/intr/rb-1741.htm</div></pre></td></tr></table></figure></p>
<p>获得了4GB内存以上的RAM范围以后，再加上MmMapIoSpace，我们就能够访问系统没有使用的内存了。</p>
<p>说了这么多，这个有什么具体应用呢？我见过最多利用这个特性做的产品就是内存盘了。也没看到什么用的特别好的其他应用的方面，我想原因主要有三点，第一，即使获得了物理内存，最后还是映射了4GB以内的虚拟内存上，内存操作终究无法访问直接更多物理内存；第二，这部分内存没有系统统一管理，同类型的软件无法共存；第三，有4G内存赶紧快去换个64位系统吧=v=。</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[分享SSD TRIM代码]]></title>
      <url>/2015/01/31/e58886e4baabssd-trime4bba3e7a081/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>14年的早些时候发布过<a href="/tips/2014/02/11/ssd-trime58a9fe883bde79a84e4b880e4ba9be8aeb0e5bd95.html">SSD TRIM技术的文章</a>，文章里面记录了关于TRIM技术的一些东西，其中就包括在Windows上如何使用TRIM。当然Windows 7及其更高版本的系统都是自带TRIM功能的，只有XP没有这个功能，当时我就写了个工具，在XP下进行TRIM。现在想想确实也没啥意思，就把代码分享说来吧。</p>
<p><a href="https://github.com/0cch/SSDTrim.git" target="_blank" rel="external">https://github.com/0cch/SSDTrim.git</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用Service Tag区分共享类型服务线程]]></title>
      <url>/2015/01/24/e794a8service-tage58cbae58886e585b1e4baabe7b1bbe59e8be69c8de58aa1e7babfe7a88b/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Windows中有一种共享类型的服务，这种服务的特点是，他们可能同时有多个不同服务运行在同一个进程内。这些服务通常都是一些dll，他们被加载到宿主进程内运行，这个宿主进程我们见到最多的就是svchost了，如下图所示：</p>
<p><a href="/uploads/2015/01/20150124220922.png"><img src="/uploads/2015/01/20150124220922.png" alt="20150124220922"></a></p>
<p>Windows这样做的好处就是尽可能的节约资源，当然不好地方就是，如果出了问题那么难以调试和定位。所以，为了更好的定位共享服务的工作线程，微软支持了一种叫做Service Tag的东西。Service Tag简单的说就是标注线程属于哪个服务的，这个是由Service Control Manager支持的。在TEB中有一个SubProcessTag字段，每当一个服务注册并且运行的时候，Service Control Manager会分配给服务线程一个id，这个id就是SubProcessTag，它能够唯一的表示服务，而且这个值是一直都被继承的，也就是说，如果服务线程再创建线程，那么新的线程的SubProcessTag也会被标记为父线程的id。当然，也有一种例外，那就是如果用了线程池，就不会继承SubProcessTag了。</p>
<p>在Advapi32.dll中有一个函数，叫做I_QueryTagInformation，这个函数可以根据SubProcessTag去查询Service的信息，有兴趣的同学可以看看下面的链接：<a href="http://wj32.org/wp/2010/03/30/howto-use-i_querytaginformation/" target="_blank" rel="external">http://wj32.org/wp/2010/03/30/howto-use-i_querytaginformation/</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[总结和展望：东方不亮西方亮]]></title>
      <url>/2015/01/11/e680bbe7bb93e5928ce5b195e69c9befbc9ae4b89ce696b9e4b88de4baaee8a5bfe696b9e4baae/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一转眼，一年又过去了，又到了总结过去的一年，计划新年的时候了。过去的一年里，最大的感觉是，好想经过了好多事情，但却没有经历什么事情。说起来挺绕的，慢慢来回忆下吧。</p>
<p>首先是工作上的事情，由于在前年整个部门被裁，去了一个价值观上和自己的很不同公司。事实证明，这确实不是什么好的决定，吐槽的事情就不细说了。之所以没换公司，是因为我觉得在北京待不了多久了，跳槽只会坑了其他的公司。所以也就勉强的继续干着。虽说是勉强的干活，但是工作的时间还是将近占用了每天的三分之二。工作的内容也没有什么创造性，基本上就是在可怕的代码里改来改去，当然了，也许这也是他这么可怕的原因吧。</p>
<p>多米乐骨效应，工作占用大量的时间，也导致我2014年的计划大打折扣。脚本编译器，写了一半听了下来，minikernel也没什么进展，唯一比较让人舒心的是，0CCh的山寨小工具，还是在慢慢的变多，其中还有花了大量精力写的everything_study，不过由于算法还没没达到目标效果（没有everything快，数据库也比他的大很多），所以没有放出来，也就是自己在用。确实也是因为工作的原因，没有太多时间和精力去改造文件id间相互索引的算法了。再说说健身，同样的理由，工作时间长影响身体和健身，现在25分钟基本上就跑个4.7km，13年的最后，都是能跑5km多点的。</p>
<p>不过东方不亮西方亮了，有失意的地方，总会在其他地方补回来=v=，生命中终于又多了一个人，能让我更加坚定的回老家了。所以，今年的计划特别难定，因为不知道回老家后到底是什么个情况。只能说回去之前继续坚持着，回去之后去找个心仪的事情。然后，编译器和minikernel希望能继续写，编译器希望能写玩，因为并不难。minikernel就比较复杂了，只能说能写多少写多少。另外我也特别喜欢山寨各种各样的小工具，自己造轮子自己用，赶紧挺开心的。健身方面，回去前照旧，回去后尽量保持。</p>
<p>其实生活上14年真的还算挺开心的，和sysdbg的博主一起还打完了好几个ps3的游戏。比如《神秘海域3》，《第一次世界大战——勇敢的心》等等=v=，还有他13年欠我的金钱豹还没请我吃呢…</p>
<p>最后，我还是希望2015年，我自己和家人、亲戚以及基友们，身体健康，阖家辛福快乐，工作顺利发大财！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Python获得文件版本信息]]></title>
      <url>/2014/12/21/pythone88eb7e5be97e69687e4bbb6e78988e69cace4bfa1e681af/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Python干啥都挺方便的，出了调用win32的api。当然了，可以用pywin32这种库。但我不喜欢为了一两个api又给简单的东西加一堆依赖。比如获取文件版本，本来想在网上找个函数复制过去用得了，却发现还真没啥好用的。无奈自己就写了一个。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VS_FIXEDFILEINFO</span><span class="params">(Structure)</span>:</span></div><div class="line">	_fields_ = [</div><div class="line">		(<span class="string">"dwSignature"</span>, c_int), </div><div class="line">		(<span class="string">"dwStrucVersion"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileVersionMS"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileVersionLS"</span>, c_int),</div><div class="line">		(<span class="string">"dwProductVersionMS"</span>, c_int),</div><div class="line">		(<span class="string">"dwProductVersionLS"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileFlagsMask"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileFlags"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileOS"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileType"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileSubtype"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileDateMS"</span>, c_int),</div><div class="line">		(<span class="string">"dwFileDateLS"</span>, c_int)</div><div class="line">	]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LOWORD</span><span class="params">(dword)</span>:</span> <span class="keyword">return</span> dword &amp; <span class="number">0x0000ffff</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">HIWORD</span><span class="params">(dword)</span>:</span> <span class="keyword">return</span> dword &gt;&gt; <span class="number">16</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFileVersion</span><span class="params">(filename)</span>:</span></div><div class="line">	size = windll.version.GetFileVersionInfoSizeW(filename, <span class="keyword">None</span>)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> size:</div><div class="line">		<span class="keyword">return</span> <span class="string">''</span></div><div class="line">	res = create_string_buffer(size)</div><div class="line">	windll.version.GetFileVersionInfoW(filename, <span class="keyword">None</span>, size, res)</div><div class="line">	r = VS_FIXEDFILEINFO()</div><div class="line">	l = c_uint()</div><div class="line">	p = c_void_p()</div><div class="line">	windll.version.VerQueryValueW(res, <span class="string">'\\'</span>, byref(p), byref(l));</div><div class="line">	memmove(byref(r), p, sizeof(VS_FIXEDFILEINFO))</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> l.value:</div><div class="line">		<span class="keyword">return</span> <span class="string">''</span></div><div class="line">	</div><div class="line">	<span class="keyword">return</span> (<span class="string">'%d.%d.%d.%d'</span> % (HIWORD(r.dwFileVersionMS), LOWORD(r.dwFileVersionMS), </div><div class="line">		HIWORD(r.dwProductVersionLS), LOWORD(r.dwProductVersionLS)));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[DNSSwitcher —— 一个方便切换DNS的小工具]]></title>
      <url>/2014/12/14/dnsswitcher-e4b880e4b8aae696b9e4bebfe58887e68da2dnse79a84e5b08fe5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近百度也推出的自己的公共DNS，现在可供我们选择使用的DNS也多了起来。但是每次更改DNS都输入IP，确实挺麻烦的。于是我周末在家就写了个切换DNS的小程序，绿色且易用，能在配置好的DNS直接切换，当然也能切换回自动获取DNS的模式。至于配置文件，可以手动修改，也可以通过程序来修改，都挺方便的。</p>
<p><a href="/uploads/2014/12/20141214190237.png"><img src="/uploads/2014/12/20141214190237.png" alt="20141214190237"></a></p>
<p>配置文件格式如<br>[Google DNS]<br>dns1=8.8.8.8<br>dns2=8.8.4.4<br>[Open DNS]<br>dns1=208.67.222.222<br>dns2=208.67.220.220<br>…  </p>
<p>下载：<a href="/uploads/2014/12/DNSSwitcher.zip">DNSSwitcher</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[tcpview_study——查看TCP连接工具]]></title>
      <url>/2014/12/07/tcpview_study-e69fa5e79c8btcpe8bf9ee68ea5e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>tcpview_study是一款监控TCP连接的小工具，实际上功能就是山寨的sysinternals工具集的tcpview，功能也差不多，主要是没事拿来练练手。</p>
<p><a href="/uploads/2014/12/20141207175522.png"><img src="/uploads/2014/12/20141207175522.png" alt="20141207175522"></a></p>
<p>下载：<a href="/uploads/2014/12/tcpview_study.zip">tcpview_study</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[获得使用打开保存对话框操作文件的记录]]></title>
      <url>/2014/11/17/e88eb7e5be97e4bdbfe794a8e68993e5bc80e4bf9de5ad98e5afb9e8af9de6a186e6938de4bd9ce69687e4bbb6e79a84e8aeb0e5bd95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天无意中看到了HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\OpenSavePidlMRU这个键值的用途，虽然感觉没啥实际用途，但是也挺有趣的，于是写了个小程序读取它。这个键值的意义非常明确，就是记录打开保存对话框的最近操作的文件的PIDL。所以我们可以通过PIDL来获得文件路径，就这么简单，确实没啥特别的实际用途吧，就当娱乐了。枚举的效果如下：</p>
<p><a href="/uploads/2014/11/20141117231005.png"><img src="/uploads/2014/11/20141117231005.png" alt="20141117231005"></a></p>
<p>代码也很简单：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlbase.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlstr.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Shlobj.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"shell32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> TCHAR mru_path[] = TEXT(<span class="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSavePidlMRU"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnumMRUValue</span><span class="params">(HKEY subkey, <span class="built_in">std</span>::<span class="built_in">vector</span> &amp;mru;_files)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	ULONG i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">	TCHAR value_name[MAX_PATH];</div><div class="line">	ULONG value_name_length = MAX_PATH;</div><div class="line">	UCHAR data_buffer[<span class="number">1024</span>];</div><div class="line">	ULONG data_length = <span class="keyword">sizeof</span>(data_buffer);</div><div class="line">	<span class="keyword">while</span> (RegEnumValue(subkey, i++, value_name, &amp;value;_name_length, <span class="number">0</span>, <span class="literal">NULL</span>, data_buffer, &amp;data;_length) == ERROR_SUCCESS)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (_tcscmp(value_name, TEXT(<span class="string">"MRUListEx"</span>)) != <span class="number">0</span>) &#123;</div><div class="line">			CComPtr malloc_ptr;</div><div class="line">			HRESULT hr = SHGetMalloc(&amp;<span class="built_in">malloc</span>;_ptr);</div><div class="line">			LPITEMIDLIST file_pidl = (LPITEMIDLIST)malloc_ptr-&gt;Alloc(<span class="keyword">sizeof</span>(UCHAR) + data_length);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (file_pidl) &#123;</div><div class="line">				<span class="built_in">memcpy</span>(file_pidl, data_buffer, data_length);</div><div class="line">				WCHAR file_path[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</div><div class="line">				<span class="keyword">if</span> (SHGetPathFromIDList(file_pidl, file_path)) &#123;</div><div class="line">					mru_files.push_back(file_path);</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">				malloc_ptr-&gt;Free(file_pidl);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		value_name_length = MAX_PATH;</div><div class="line">		data_length = <span class="keyword">sizeof</span>(data_buffer);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">PrintMRUFiles</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	HKEY subkey;</div><div class="line">	LSTATUS l = RegOpenKeyEx(HKEY_CURRENT_USER, mru_path, <span class="number">0</span>, KEY_READ, &amp;subkey;);</div><div class="line">	<span class="keyword">if</span> (l != ERROR_SUCCESS) &#123;</div><div class="line">		<span class="keyword">return</span> FALSE;</div><div class="line">	&#125;</div><div class="line">	ULONG i = <span class="number">0</span>;</div><div class="line">	TCHAR key_name[MAX_PATH];</div><div class="line">	ULONG key_name_length = MAX_PATH;</div><div class="line">	<span class="keyword">while</span> (RegEnumKeyEx(subkey, i++, key_name, &amp;key;_name_length, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) == ERROR_SUCCESS)</div><div class="line">	&#123;</div><div class="line">		HKEY ext_key;</div><div class="line">		LSTATUS l = RegOpenKeyEx(subkey, key_name, <span class="number">0</span>, KEY_READ, &amp;ext;_key);</div><div class="line">		<span class="keyword">if</span> (l == ERROR_SUCCESS) &#123;</div><div class="line">			</div><div class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span> mru_files;</div><div class="line">			EnumMRUValue(ext_key, mru_files);</div><div class="line">			<span class="keyword">if</span> (mru_files.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">				_tprintf(TEXT(<span class="string">"Extension Name : %s\n"</span>), key_name);</div><div class="line">				ULONG j = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>::iterator it = mru_files.begin(); it != mru_files.end(); ++it) &#123;</div><div class="line"></div><div class="line">					WIN32_FILE_ATTRIBUTE_DATA attribute_data = &#123; <span class="number">0</span> &#125;;</div><div class="line">					</div><div class="line">					<span class="keyword">if</span> (GetFileAttributesEx(it-&gt;GetString(), GetFileExInfoStandard, &amp;attribute;_data)) &#123;</div><div class="line">						ULONGLONG file_size = ((ULONGLONG)attribute_data.nFileSizeHigh) &lt;&lt; <span class="number">32</span> | attribute_data.nFileSizeLow;</div><div class="line">						_tprintf(TEXT(<span class="string">"\t %u %s  % 11I64u KB] %s\n"</span>), j++,</div><div class="line">							(attribute_data.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY) == <span class="number">0</span> ? TEXT(<span class="string">"[FILE"</span>) : TEXT(<span class="string">"[DIR "</span>),</div><div class="line">							(file_size + <span class="number">1023</span>) / <span class="number">1024</span>,</div><div class="line">							it-&gt;GetString());</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						_tprintf(TEXT(<span class="string">"\t %u [ERROR_FILE_NOT_FOUND] %s\n"</span>), j++,</div><div class="line">							it-&gt;GetString());</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			RegCloseKey(ext_key);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		key_name_length = MAX_PATH;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	RegCloseKey(subkey);</div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">	setlocale(LC_ALL, <span class="string">"chs"</span>);</div><div class="line">	PrintMRUFiles();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[主线程退出前请先退出子线程]]></title>
      <url>/2014/11/10/e4b8bbe7babfe7a88be98080e587bae5898de8afb7e58588e98080e587bae5ad90e7babfe7a88b/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们知道理论上如果一个进程的主线程退出，整个进程就会销毁，子线程自然也是要退出的。但是这并不意味着，程序退出的时候我们就能不问不管自己创建的子线程，因为不管他还真有可能出问题。下面是一个典型的主线程退出过程中，而子线程未退出，造成死锁整个进程的分析图，死锁在c runtime里，死锁原因看图便知，也不用太多解释了。</p>
<p><a href="/uploads/2014/11/20141106094954.png"><img src="/uploads/2014/11/20141106094954.png" alt="20141106094954"></a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ClipMonitor 简单的剪切板监控工具]]></title>
      <url>/2014/11/02/clipmonitor-e7ae80e58d95e79a84e589aae58887e69dbfe79b91e68ea7e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>周末花了点时间写了个剪切板监控工具，他会记录剪切板里面的数据，并且支持用HEX和TEXT对数据进行分析。<br>涉及到的技术很简单，网上已经有一堆了，没什么可说的，我这里主要是加入了HEX的模块，方便对未知的剪切板数据进行分析而已。</p>
<p><a href="/uploads/2014/11/20141102204618.png"><img src="/uploads/2014/11/20141102204618.png" alt="20141102204618"></a></p>
<p><a href="/uploads/2014/11/20141102204638.png"><img src="/uploads/2014/11/20141102204638.png" alt="20141102204638"></a></p>
<p><a href="/uploads/2014/11/20141102204651.png"><img src="/uploads/2014/11/20141102204651.png" alt="20141102204651"></a></p>
<p>下载：<a href="/uploads/2014/11/ClipMonitor.zip">ClipMonitor</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Windbg脚本监控DLL加载状态]]></title>
      <url>/2014/10/27/e588a9e794a8windbge8849ae69cace79b91e68ea7dlle58aa0e8bdbde78ab6e68081/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>开发过大型程序的人都遇到过这样的问题，一个版本Release后，发现有的功能怎么也不对。但是每个模块在开发人员单独的环境下又是正常运行。那么遇到这样的问题，其中一个能想到的就是DLL模块没有加载正确。一般情况下，这种时候我们可以使用depends这样的工具查看模块的依赖情况，以判断出哪个模块是出问题的那个。但是如果如果真的遇上大型的程序，DLL模块很多，而且动态静态加载不一，这样光靠depends这样的工具是不能满足需求的。所以我这里写了个Windbg脚本来监控DLL加载状态，因为是动态调试，所以很轻松的就能找到加载问题，无论DLL是静态加载还是动态加载。</p>
<p>以下脚本是Windows 7 32Bit，对于64bit，稍微修改下就行。不过如果是Windows 8，DLL的加载细节已经发生变化，所以这个脚本就不适用了。希望能抛砖引玉一下，期待更多系统的脚本分享出来。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">bp ntdll!LdrpFindOrMapDll <span class="string">"</span></div><div class="line"><span class="string">.push /r /q</span></div><div class="line"><span class="string">r @$t0 = poi(@esp+4)</span></div><div class="line"><span class="string">r @$t1 = poi(@esp+8)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">g @$ra</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">.printf \"name         = %msu\\n\", @$t0</span></div><div class="line"><span class="string">.printf \"path         = %msu\\n\", @$t1</span></div><div class="line"><span class="string">.printf \"Load status  = %08X\", @eax</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">.if((@eax&amp;0xffffffff) != 0) &#123;.printf /D \" WARNNING\\n\"&#125; .else &#123;.printf \"\\n\"&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">.pop /r /q</span></div><div class="line"><span class="string">g</span></div><div class="line"><span class="string">"</span></div><div class="line"> </div></pre></td></tr></table></figure>
<p>最后看看脚本的效果吧，如果加载失败了，那么返回的状态值就不是0。<br><a href="/uploads/2014/10/20141027164220.png"><img src="/uploads/2014/10/20141027164220.png" alt="20141027164220"></a><br><a href="/uploads/2014/10/20141027164424.png"><img src="/uploads/2014/10/20141027164424.png" alt="20141027164424"></a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用Windows Event监控前台窗口变化]]></title>
      <url>/2014/10/19/e794a8windows-evente79b91e68ea7e5898de58fb0e7aa97e58fa3e58f98e58c96/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>网络上有这样一种小工具，号称可以提高计算机响应速度。简单看了下其中的一款工具，实现原理很简单，就是监控前台窗口的变化，设置进程线程的优先级。设置进程线程的优先级无非就是SetPriorityClass和SetThreadPriority这两个函数，主要问题就是要获得前台窗口的情况。<br>Windows提供了一种叫做Windows Event Hook的机制，来让我们获得多种不同的事件，其中一种就是前台窗口变化事件。所以要完成这个功能很简单，只需要注册一个针对EVENT_SYSTEM_FOREGROUND的HOOK就行了。注册和反注册Hook的函数分别是SetWinEventHook和UnhookWinEvent。<br>比如注册EVENT_SYSTEM_FOREGROUND事件的Hook，我们只需要这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HWINEVENTHOOK hWinEventHook = SetWinEventHook(</div><div class="line">		EVENT_SYSTEM_FOREGROUND, EVENT_SYSTEM_FOREGROUND,</div><div class="line">		<span class="literal">NULL</span>, WinEventProc, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">		WINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNPROCESS);</div><div class="line"> </div></pre></td></tr></table></figure>
<p>前两个参数设置我们感兴趣的事件范围，由于我们最后一个参数设置的WINEVENT_OUTOFCONTEXT，表示Hook函数并不在产生Event的进程内部，所以hmodWinEventProc设置为NULL。WinEventProc则是我们的Hook函数idProcess和idThread为0，表示我们关心所有桌面上的进程线程，最后的flags还有一个WINEVENT_SKIPOWNPROCESS表示我们对自己的进程不感兴趣。<br>要反注册Hook只需要</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UnhookWinEvent(hWinEventHook);</div><div class="line"> </div></pre></td></tr></table></figure>
<p>WinEventProc的很简单</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> CALLBACK <span class="title">WinEventProc</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">	HWINEVENTHOOK hWinEventHook,</span></span></div><div class="line"><span class="function"><span class="params">	DWORD event,</span></span></div><div class="line"><span class="function"><span class="params">	HWND hwnd,</span></span></div><div class="line"><span class="function"><span class="params">	LONG idObject,</span></span></div><div class="line"><span class="function"><span class="params">	LONG idChild,</span></span></div><div class="line"><span class="function"><span class="params">	DWORD dwEventThread,</span></span></div><div class="line"><span class="function"><span class="params">	DWORD dwmsEventTime</span></span></div><div class="line"><span class="function"><span class="params">	)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span> (hwnd &amp;&amp;</div><div class="line">		idObject == OBJID_WINDOW &amp;&amp;</div><div class="line">		idChild == CHILDID_SELF &amp;&amp;</div><div class="line">		event == EVENT_SYSTEM_FOREGROUND) &#123;</div><div class="line">			...</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>其中只需要知道hwnd就是当前的前台窗口就行了。然后通过hwnd和函数GetWindowThreadProcessId，获得进程线程id，自然就能获得其句柄，最后调用调整进程线程优先级的函数即可。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[更新Windbg扩展0cchext]]></title>
      <url>/2014/09/20/e69bb4e696b0windbge689a9e5b1950cchext/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>更新了pe_export和pe_import两个命令，功能如图</p>
<p><a href="/uploads/2014/09/20140919095914.png"><img src="/uploads/2014/09/20140919095914.png" alt="20140919095914"></a></p>
<p><a href="/uploads/2014/09/20140919100003.png"><img src="/uploads/2014/09/20140919100003.png" alt="20140919100003"></a></p>
<p><a href="/uploads/2014/09/20140919100101.png"><img src="/uploads/2014/09/20140919100101.png" alt="20140919100101"></a></p>
<p>Commands for 0cchext.dll:<br>  !autocmd         - Execute the debugger commands.(The config file is<br>                     autocmd.ini)<br>  !dpx             - Display the contents of memory in the given range.<br>  !dtx             - Displays information about structures. (The config file is<br>                     struct.ini)<br>  !favcmd          - Display the favorite debugger commands.(The config file is<br>                     favcmd.ini)<br>  !grep            - Search plain-text data sets for lines matching a regular<br>                     expression.<br>  !help            - Displays information on available extension commands<br>  !hwnd            - Show window information by handle.<br>  !init_script_env - Initialize script environment.<br>  !pe_export       - Dump PE export functions<br>  !pe_import       - Dump PE import modules and functions<br>  !setvprot        - Set the protection on a region of committed pages in the<br>                     virtual address space of the debuggee process.<br>  !url             - Open a URL in a default browser.<br>  !version         - Displays the version information for 0cchext.dll<br>!help  will give more information for a particular command  </p>
<p>下载：<a href="/uploads/2014/09/0cchext.zip">0cchext</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Dump stl的vector，list，map的三个windbg脚本]]></title>
      <url>/2014/08/16/dump-stle79a84vectorefbc8clistefbc8cmape79a84e4b889e4b8aawindbge8849ae69cac/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>用Windbg查看stl的容器实在是已经让人悲伤的事情，为了方便，所以写了这么3个脚本<br>vector:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">r? $t0 = $&#123;$arg1&#125;</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($&#123;/d:$VectorType&#125;) &#123;</div><div class="line">	r? $t0 = @@C++(*(($&#123;$VectorType&#125; *)@$t0))</div><div class="line">&#125;</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($&#123;/d:$arg2&#125;) &#123; </div><div class="line">    .<span class="keyword">if</span> ($sicmp(<span class="string">"$&#123;$arg2&#125;"</span>, <span class="string">"-c"</span>) == <span class="number">0</span>) &#123; </div><div class="line">        r $t2 = <span class="number">0</span> </div><div class="line">        aS $&#123;/v:command&#125; <span class="string">"$&#123;$arg3&#125;"</span> </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line">.<span class="keyword">else</span> &#123; </div><div class="line">    r $t2 = <span class="number">1</span> </div><div class="line">    aS $&#123;/v:command&#125; <span class="string">" "</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">r? $t1 = @@C++(@$t0._Mylast)</div><div class="line">r? $t0 = @@C++(@$t0._Myfirst)</div><div class="line"></div><div class="line">.<span class="built_in">printf</span> <span class="string">"size = %d\n"</span>, @@C++((@$t1 - @$t0))  </div><div class="line"></div><div class="line">.<span class="keyword">while</span> (@$t0 != @$t1) &#123;</div><div class="line">	.<span class="keyword">if</span> ($t2 == <span class="number">1</span>) &#123;</div><div class="line">		?? @@c++(@$t0-&gt;_Bx)</div><div class="line">	&#125;</div><div class="line">	.<span class="keyword">else</span> &#123;</div><div class="line">		r? $t9 = @$t0-&gt;_Bx</div><div class="line">		command</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	r? $t0=@$t0+<span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ad command </div><div class="line"> </div></pre></td></tr></table></figure>
<p>list:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">r? $t0 = $&#123;$arg1&#125;</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($&#123;/d:$ListType&#125;) &#123;</div><div class="line">	r? $t0 = @@C++(*(($&#123;$ListType&#125; *)@$t0))</div><div class="line">&#125;</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($&#123;/d:$arg2&#125;) &#123; </div><div class="line">    .<span class="keyword">if</span> ($sicmp(<span class="string">"$&#123;$arg2&#125;"</span>, <span class="string">"-c"</span>) == <span class="number">0</span>) &#123; </div><div class="line">        r $t2 = <span class="number">0</span> </div><div class="line">        aS $&#123;/v:command&#125; <span class="string">"$&#123;$arg3&#125;"</span> </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line">.<span class="keyword">else</span> &#123; </div><div class="line">    r $t2 = <span class="number">1</span> </div><div class="line">    aS $&#123;/v:command&#125; <span class="string">" "</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line">.<span class="built_in">printf</span> <span class="string">"size = %d\n"</span>, @@C++(@$t0._Mysize)</div><div class="line"></div><div class="line">r? $t1 = @@C++(@$t0._Myhead)</div><div class="line">r? $t0 = @@C++(@$t0._Myhead)</div><div class="line">r? $t0 = @@C++(@$t0-&gt;_Next)</div><div class="line"></div><div class="line">.<span class="keyword">while</span> (@$t0 != @$t1) &#123;</div><div class="line">	.<span class="keyword">if</span> ($t2 == <span class="number">1</span>) &#123;</div><div class="line">		?? @@c++(@$t0-&gt;_Myval._Bx)</div><div class="line">	&#125;</div><div class="line">	.<span class="keyword">else</span> &#123;</div><div class="line">		r? $t9 = @$t0-&gt;_Myval._Bx</div><div class="line">		command</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	r? $t0 = @@C++(@$t0-&gt;_Next)</div><div class="line">&#125;</div><div class="line"></div><div class="line">ad command </div><div class="line"> </div></pre></td></tr></table></figure>
<p>map:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">.<span class="keyword">if</span> ($sicmp(<span class="string">"$&#123;$arg1&#125;"</span>, <span class="string">"-n"</span>) == <span class="number">0</span>) &#123; </div><div class="line"></div><div class="line">    .<span class="keyword">if</span> (@@C++(@$t0-&gt;_Left) != @@C++(@$t1)) &#123; </div><div class="line">        .push /r /q </div><div class="line">        r? $t0 = @$t0-&gt;_Left </div><div class="line">        $$&gt;a&lt; $&#123;$arg0&#125; -n </div><div class="line">        .pop /r /q </div><div class="line">    &#125; </div><div class="line">	</div><div class="line">	.<span class="keyword">if</span> (@@C++(@$t0-&gt;_Isnil) == <span class="number">0</span>) &#123; </div><div class="line">        .<span class="keyword">if</span> (@$t2 == <span class="number">1</span>) &#123; </div><div class="line">            .<span class="built_in">printf</span> /D <span class="string">"%p\n"</span>, @$t0, @$t0 </div><div class="line">            .<span class="built_in">printf</span> <span class="string">"key = "</span> </div><div class="line">            ?? @$t0-&gt;_Myval.first </div><div class="line">            .<span class="built_in">printf</span> <span class="string">"value = "</span> </div><div class="line">            ?? @$t0-&gt;_Myval.second </div><div class="line">        &#125;</div><div class="line">		.<span class="keyword">else</span> &#123; </div><div class="line">            r? $t9 = @$t0-&gt;_Myval </div><div class="line">            command </div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    .<span class="keyword">if</span> (@@C++(@$t0-&gt;_Right) != @@C++(@$t1)) &#123; </div><div class="line">        .push /r /q </div><div class="line">        r? $t0 = @$t0-&gt;_Right </div><div class="line">        $$&gt;a&lt; $&#123;$arg0&#125; -n </div><div class="line">        .pop /r /q </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line">.<span class="keyword">else</span> &#123; </div><div class="line"></div><div class="line">	r? $t0 = $&#123;$arg1&#125;</div><div class="line"></div><div class="line">	.<span class="keyword">if</span> ($&#123;/d:$MapType&#125;) &#123;</div><div class="line">		r? $t0 = @@C++(*(($&#123;$MapType&#125; *)@$t0))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    .<span class="keyword">if</span> ($&#123;/d:$arg2&#125;) &#123; </div><div class="line">        .<span class="keyword">if</span> ($sicmp(<span class="string">"$&#123;$arg2&#125;"</span>, <span class="string">"-c"</span>) == <span class="number">0</span>) &#123; </div><div class="line">            r $t2 = <span class="number">0</span> </div><div class="line">            aS $&#123;/v:command&#125; <span class="string">"$&#123;$arg3&#125;"</span> </div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">	.<span class="keyword">else</span> &#123; </div><div class="line">        r $t2 = <span class="number">1</span> </div><div class="line">        aS $&#123;/v:command&#125; <span class="string">" "</span> </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">	.<span class="built_in">printf</span> <span class="string">"size = %d\n"</span>, @@C++(@$t0._Mysize)  </div><div class="line">     </div><div class="line">	r? $t0 = @$t0._Myhead-&gt;_Parent </div><div class="line">	r? $t1 = @$t0-&gt;_Parent</div><div class="line">	</div><div class="line">    $$&gt;a&lt; $&#123;$arg0&#125; -n</div><div class="line"></div><div class="line">    ad command </div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ATLTRACE打造轻量级Debug Log]]></title>
      <url>/2014/07/18/e4bdbfe794a8atltracee68993e980a0e8bdbbe9878fe7baa7debug-log/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>众所周知，Debug Log是非常好的调试手段。所以我经常也尝试各种各样的第三方Log库。Log库分很多类型，例如可以给服务器使用的功能完备Log，也有轻量级的Log库，只是为Debug所设计。作为客户端开发，我还是比较喜欢后者这种Log库。不过使用第三方库有一个这样的麻烦事，走到哪你都得下一个，然后添加到自己的代码里。对于Log这样的功能，几乎所有程序都是需要的，使用的极其频繁。所以我就想找到一种方法，它可以使用SDK现有功能，来完成一个轻量级Log的功能。对我来说，不需要这个Log有多么高效，完备，唯一需要的就是方便，拿来就可以用。</p>
<p>结合这些目的，我第一个想到的就是ATL的ATLTRACE。但是，ATLTRACE输出的日志都是显示在Debug Output窗口。如果想将信息输出到文件或者控制台上，这就够呛了。那么，接下来就要想办法改变ATLTRACE的输出设备了。由于ATL是有代码的，所以很容易的可以看到代码运行的脉络。看完这份代码的第一个收获就是知道了ATLTRACE运行效率不会很高，不过这个对我来说并不重要。另外一个就是，找到了改变输出设备的方法。</p>
<p>在没有定义_ATL_NO_DEBUG_CRT的情况下，ATLTRACE最终的输出是通过_CrtDbgReport实现的，而如果定义了这个宏，那么输出是直接调用OutputDebugString。但一般程序都不会使用_ATL_NO_DEBUG_CRT这个宏，所以大部分情况下ATLTRACE都是调用的_CrtDbgReport。那么办法就来了_CrtDbgReport输出的数据，是可以通过_CrtSetReportMode和_CrtSetReportFile来改变输出设备的。例如我们想输出到控制台，我们只需要这样：<br>_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);<br>_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDOUT);  </p>
<p>如果要输出到文件也只需要这样：<br>HANDLE log_file;<br>log_file = CreateFile(“c:\log.txt”, GENERIC_WRITE,<br>    FILE_SHARE_WRITE, NULL, CREATE_ALWAYS,<br>    FILE_ATTRIBUTE_NORMAL, NULL);<br>_CrtSetReportFile(_CRT_WARN, log_file);<br>CloseHandle(log_file);<br>或者<br>freopen( “c:\log2.txt”, “w”, stdout);<br>_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);<br>_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDOUT);  </p>
<p>好了，这样就能解决输出设备的问题。既然已经说到这里，继续介绍下ATLTRACE很少人知道的其他优点吧。<br>1.可以通过ATL/MFT TRACE Tool 随时设定Log的输出Filter，并且可以保持配置（工具用法很简单，具体直接用用就知道了）。<br>2.通过AtlDebugAPI的接口，可以给自己的代码中添加读取配置文件的函数。这样每次修改配置文件就能改变ATLTRACE的行为。<br>3.通过AtlDebugAPI的接口，可以直接制定输出内容，不用配置文件也可以。<br>这三条涉及到的接口有：<br>AtlTraceOpenProcess<br>AtlTraceModifyProcess<br>AtlTraceCloseProcess<br>AtlTraceLoadSettings  </p>
<p>为了更方便使用，我这写了几个宏代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlbase.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atltrace.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atldebugapi.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlpath.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRACEHELPA(fmt, ...)	\</span></div><div class="line"><span class="keyword">do</span>								\</div><div class="line">&#123;								\</div><div class="line">	SYSTEMTIME tm;				\</div><div class="line">	GetLocalTime(&amp;tm;);			\</div><div class="line">	ATLTRACE(<span class="string">"%s: [%02d-%02d-%02d %02d:%02d:%02d:%03d] "</span>fmt, __FUNCTION__,							\</div><div class="line">	tm.wYear, tm.wMonth, tm.wDay, tm.wHour, tm.wMinute, tm.wSecond, tm.wMilliseconds, __VA_ARGS__);	\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRACEHELPW(fmt, ...)	\</span></div><div class="line"><span class="keyword">do</span>								\</div><div class="line">&#123;								\</div><div class="line">	SYSTEMTIME tm;				\</div><div class="line">	GetLocalTime(&amp;tm;);			\</div><div class="line">	ATLTRACE(<span class="string">L"%S: [%02d-%02d-%02d %02d:%02d:%02d:%03d] "</span>fmt, __FUNCTION__,							\</div><div class="line">	tm.wYear, tm.wMonth, tm.wDay, tm.wHour, tm.wMinute, tm.wSecond, tm.wMilliseconds, __VA_ARGS__);	\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRACEHELPEXA(category, level, fmt, ...)	\</span></div><div class="line"><span class="keyword">do</span>								\</div><div class="line">&#123;								\</div><div class="line">	SYSTEMTIME tm;				\</div><div class="line">	GetLocalTime(&amp;tm;);			\</div><div class="line">	ATLTRACE(category, level, <span class="string">"%s: [%02d-%02d-%02d %02d:%02d:%02d:%03d] "</span>fmt, __FUNCTION__,			\</div><div class="line">	tm.wYear, tm.wMonth, tm.wDay, tm.wHour, tm.wMinute, tm.wSecond, tm.wMilliseconds, __VA_ARGS__);	\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRACEHELPEXW(category, level, fmt, ...)	\</span></div><div class="line"><span class="keyword">do</span>								\</div><div class="line">&#123;								\</div><div class="line">	SYSTEMTIME tm;				\</div><div class="line">	GetLocalTime(&amp;tm;);			\</div><div class="line">	ATLTRACE(category, level, <span class="string">L"%S: [%02d-%02d-%02d %02d:%02d:%02d:%03d] "</span>fmt, __FUNCTION__,		\</div><div class="line">	tm.wYear, tm.wMonth, tm.wDay, tm.wHour, tm.wMinute, tm.wSecond, tm.wMilliseconds, __VA_ARGS__);	\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SetAtlTraceOpt(level, enable, category, filename_lineno, report_type, report_file)	\</span></div><div class="line"><span class="keyword">do</span>																							\</div><div class="line">&#123;																							\</div><div class="line">	DWORD_PTR trace_process = AtlTraceOpenProcess(GetCurrentProcessId());					\</div><div class="line">	AtlTraceModifyProcess(trace_process, level, enable, category, filename_lineno);			\</div><div class="line">	AtlTraceCloseProcess(trace_process);													\</div><div class="line">	_CrtSetReportMode(level, report_type);													\</div><div class="line">	<span class="keyword">if</span> (report_type == _CRTDBG_MODE_FILE) &#123;													\</div><div class="line">		_CrtSetReportFile(level, report_file);												\</div><div class="line">	&#125;																						\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LoadAtlDebugCfgExA(path)															\</span></div><div class="line"><span class="keyword">do</span>																							\</div><div class="line">&#123;																							\</div><div class="line">	DWORD_PTR trace_process = AtlTraceOpenProcess(GetCurrentProcessId());					\</div><div class="line">	AtlTraceLoadSettingsA(path, trace_process);												\</div><div class="line">	AtlTraceCloseProcess(trace_process);													\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LoadAtlDebugCfgExW(path)															\</span></div><div class="line"><span class="keyword">do</span>																							\</div><div class="line">&#123;																							\</div><div class="line">	DWORD_PTR trace_process = AtlTraceOpenProcess(GetCurrentProcessId());					\</div><div class="line">	AtlTraceLoadSettingsU(path, trace_process);												\</div><div class="line">	AtlTraceCloseProcess(trace_process);													\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LoadAtlDebugCfgA()																	\</span></div><div class="line"><span class="keyword">do</span>																							\</div><div class="line">&#123;																							\</div><div class="line">	CHAR debug_cfg_path[MAX_PATH] = &#123;<span class="number">0</span>&#125;;													\</div><div class="line">	GetModuleFileNameA(<span class="literal">NULL</span>, debug_cfg_path, MAX_PATH);										\</div><div class="line">	<span class="function">CPathA <span class="title">debug_cfg_path_obj</span><span class="params">(debug_cfg_path)</span></span>;												\</div><div class="line">	debug_cfg_path_obj.RemoveExtension();													\</div><div class="line">	debug_cfg_path_obj.AddExtension(<span class="string">".trc"</span>);												\</div><div class="line">	LoadAtlDebugCfgExA(debug_cfg_path_obj.m_strPath.GetString());							\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LoadAtlDebugCfgW()																	\</span></div><div class="line"><span class="keyword">do</span>																							\</div><div class="line">&#123;																							\</div><div class="line">	WCHAR debug_cfg_path[MAX_PATH] = &#123;<span class="number">0</span>&#125;;													\</div><div class="line">	GetModuleFileNameW(<span class="literal">NULL</span>, debug_cfg_path, MAX_PATH);										\</div><div class="line">	<span class="function">CPathW <span class="title">debug_cfg_path_obj</span><span class="params">(debug_cfg_path)</span></span>;												\</div><div class="line">	debug_cfg_path_obj.RemoveExtension();													\</div><div class="line">	debug_cfg_path_obj.AddExtension(<span class="string">L".trc"</span>);												\</div><div class="line">	LoadAtlDebugCfgExW(debug_cfg_path_obj.m_strPath.GetString());							\</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line"></div><div class="line">	SetAtlTraceOpt(_CRT_WARN, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, _CRTDBG_MODE_FILE, _CRTDBG_FILE_STDOUT);</div><div class="line">	LoadAtlDebugCfgW();</div><div class="line">	CTraceCategory MY_CATEGORY(_T("MyCategoryName"));</div><div class="line">	TRACEHELPEXA(MY_CATEGORY, <span class="number">0</span>, <span class="string">"test test test\n"</span>);</div><div class="line">	TRACEHELPEXW(MY_CATEGORY, <span class="number">0</span>, <span class="string">L"test test test\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Dump右键菜单的小工具——RightMenuDump]]></title>
      <url>/2014/06/29/dumpe58fb3e994aee88f9ce58d95e79a84e5b08fe5b7a5e585b7-rightmenudump/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近没空更新blog，只能把以前写的小工具拿出来充数，表明这个blog还是活着的。这个挺无聊的小工具，主要是看看电脑里右键菜单的情况。</p>
<p>直接运行后当前目录下出现rm.log，内容大概是：</p>
<p><a href="/uploads/2014/06/20140629222145.png"><img src="/uploads/2014/06/20140629222145.png" alt="20140629222145"></a></p>
<p>下载：<a href="/uploads/2014/06/RightMenuDump.zip">RightMenuDump</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[更新:Windbg扩展0cchext.dll]]></title>
      <url>/2014/06/23/e69bb4e696b0windbge689a9e5b1950cchext-dll/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Commands for 0cchext.dll:<br>  !autocmd         - Execute the debugger commands.(The config file is<br>                     autocmd.ini)<br>  !dpx             - Display the contents of memory in the given range.<br>  !dtx             - Displays information about structures. (The config file is<br>                     struct.ini)<br>  !favcmd          - Display the favorite debugger commands.(The config file is<br>                     favcmd.ini)<br>  !grep            - Search plain-text data sets for lines matching a regular<br>                     expression.<br>  !help            - Displays information on available extension commands<br>  !hwnd            - Show window information by handle.<br>  !init_script_env - Initialize script environment.<br>  !setvprot        - Set the protection on a region of committed pages in the<br>                     virtual address space of the debuggee process.<br>  !url             - Open a URL in a default browser.<br>  !version         - Displays the version information for 0cchext.dll<br>!help  will give more information for a particular command  </p>
<p>下载：<a href="/uploads/2014/06/0cchext.zip">0cchext</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[系统进程创建管理员进程的方法]]></title>
      <url>/2014/05/06/e7b3bbe7bb9fe8bf9be7a88be5889be5bbbae7aea1e79086e59198e8bf9be7a88be79a84e696b9e6b395/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">namespace</span> ProcessHelper &#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(__stdcall *CREATEENVIRONMENTBLOCK)</span><span class="params">(LPVOID *lpEnvironment,</span></span></div><div class="line"><span class="function"><span class="params">		HANDLE hToken,</span></span></div><div class="line"><span class="function"><span class="params">		BOOL bInherit)</span></span>;</div><div class="line"></div><div class="line">	<span class="function">BOOL <span class="title">CreateProcessAsExplorer</span><span class="params">(LPCTSTR AppName, LPTSTR CommandLine, PPROCESS_INFORMATION pi)</span></span></div><div class="line"><span class="function">	</span>&#123;</div><div class="line">		ULONG ExplorerID = <span class="number">0</span>;</div><div class="line">		HANDLE ExplorerHandle;</div><div class="line">		HANDLE Snapshot;</div><div class="line">		ULONG CreationFlags = <span class="number">0</span>;</div><div class="line">		CREATEENVIRONMENTBLOCK CreateEnvironmentBlock;</div><div class="line">		HANDLE ExplorerToken;</div><div class="line">		HANDLE NewToken = <span class="number">0</span>;</div><div class="line">		LPVOID Environment = <span class="literal">NULL</span>;</div><div class="line">		ULONG ReturnLength = <span class="number">0</span>;</div><div class="line">		TOKEN_LINKED_TOKEN LinkedToken = &#123;<span class="number">0</span>&#125;;</div><div class="line">		STARTUPINFO si = &#123;<span class="number">0</span>&#125;;</div><div class="line">		PROCESSENTRY32 pe;</div><div class="line">		BOOL Ret;</div><div class="line">		HMODULE UserenvModule;</div><div class="line">		LUID Luid = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"></div><div class="line">		Snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> (Snapshot == INVALID_HANDLE_VALUE) &#123;</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		pe.dwSize = <span class="keyword">sizeof</span>(pe);</div><div class="line">		<span class="keyword">if</span> (Process32FirstW(Snapshot, &amp;pe;)) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(;;) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (_tcsicmp(pe.szExeFile, <span class="string">L"explorer.exe"</span>) == <span class="number">0</span>) &#123;</div><div class="line">					ProcessIdToSessionId(pe.th32ProcessID, &amp;Luid.LowPart;);</div><div class="line">					ExplorerID = pe.th32ProcessID;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (!Process32Next(Snapshot, &amp;pe;)) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		CloseHandle(Snapshot);</div><div class="line">		<span class="keyword">if</span> (ExplorerID == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ExplorerHandle = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, ExplorerID);</div><div class="line">		<span class="keyword">if</span> (ExplorerHandle == <span class="literal">NULL</span>) &#123;</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!OpenProcessToken(ExplorerHandle, TOKEN_ALL_ACCESS_P, &amp;ExplorerToken;)) &#123;</div><div class="line">			CloseHandle(ExplorerHandle);</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		CloseHandle(ExplorerHandle);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (GetTokenInformation(ExplorerToken, </div><div class="line">			TokenLinkedToken, </div><div class="line">			&amp;LinkedToken;, </div><div class="line">			<span class="keyword">sizeof</span>(TOKEN_LINKED_TOKEN), </div><div class="line">			&amp;ReturnLength;)) &#123;</div><div class="line"></div><div class="line">				NewToken = LinkedToken.LinkedToken;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			</div><div class="line">			LookupPrivilegeValueW(<span class="number">0</span>, <span class="string">L"SeDebugPrivilege"</span>, &amp;Luid;);</div><div class="line">			DuplicateTokenEx(ExplorerToken, MAXIMUM_ALLOWED, <span class="literal">NULL</span>, SecurityIdentification, TokenPrimary, &amp;NewToken;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		CloseHandle(ExplorerToken);</div><div class="line"></div><div class="line">		UserenvModule = LoadLibrary(TEXT(<span class="string">"Userenv.dll"</span>));</div><div class="line">		<span class="keyword">if</span> (UserenvModule == <span class="literal">NULL</span>) &#123;</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		CreateEnvironmentBlock = (CREATEENVIRONMENTBLOCK)GetProcAddress(UserenvModule, <span class="string">"CreateEnvironmentBlock"</span>);</div><div class="line">		<span class="keyword">if</span> (CreateEnvironmentBlock == <span class="literal">NULL</span>) &#123;</div><div class="line">			FreeLibrary(UserenvModule);</div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span> (CreateEnvironmentBlock(&amp;Environment;, NewToken, TRUE)) &#123;</div><div class="line">			CreationFlags = CREATE_UNICODE_ENVIRONMENT;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		si.cb = <span class="keyword">sizeof</span>(si);</div><div class="line">		Ret = CreateProcessAsUser(</div><div class="line">			NewToken,</div><div class="line">			AppName,</div><div class="line">			CommandLine,</div><div class="line">			<span class="literal">NULL</span>,</div><div class="line">			<span class="literal">NULL</span>,</div><div class="line">			FALSE,</div><div class="line">			CreationFlags,</div><div class="line">			Environment,</div><div class="line">			<span class="literal">NULL</span>,</div><div class="line">			&amp;si;,</div><div class="line">			pi);</div><div class="line"></div><div class="line">		CloseHandle(NewToken);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (Environment != <span class="literal">NULL</span>) &#123;</div><div class="line">			DestroyEnvironmentBlock(Environment);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!Ret) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> TRUE;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个查找指定栈回溯符号并执行命令的Windbg脚本]]></title>
      <url>/2014/04/20/e4b880e4b8aae69fa5e689bee68c87e5ae9ae6a088e59b9ee6baafe7aca6e58fb7e5b9b6e689a7e8a18ce591bde4bba4e79a84windbge8849ae69cac/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这是自己没事在家调试程序的一个小需求。</p>
<p>有时候比如IE这样的程序，线程实在是非常的多，我想操作某个特殊线程就比较麻烦，需要先找到线程然后再实行命令，为了偷懒就写了这个脚本。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$$ If a frame of a thread has the target symbol, we execute the command.</div><div class="line">$$ Author: nighxie </div><div class="line">$$ Blog: <span class="number">0</span>cch.net</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($&#123;/d:$arg1&#125; &amp; $&#123;/d:$arg2&#125; &amp; $&#123;/d:$arg3&#125;) &#123;</div><div class="line">	.<span class="keyword">for</span> (r @$t0 = <span class="number">0</span>; @$t0 &lt; <span class="number">0</span>n$&#123;$arg1&#125;; r @$t0 = @$t0 + <span class="number">1</span>) &#123;</div><div class="line">		r @$t1 = <span class="number">0</span>;</div><div class="line">		~[@$t0]s;</div><div class="line">		!for_each_frame .<span class="keyword">if</span>($spat(<span class="string">"$&#123;@#SymbolName&#125;"</span>, <span class="string">"$&#123;$arg2&#125;"</span>)) &#123;r @$t1 = <span class="number">1</span>&#125;</div><div class="line">		.<span class="keyword">if</span> (@$t1 == <span class="number">1</span>) &#123;</div><div class="line">			$&#123;$arg3&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">.<span class="keyword">else</span> &#123;</div><div class="line">	.echo <span class="string">"Usage $$&gt;a&lt;$&#123;$arg0&#125; thread_count pattern cmd"</span>;</div><div class="line">	.echo <span class="string">"e.g. $$&gt;a&lt;$&#123;$arg0&#125; 5 ntdll* ~n"</span>;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>就如同上面的例子指定线程数量，要匹配的符号，最后就是要执行的命令。<br>$$&gt;a&lt;${$arg0} 5 ntdll* ~n就表示在前5个线程里寻找栈回溯有关ntdll的线程，然后执行~n命令挂起线程。</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 8.1中获得系统版本信息的方法]]></title>
      <url>/2014/04/13/windows-8-1e4b8ade88eb7e5be97e7b3bbe7bb9fe78988e69cace4bfa1e681afe79a84e696b9e6b395/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在Windows 8.1之前的系统版本上，我们一直可以使用 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724451(v=vs.85" target="_blank" rel="external">GetVersionEx</a>.aspx) 这个函数来获取当前系统的MajorVersion和MinorVersion。但是当Windows系统来到8.1时代，这个API似乎就不好用了。如果在Windows 8.1上调用这个函数，我们更有可能获得的版本号是Windows 8的版本6.2，而不是我们想要的6.3。在MSDN上提供了这样一段说明：</p>
<blockquote>With the release of Windows 8.1, the behavior of the <strong>GetVersionEx</strong> API has changed in the value it will return for the operating system version. The value returned by the <strong>GetVersionEx</strong> function now depends on how the application is manifested.<br><br>Applications not manifested for Windows 8.1 will return the Windows 8 OS version value (6.2). Once an application is manifested for a given operating system version, <strong>GetVersionEx</strong> will always return the version that the application is manifested for in future releases.</blockquote>


<p>好了，既然微软都这么说了，也没办法，还好微软也给我们提供了另一套函数，叫做<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dn424972(v=vs.85" target="_blank" rel="external">Version Helper functions</a>.aspx) ，看起来是一套很不错的API，能帮助我们方便的判断系统版本。但是，仔细一看，这套函数需要头文件VersionHelpers.h，而这个文件是 Windows 8.1 software development kit 的一部分。对于使用低版本的VS还得装新版SDK，岂不麻烦。那么我们希望能找到一套更好的解决方法。</p>
<p>我第一个能想到了，当然就是万能的WMI，使用Win32_OperatingSystem class中的Version可以获得一个形如6.3.9600的字符串，我们就能通过解析这个获得系统的版本了。但是说实话，不到万不得已我不太喜欢用WMI这套API，总感觉为了一个小功能，牵扯了一堆东西。</p>
<p>那么第二套方案，是我觉得比较满意的，那就是调用<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms725493(v=vs.85" target="_blank" rel="external">VerSetConditionMask</a>.aspx)和<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms725492(v=vs.85" target="_blank" rel="external">VerifyVersionInfo</a>.aspx)来完成对系统版本的判断。具体做法如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">IsWindows8Point1</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	OSVERSIONINFOEX version_info = &#123;<span class="number">0</span>&#125;;</div><div class="line">	version_info.dwOSVersionInfoSize = <span class="keyword">sizeof</span>(OSVERSIONINFOEX);</div><div class="line">	version_info.dwMajorVersion = <span class="number">6</span>;</div><div class="line">	version_info.dwMinorVersion = <span class="number">3</span>;</div><div class="line">	ULONGLONG mask = VerSetConditionMask(<span class="number">0</span>, VER_MAJORVERSION, VER_EQUAL);</div><div class="line">	mask = VerSetConditionMask(mask, VER_MINORVERSION, VER_EQUAL);</div><div class="line">	<span class="keyword">return</span> VerifyVersionInfo(&amp;version;_info, VER_MAJORVERSION | VER_MINORVERSION, mask);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>那么，我们就可以用这个函数来判断系统是否是Windows 8.1，如果不是，我们就可以用老办法，GetVersionEx来获得系统的版本号作判断了。当然了，大家看到这估计也能看出，我们自己也能用这两个函数实现一套所谓的Version Helper functions。举个例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL WINAPI <span class="title">IsWindowsVersionOrGreater</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">	WORD wMajorVersion,</span></span></div><div class="line"><span class="function"><span class="params">	WORD wMinorVersion,</span></span></div><div class="line"><span class="function"><span class="params">	WORD wServicePackMajor</span></span></div><div class="line"><span class="function"><span class="params">	)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	OSVERSIONINFOEX version_info = &#123; <span class="number">0</span> &#125;;</div><div class="line">	version_info.dwOSVersionInfoSize = <span class="keyword">sizeof</span>(OSVERSIONINFOEX);</div><div class="line">	version_info.dwMajorVersion = wMajorVersion;</div><div class="line">	version_info.dwMinorVersion = wMinorVersion;</div><div class="line">	version_info.wServicePackMajor = wServicePackMajor;</div><div class="line"></div><div class="line">	ULONGLONG mask = VerSetConditionMask(<span class="number">0</span>, VER_MAJORVERSION, VER_GREATER_EQUAL);</div><div class="line">	mask = VerSetConditionMask(mask, VER_MINORVERSION, VER_GREATER_EQUAL);</div><div class="line">	mask = VerSetConditionMask(mask, VER_SERVICEPACKMAJOR, VER_GREATER_EQUAL);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> VerifyVersionInfo(&amp;version;_info, VER_MAJORVERSION | VER_MINORVERSION | VER_SERVICEPACKMAJOR, mask);</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>怎么样，是不是达到了以假乱真的效果了。那么最后，咱再看看这么写出来的API的效果如何：</p>
<p><a href="/uploads/2014/04/20140413233019.png"><img src="/uploads/2014/04/20140413233019.png" alt="20140413233019"></a></p>
<p>===============想睡觉的分割线====================</p>
<p>更新另外一个方法，在网上看到的，感觉也还行。只不过需要引入其他DLL，可以作为备选方案。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">ULONG <span class="title">MyGetVersion</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;	</div><div class="line">	LPBYTE raw_data;</div><div class="line">	ULONG retval = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (NetWkstaGetInfo(<span class="literal">NULL</span>, <span class="number">100</span>, &amp;raw;_data) == NERR_Success) &#123;</div><div class="line">		WKSTA_INFO_100 * ws_info = <span class="keyword">reinterpret_cast</span>(raw_data);</div><div class="line">		retval = (ws_info-&gt;wki100_ver_major &lt;&lt; <span class="number">16</span>) | ws_info-&gt;wki100_ver_minor;</div><div class="line">		NetApiBufferFree(raw_data);</div><div class="line">		<span class="keyword">return</span> retval;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> retval;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Global Logger打开开机启动ETW日志]]></title>
      <url>/2014/04/05/global-loggere68993e5bc80e5bc80e69cbae590afe58aa8etwe697a5e5bf97/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在我看来XP确实应该寿终正寝了，因为确实在很多机制方面不如新的系统，比如ETW。而微软的XPERF也没有能在XP上直接安装的。当然，老版本的XPERF还能在XP上运行，只是监控能力有限，到了新版本的XPERF，在XP上就运行不了了。但是，XP却在中国还活的好好的，所以优化其性能必不可少。于是，在没有XPERF支持的情况下，要做到开启ETW日志，我们就需要微软提供的Global Logger机制，打开开机启动的Trace Session。</p>
<p>微软对打开Global Logger的方法做了详细的说明：<a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff546686(v=vs.85" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/windows/hardware/ff546686(v=vs.85).aspx </a>.aspx )，我这里没必要再赘述了，只有一个地方需要注意，要说明一下<strong>EnableKernelFlags</strong>这个变量，他是一个REG_BINARY类型，他的值是EVENT_TRACE_PROPERTIES的EnableFlags。但是EnableFlags是一个DWORD，而<strong>EnableKernelFlags</strong>是一个32字节的数组。如果你设置的时候，只是设置了一个DWORD，那么你会发现ETW 日志不会开启。</p>
<p>话说到这，<strong>EnableKernelFlags</strong>中前4字节的DWORD是EVENT_TRACE_PROPERTIES的组合，那么后面还有28字节是干什么的呢？实际上ETW能记录的标志还有很多，只是没有在EVENT_TRACE_PROPERTIES中说明，他们都被分到8个分组里面去了，这也是为什么有32个字节的Flags。具体怎么分组，还有哪些标志位，可以参考WRK的代码。</p>
<p>我这里写了个小工具可以用来设置Global Flags，不过如果你能找到XP上可以用的XPERF当然是最好的选择了！</p>
<p><a href="/uploads/2014/04/20140405104746.png"><img src="/uploads/2014/04/20140405104746.png" alt="20140405104746"></a></p>
<p>下载:<a href="/uploads/2014/04/GlobalLog.zip">GlobalLog</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[不显示对话框格式化磁盘的方法]]></title>
      <url>/2014/03/16/e4b88de698bee7a4bae5afb9e8af9de6a186e6a0bce5bc8fe58c96e7a381e79b98e79a84e696b9e6b395/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们都知道格式化磁盘会弹出如下图所示的这样的一个对话框。</p>
<p><a href="/uploads/2014/03/20140316210304.png"><img src="/uploads/2014/03/20140316210304-177x300.png" alt="20140316210304"></a></p>
<p>编写格式化磁盘的程序的时候，我们需要用到SHFormatDrive这个API，同样的，他也会弹出一个对话框。出现对话框当然是为了安全考虑，防止磁盘被用户不知情的情况下格式化，导致数据丢失。但是，某些情况下，确实希望静默的去格式化，而不去打扰用户，例如格式化Ramdisk。那么就需要找点一个办法要求不弹出对话框的格式化磁盘。既然Windows并没有提供这样的API，那我们只能深入分析下调用过程，找出可以使用的API。</p>
<p>怎么找的就不想说了，无非用ProcMon看一下堆栈就清楚明白了。在fmifs.dll中有一些导出的API可以帮助完成这一的任务，比如FormatEx，FormatEx2。</p>
<p>这里简单的描述下FormatEx的用法：<br>函数原型是</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">VOID WINAPI <span class="title">FormatEx</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">	LPCWSTR DriveRoot,</span></span></div><div class="line"><span class="function"><span class="params">	MEDIA_TYPE MediaType,</span></span></div><div class="line"><span class="function"><span class="params">	LPCWSTR FileSystemTypeName,</span></span></div><div class="line"><span class="function"><span class="params">	LPCWSTR Label,</span></span></div><div class="line"><span class="function"><span class="params">	BOOL QuickFormat,</span></span></div><div class="line"><span class="function"><span class="params">	ULONG ClusterSize,</span></span></div><div class="line"><span class="function"><span class="params">	FILE_SYSTEM_CALLBACK Callback</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>参数<br>DriveRoot —— 盘符，如”K:\”<br>MediaType —— 磁盘类型，如FixedMedia<br>FileSystemTypeName —— 要格式化的文件系统，如”NTFS”<br>Label —— 标签，随便写吧<br>QuickFormat —— 快速格式化<br>ClusterSize —— 簇大小<br>Callback —— 状态回调函数  </p>
<p>回调函数原型</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOLEAN</span> <span class="params">(__stdcall *FILE_SYSTEM_CALLBACK)</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">	ULONG                        Command,</span></span></div><div class="line"><span class="function"><span class="params">	ULONG                        Action,</span></span></div><div class="line"><span class="function"><span class="params">	PVOID                        pData</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>Command 表示Action和pData的意义，比如Command = 0表示pData是进度，Command = 11表示完成。还有其他的状态，例如错误等等，这些google一下就知道了。这个函数返回TRUE表示函数继续运行，FALSE表示停止格式化。</p>
<p>比如，下面是格式化K盘：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FormatEx(<span class="string">L"K:\", FixedMedia, L"</span>NTFS<span class="string">", L"</span><span class="number">0</span>CCh<span class="string">", TRUE, 4096, FormatExCallback);</span></div><div class="line"><span class="string"> </span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个有意思的warning —— C4930]]></title>
      <url>/2014/03/01/e4b880e4b8aae69c89e6848fe6809de79a84warning-c4930/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>C4930是微软的C++编译器提示的一个警告，在维基百科中，把造成这种警告的语句描述成最让人为难的解析的语句。那么这里我们看看到底是有多么为难，这个可以帮助我们进一步了解C++和编译器。</p>
<p>那么首先，我最开始发现这个问题是在类似这样的代码中碰到的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="function">ifstream <span class="title">s</span><span class="params">(<span class="string">"d:\\xxx.txt"</span>)</span></span>;</div><div class="line">std::string str(std::istream_iterator&lt;char&gt;(s), std::istream_iterator&lt;char&gt;());</div><div class="line"> </div></pre></td></tr></table></figure>
<p>如果编译这个，编译器会毫不留情地扔给你一个C4930警告，提示编译器不知道怎么做，所以跳过编译。如果你没看懂这警告，后果就是这句话根本不会编译进去，即使编译通过了，运行也会和设想的不同。</p>
<p>先说个简单的C4930的例子吧。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">MyClass <span class="title">sample</span><span class="params">()</span></span>;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这句代码非常简单，也很容易明白。如果这么写，那么编译器就混乱，因为这句话可以是描述：<br>1.一个变量的定义，调用默认构造。<br>2.一个函数的声明。<br>所以编译器就傻了，他把这个认为是函数声明，所以不会做任何事情。<br>同样的事情发生在  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">std::string str(std::istream_iterator&lt;char&gt;(s), std::istream_iterator&lt;char&gt;());</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这里，我们实际上就是给string的构造函数传入iterator来构造这个string。但是编译器可不是这么觉得，他认为这句话应该这样解析：一个返回string的函数，函数名为str，函数参数有两个并且类型相同，都是istream_iterator<char>，不同的是一个有参数名s，一个省略了参数名！</char></p>
<p>编译器这么解析，也真没错，我们就只能通过修改代码来明确目的了。通常的做法是给第一个iterator外加上括<br>号：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">std::string str((std::istream_iterator&lt;char&gt;(s)), std::istream_iterator&lt;char&gt;());</div><div class="line"> </div></pre></td></tr></table></figure>
<p>不过，我写这两行代码也就是为了偷懒读取一个文件的字符串，所以我可以干脆改成一行：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">std::string str(std::istream_iterator&lt;char&gt;(std::ifstream("d:\\xxx.txt")), std::istream_iterator&lt;char&gt;());</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这样就能顺利编译运行了。</p>
<p>最近在看新版的《The C++ Standard Library A Tutorial and Reference》里面也看到了这个东西，很有意思所<br>以拿出来说下。而且新版的书中，已经包含了C++11的解释，很有意思。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[GUID TOOL —— 一个转换GUID格式的小工具]]></title>
      <url>/2014/02/23/guid-tool-e4b880e4b8aae8bdace68da2guide6a0bce5bc8fe79a84e5b08fe5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>周末闲来无事，逆向点有趣的功能的时候遇到这样一个问题。有些16进制的数貌似就是GUID，但是需要转换为注册表形式，才方便在注册表里面搜索。所以就写了个小工具转换16进制，C语言格式以及注册表格式的GUID。</p>
<p>usage: guid.exe &lt;&lt;-r|-c|-h&gt; guid_string&gt; | &lt;-g&gt;<br>-r Format registry guid string.<br>-c Format C code guid string.<br>-x Format HEX guid string.<br>-g Create new guid.  </p>
<p><a href="/uploads/2014/02/20140223220404.png"><img src="/uploads/2014/02/20140223220404-1024x549.png" alt="20140223220404"></a></p>
<p><a href="/uploads/2014/02/20140223220314.png"><img src="/uploads/2014/02/20140223220314-1024x570.png" alt="20140223220314"></a></p>
<p>下载：<a href="/uploads/2014/02/guid.zip">guid</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SSD TRIM功能的一些记录]]></title>
      <url>/2014/02/11/ssd-trime58a9fe883bde79a84e4b880e4ba9be8aeb0e5bd95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>如今SSD越来越普及了，本来就想了解下关于SSD的一些情况，正好工作中有机会接触这一块的东西，很幸运。这里先记录一些已知知识，方便以后自己查阅。</p>
<p>说到SSD，第一个想到的就是读写速度快。那个就要归功于其存储原理，关于SSD存储原理的文章很多，我这里简单通俗的描述一下：  </p>
<ol>
<li>SSD存储不同于机械硬盘，他没有机械硬盘所谓的扇区、柱面，磁头。查询逻辑地址上的数据没有机械上的寻址（没有马达）。SSD的存储介质是闪存。  </li>
<li>SSD存储数据被覆盖的时候不会马上覆盖原有数据，而是继续往之前没有写的闪存上写。因为闪存擦除次数非常有限，同一个地方小范围反复擦除会导致整个SSD的寿命缩短。  </li>
<li>SSD内部是有自己的GC（垃圾回收器），这个GC擦除不需要的数据以及调整需要的数据的位置，能帮助SSD进行擦除平衡。  </li>
</ol>
<p>而这里重点要说到的TRIM功能就是辅助GC更好工作的一环。从Windows 7开始，文件系统上已经集成了自动TRIM功能。但是早些时候的系统，例如Windows XP，就没有这样的功能了。所以手动TRIM工具就出现了。比如Intel的固态硬盘工具集，其中就包含了手动TRIM功能。也许，有人回想，SSD的高端用户团体怎么会还在使用XP呢？不幸的是还真有这样一群坚守XP的SSD用户。下面就记录一些关于执行TRIM要做的事情。</p>
<p>先决条件：  </p>
<ol>
<li>要执行TRIM，首先要确保自己的硬盘模式是AHCI的。  </li>
<li>然后，系统需要时XP SP2 RC2以上（我想就算是XP的用户，现在也应该都是SP3了吧）。  </li>
</ol>
<p>上面的第一条非常重要，因为目前世面上的大部分盗版盘和所有正版安装盘，都是没有带AHCI驱动的。也就是说，如果你的BIOS上把硬盘模式调整为AHCI，那你回没有任何意外看到一个蓝屏。少部分盗版系统盘会说明自己是支持AHCI的，否则，就需要在IDE/ATA模式下，安装系统，然后去网上找到你的BIOS所指定AHCI驱动，安装后在把BIOS调整回AHCI。</p>
<p>最后，来看看执行TRIM的一种思路：  </p>
<ol>
<li>判断系统版本，硬盘的控制器，SSD是否支持TRIM。  </li>
<li>创建多个1G的文件，直到占满所有磁盘空间。  </li>
<li>获得这些文件的基于卷的簇。  </li>
<li>将簇转换成基于卷的逻辑地址。  </li>
<li>将基于卷的逻辑地址转换成基于硬盘的逻辑地址。  </li>
<li>按照ATA文档，发送TRIM指令。  </li>
<li>删除所有创建的1G文件。  </li>
</ol>
<p>上面有几个和ATA相关的简单介绍下。首先是SSD是否支持TRIM的问题，需要发送DEVICE IDENTIFY指令，获得硬盘数据，其中WORD 169表示是否支持TRIM，如果是1就是支持了。其次，发生TRIM指令，实际上发送的是DATA SET MANAGEMENT指令，其中Features register设置为1，即为TRIM指令了。至于如何在没有驱动的情况下发生这些指令（这也是我要求系统版本要是XP SP2 RC2以上的原因），可以利用DeviceIOControl函数发送IOCTL_ATA_PASS_THROUGH来完成。</p>
<p>这些记录已经很详细了，那几百行的代码就没必要贴出来了。</p>
<p>另外TRIM还有一个思路，实现起来可以麻烦一些，简单说说吧：  </p>
<ol>
<li>首先获得NTFS的Bitmap，获得空闲的簇。  </li>
<li>转换空闲的簇到基于硬盘的逻辑地址。  </li>
<li>发送TRIM指令  </li>
</ol>
<p>之所以说这个比较麻烦，是因为他需要保证在进行TRIM的时候，NTFS不发生写操作。方法就是LOCK VOLUME，但不幸的是，系统盘是没法LOCK的，所以这就不得不写一个Native Application，放在开机的时候运行，也就是Check Disk运行的时机。这个思路的优点是：TRIM全面，精确，速度快。</p>
<p>差不多就是这些了，希望这个记录对自己和他人都有所帮助。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一点有关Ntdll中提供的bitmap系列函数]]></title>
      <url>/2014/01/18/e4b880e782b9e69c89e585b3ntdlle4b8ade68f90e4be9be79a84bitmape7b3bbe58897e587bde695b0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我们都知道STL中提供了一个bitset类，但是在我真正操作有关文件系统的时候，发现这个类提供的功能并不能满足我的需求。幸运的是Ntdll中提供了一套操作bitmap的API。于是我抽了点时间把这几个API总结了一下，写成了一个类。这个类只是简单的对Ntdll的bitmap相关API做很浅的封装，没啥好说的。要说的是这套bitmap的API用起来确实很方便。<br>这些API包括：<br>RtlInitializeBitMap<br>RtlFindClearBits<br>RtlFindClearBitsAndSet<br>RtlFindClearRuns<br>RtlFindLastBackwardRunClear<br>RtlFindLongestRunClear<br>RtlFindNextForwardRunClear<br>RtlFindSetBits<br>RtlFindSetBitsAndClear<br>RtlSetAllBits<br>RtlSetBits<br>RtlClearAllBits<br>RtlClearBits<br>RtlNumberOfClearBits<br>RtlNumberOfSetBits<br>RtlAreBitsClear<br>RtlAreBitsSet<br>以上这些，在MSDN上都能查到API的详细文档介绍。唯一不方便的就是使用的时候需要GetProcAddress一下。所以我为了自己以后使用方便才写了一个类。</p>
<p>在项目（<a href="https://github.com/0cch/bitmap" target="_blank" rel="external">https://github.com/0cch/bitmap</a>）中，bitmap_class是封装类，整个工程是一个使用这套API，获得文件系统的bitmap，并且查找空闲簇的一个例子。</p>
<p><a href="/uploads/2014/01/2014-01-18_101801.png"><img src="/uploads/2014/01/2014-01-18_101801.png" alt="2014-01-18_101801"></a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[总结和展望：质量比较大点，就不容易被风吹动]]></title>
      <url>/2013/12/31/e680bbe7bb93e5928ce5b195e69c9befbc9ae8b4a8e9878fe6af94e8be83e5a4a7e782b9efbc8ce5b0b1e4b88de5aeb9e69893e8a2abe9a38ee590b9e58aa8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>又到了一年一度的总结和展望。时间过得真快，2012年定计划的那会好想就发生在昨天。还能清晰的记得当时的计划，当然也是因为计划定的足够的简单。当然还是把个人的计划放在后面，先来总结下2013年的工作。这年的工作真是富有戏剧性，工作中做了一些网页前端的工作，这确实让我措手不及，不过既然组里有这样的需求，也只能硬着头皮上了，还好是这也并不算忙，不影响个人计划的进展。另一方面，公司拿我们部门和其他公司合并了，<br>换句话说，我们部门被裁了，只不过以一种漂亮的方式。就如同所有的接纳新员工的老大一样，新公司的leader会给你谈未来画大饼。只不过，对不起，我真的不看好这种抱团取暖的合并，所以，我选择离开。由于平时有一定的积累，所以找份靠谱的工作也并不是特别难的事情。能预感到新的工作会比较忙，不过我想，应该还是能hold住的。</p>
<p>当然，要说最放不下的，要数公司的健身房。掐指一算，已经坚持锻炼了16个月了！依稀记得12年是拼命跑25分钟能跑到4km多点，而13年已经能跑过5km了。一年的时间，让我在25分钟里能超越过去的自己两圈，“想想还有点小激动呢！”。另外肱二头肌和肱三头肌已经比较明显了，上臂粗了好多，穿短袖看起来MAN了好多，不过腹肌虽然能看出来，但还是不算特别明显。这里不得不提醒一下sysdbg的博主，“我督促你健身了16个月，你是不是应该请我吃金钱豹啊？！别客气，跪谢就免了，嗯！”。噢！说到这货，我还想到了一个事情，就是练字。现在字终于写的有点人样了，虽然写急了还是很丑，但是应该比以前好点了吧……大概……是这样。</p>
<p>我记得，13年的个人计划只有一个就是山寨sysinternals的工具。这次算是完成的比较好吧，工具集中大部分小工具都山寨了，只有个别界面特别复杂，功能特别强大的工具没有山寨。实在是没有动力写界面。另外，又一次把minikernel重写了一次，也围绕这个发布了不少的blog，但是这个minikernel还是缺少挺多的东西，比如很核心的多进程和多线程。一方面是突然遇到公司方面的事情打断了进度，另一个方面也是自己懒。</p>
<p>至于2014年的个人计划，还真不好说，还不知道新工作是个什么情况，但是我个人还是比较想写一个脚本语言以及完善这个minikernel的。另外继续健身，练字也是必须的。最近因为灌篮高手高清重置版播出了，也导致我又想没事抽出点时间打打球了。另外在13年，花了很多时间看dota2的视频，这个也是被sysdbg的博主吐槽了好久，最近也已经开始戒dota了，时间真是越来越不够用。<br>希望15年写总结的时候，能看到一个质量更大的自己吧，希望写的这些计划能完成75%以上。</p>
<p>最后，还是祝福家人，朋友，自己在新的一年里幸福安康，合家欢乐！！！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ShowIEDevTool —— 打开IE控件的开发人员工具]]></title>
      <url>/2013/12/07/showiedevtool-e68993e5bc80iee68ea7e4bbb6e79a84e5bc80e58f91e4babae59198e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近在网上看到一大牛blog（<a href="http://blog.titilima.com/launch-f12-tools.html" target="_blank" rel="external">http://blog.titilima.com/launch-f12-tools.html</a>），讨论的是在内嵌的IE窗口中，打开开发人员工具。文章写的很好，而且还提供了开源的工具，实在是业界良心。于是我臭不要脸的A了部分关键代码，弄了个命令行版工具。有兴趣的强烈推荐阅读上面的blog，以及其提供的开源工具的代码。</p>
<p>下载<a href="/uploads/2013/12/ShowIEDevTool.zip">ShowIEDevTool</a></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[XPerfHelper —— XPerf的Windows命令行脚本生成工具]]></title>
      <url>/2013/12/01/xperfhelper-xperfe79a84windowse591bde4bba4e8a18ce8849ae69cace7949fe68890e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>使用过XPerf的应该都知道，写一个XPerf的命令行是多么的麻烦，如果不太熟悉，需要反复的查看帮助里的参数。所以一般情况下，大家会把命令写到一个cmd或者bat的脚本中，这样就可以双击来使用XPerf，只需要第一次费点心思写脚本罢了。但是我还是觉得，即使是只用写一次脚本，也还是挺麻烦的，于是写了这个小工具，生成cmd脚本文件。妈妈再也不用担心我的XPerf命令写错了。</p>
<p><a href="/uploads/2013/12/20131201221223.png"><img src="/uploads/2013/12/20131201221223.png" alt="20131201221223"></a></p>
<p>如上图所示，我们可以选择kernel flag和stackwalk，然后选择providers，点击OK，生成cmd文件即可。下面是一个生成的cmd的内容：</p>
<p><a href="/uploads/2013/12/20131201222315.png"><img src="/uploads/2013/12/20131201222315.png" alt="20131201222315"></a></p>
<p>下载<a href="/uploads/2013/12/XPerfHelper.zip">XPerfHelper</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ETW对程序进行监控和分析]]></title>
      <url>/2013/11/17/e4bdbfe794a8etwe5afb9e7a88be5ba8fe8bf9be8a18ce79b91e68ea7e5928ce58886e69e90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>ETW（Event Tracing for Windows）是Windows提供的对程序进行事件记录，跟踪，使用的机制。我们可以利用这个机制对程序进行调试和性能分析。从Windows Vista开始，ETW已经非常好的融合在Windows内核之中了，在Windows 7开始，这一个机制更加完善，几乎记录了Windows运行的每一个细节。我个人猜测，从Windows Vista开始到Windows 7直到现在的Windows 8，性能都在不断提高，ETW机制应该是功不可没的。</p>
<p>ETW是Windows提供的机制，我们要使用他还需要工具，这些工具我们可以自己开发，因为Windows提供了调用接口。当然，更惬意的选择就是直接使用Windows提供的工具集WPT（Windows Performance Toolkit）。利用WPT和SDK，我们可以将ETW融入到我们自己的程序中，帮助我们调试程序和提升性能。</p>
<p>以下是我们需要的工具：<br>SDK:  </p>
<ol>
<li>ECMangen.exe  </li>
<li>mc.exe  </li>
</ol>
<p>Windows:<br>WEVTUtil.exe  </p>
<p>WPT:  </p>
<ol>
<li>XPerf.exe  </li>
<li>XPerfView.exe  </li>
</ol>
<p>首先我们需要用SDK中的工具ECMangen，生成一个manifest文件，这个文件用来描述记录的事件，如图。<br><a href="/uploads/2013/11/20131117114336.png"><img src="/uploads/2013/11/20131117114336.png" alt="20131117114336"></a><br>这里，我们首先创建一个Provider，接下来创建一个Event，参数可以随便填下，就像上图所示。作为演示，这里一个Event就够了（FirstEvent）。<br>然后保存为0CChProvider.man。</p>
<p>接下来我们MC来生成一个头文件，一个资源文件和两个二进制文件。命令行如：<br>mc -um C:\etw\0CChProvider.man<br><a href="/uploads/2013/11/20131117114801.png"><img src="/uploads/2013/11/20131117114801.png" alt="20131117114801"></a></p>
<p>然后我们可以创建一个工程，加入这个头文件和资源文件。并且在代码中插入写事件的代码，例如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../0CChProvider.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">    EventRegisterMy0CChProvider();</div><div class="line">    EventWriteFirstEvent(<span class="string">L"Hello ETW World!"</span>);</div><div class="line">    Sleep(<span class="number">1000</span>);</div><div class="line">    EventWriteFirstEvent(<span class="string">L"Bye ETW World!"</span>);</div><div class="line">    EventUnregisterMy0CChProvider();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>在这里，我们利用EventRegisterMy0CChProvider先注册自己的Provider，接下写事件才会发挥作用。记录事件后，我们需要反注册Provider。<br>好了，演示代码就这么一点，然后编译即可。</p>
<p>接下来我们需要注册这个Provider给系统，需要使用到系统自带的工具WEVTUtil.exe。<br>wevtutil im C:\etw\0CChProvider.man</p>
<p>注册成功后就可以利用XPerf开启ETW，然后运行程序，查看记录的事件了。</p>
<ol>
<li>xperf -start 0cch -on My0CChProvider:::’stack’</li>
<li>xperf -on base</li>
<li>Run 0CChProvider.exe</li>
<li>xperf -stop 0cch -stop -d d:\0cch.etl</li>
<li>xperf d:\0cch.etl</li>
</ol>
<p>XPerfView会生成分析数据如图：<br><a href="/uploads/2013/11/20131117115853.png"><img src="/uploads/2013/11/20131117115853.png" alt="20131117115853"></a></p>
<p><a href="/uploads/2013/11/20131117120007.png"><img src="/uploads/2013/11/20131117120007-1024x622.png" alt="20131117120007"></a></p>
<p>整体来说，想简单的使用ETW也就是这么简单，当然你也可以把他弄得很复杂，这里就不介绍了。话说<a href="http://sysdbg.com/" target="_blank" rel="external">sysdbg</a>早就让我写点XPerf的东西，但是因为各种懒没写，刚好最近终于有空了，就先写了这么个简单的介绍，就当作一个开篇吧，话说某人的Blog好久没更新了呀。。。</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windbg script中获得调试环境的基本信息]]></title>
      <url>/2013/11/01/windbg-scripte4b8ade88eb7e5be97e8b083e8af95e78eafe5a283e79a84e59fbae69cace4bfa1e681af/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天继续来玩Windbg script。在写复杂的脚本的时候，可能需要根据调试的环境，指定不同的脚本代码来运行。而Windbg貌似没有提供很好的方式，让脚本得知调试环境。还好，我们可以用一些其他的方式获得这些信息，例如：写一个扩展程序来设置这些信息到Aliase上，<a href="https://github.com/0cch/0cchext" target="_blank" rel="external">0cchext</a>就实现了这个功能。另外一个方式就是使用脚本自身来获得一些简单的信息，算是个windbg script中的小把戏吧。脚本如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$$ Initialize script environment</div><div class="line">$$ Author: nighxie </div><div class="line">$$ Blog: <span class="number">0</span>cch.net</div><div class="line">$$ @#NtMajorVersion @#NtMinorVersion - System version number.</div><div class="line">$$ @#DebugMode - <span class="number">0</span>:kd <span class="number">1</span>:lkd <span class="number">2</span>:user</div><div class="line"></div><div class="line">ad /q $&#123;/v:$sharedata&#125; </div><div class="line"></div><div class="line">.<span class="keyword">catch</span> &#123;</div><div class="line">    .foreach /pS <span class="number">2</span> ($&#123;/v:$addr&#125; &#123;!kuser&#125;) &#123;</div><div class="line">        aS $&#123;/v:$sharedata&#125; $&#123;$addr&#125;;</div><div class="line">        .leave;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.block &#123;</div><div class="line">    r @$t0=$&#123;$sharedata&#125;;</div><div class="line">    aS /x $&#123;/v:@#NtMajorVersion&#125; @@C++(((nt!_KUSER_SHARED_DATA *)@$t0)-&gt;NtMajorVersion);</div><div class="line">    aS /x $&#123;/v:@#NtMinorVersion&#125; @@C++(((nt!_KUSER_SHARED_DATA *)@$t0)-&gt;NtMinorVersion);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ad /q $&#123;/v:$sharedata&#125; </div><div class="line"></div><div class="line">.<span class="keyword">catch</span> &#123;</div><div class="line">    r @$t0 = <span class="number">0</span>;</div><div class="line">    .foreach ($&#123;/v:$addr&#125; &#123;lm1m m nt&#125;) &#123;</div><div class="line">        r @$t0 = $&#123;$addr&#125;;</div><div class="line">        .leave;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($vvalid(@$t0, <span class="number">1</span>)) &#123;</div><div class="line">    aS $&#123;/v:@#DebugMode&#125; <span class="number">0</span>;</div><div class="line">     .foreach ($&#123;/v:$val&#125; &#123;.<span class="keyword">catch</span>&#123;? @eax&#125;&#125;) &#123;</div><div class="line">        .<span class="keyword">if</span> ($scmp(<span class="string">"$&#123;$val&#125;"</span>, <span class="string">"\'@eax\'"</span>)==<span class="number">0</span>) &#123;</div><div class="line">            aS $&#123;/v:@#DebugMode&#125; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.<span class="keyword">else</span> &#123;</div><div class="line">    aS $&#123;/v:@#DebugMode&#125; <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windbg script的notepad++语法高亮配置文件]]></title>
      <url>/2013/10/15/windbg-scripte79a84notepade8afade6b395e9ab98e4baaee9858de7bdaee69687e4bbb6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>经常写复杂的windbg脚本的程序员肯定知道，windbg脚本的宏替换的执行方式，让人非常的不舒服。另外windbg的脚本也没有一个好用的语法高亮编辑器，所以让脚本写起来更加痛苦。前者看来是已成定局，很难解决了。不过后者还是有机会改善的，闲暇之余，写了一个notepad++上的windbg脚本的语法高亮配置文件。以<a href="http://0cch.net/wordpress/?p=363" target="_blank" rel="external">上一篇文章</a>中的windbg脚本为例，高亮效果如下图：</p>
<p><a href="/uploads/2013/10/20131015164715.png"><img src="/uploads/2013/10/20131015164715.png" alt="20131015164715"></a></p>
<p>导入方式也非常简单，点击[语言]菜单下的define your language，在弹出的对话框中点击导入按钮，导入配置文件即可。</p>
<p><a href="/uploads/2013/10/20131015164704.png"><img src="/uploads/2013/10/20131015164704.png" alt="20131015164704"></a></p>
<p>下载脚本<a href="/uploads/2013/10/wds.zip">wds</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windbg内核调试查看窗口句柄信息的脚本]]></title>
      <url>/2013/10/07/windbge58685e6a0b8e8b083e8af95e69fa5e79c8be7aa97e58fa3e58fa5e69f84e4bfa1e681afe79a84e8849ae69cac/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>十一长假瞬间就结束了，整一周都在玩，也没有研究什么好玩的东西，这里就分享一个以前写的windbg脚本吧。通途是内核调试查看窗口句柄信息。用法很简单，例如 $$&gt;a&lt;hwnd.wds 000207B8。运行结果如下图：</p>
<p><a href="/uploads/2013/10/20131007195716.png"><img src="/uploads/2013/10/20131007195716.png" alt="20131007195716"></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">$$ Convert HWND to tagWnd</div><div class="line">$$ Author: nighxie </div><div class="line">$$ Blog: <span class="number">0</span>cch.net</div><div class="line"></div><div class="line">.<span class="keyword">if</span> ($&#123;/d:$arg1&#125;) &#123;</div><div class="line"></div><div class="line">    .<span class="keyword">if</span> ($&#123;/d:$arg2&#125;) &#123;</div><div class="line">            .<span class="keyword">if</span> ($&#123;$arg2&#125; == <span class="number">1</span>) &#123;</div><div class="line">                r $t0 = nt!PsActiveProcessHead</div><div class="line">                .<span class="keyword">for</span> (r $t1 = poi(@$t0);(@$t1 != <span class="number">0</span>) &amp; (@$t1 != @$t0);r $t1 = poi(@$t1)) &#123;</div><div class="line">                r? $t2 = #CONTAINING_RECORD(@$t1, nt!_EPROCESS, ActiveProcessLinks);</div><div class="line">                as /x $&#123;/v:$ProcAddr&#125; @$t2;</div><div class="line">                as /ma $&#123;/v:$ImageName&#125; @@c++(&amp;@$t2-&gt;ImageFileName[<span class="number">0</span>]);</div><div class="line"></div><div class="line">                .block &#123;</div><div class="line">                    $$ .echo $&#123;$ImageName&#125;</div><div class="line">                    .<span class="keyword">if</span> ($sicmp(<span class="string">"$&#123;$ImageName&#125;"</span>, <span class="string">"explorer.exe"</span>) == <span class="number">0</span>) &#123;</div><div class="line">                        .echo Found the process at $&#123;$ProcAddr&#125;;</div><div class="line">                        .process /p /r $&#123;$ProcAddr&#125;;</div><div class="line">                        ad $&#123;/v:$ImageName&#125;;</div><div class="line">                        ad $&#123;/v:$ProcAddr&#125;;</div><div class="line">                        .<span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ad $&#123;/v:$ImageName&#125;;</div><div class="line">                ad $&#123;/v:$ProcAddr&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    r @$t1 = $&#123;$arg1&#125;;</div><div class="line">    r @$t0 = win32k!gSharedInfo;</div><div class="line">    .<span class="keyword">if</span> ((@$t1&amp;<span class="number">0xffff</span>) &lt; @@C++(((win32k!tagSHAREDINFO *)@$t0)-&gt;psi-&gt;cHandleEntries)) &#123;</div><div class="line">        r @$t0 = @@C++(((win32k!tagSHAREDINFO *)@$t0)-&gt;aheList);</div><div class="line">        r @$t0 = @@C++(@$t0+(@$t1&amp;<span class="number">0xffff</span>)*<span class="keyword">sizeof</span>(win32k!_HANDLEENTRY));</div><div class="line">        r @$t0 = poi(@$t0);</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"HWND: %p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;head.h);</div><div class="line">        .<span class="built_in">printf</span> /D <span class="string">"tagWnd * @ %p\n"</span>, @$t0;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;strName.Buffer) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Window Name: %mu\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;strName.Buffer);</div><div class="line">        &#125;</div><div class="line">        .<span class="built_in">printf</span> /D <span class="string">"tagCLS * @ pcls) win32k!tagCLS\"&gt;%p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;pcls);</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;pcls-&gt;lpszAnsiClassName) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Window Class Name: %ma\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;pcls-&gt;lpszAnsiClassName);</div><div class="line">        &#125;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;spwndNext) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Next Wnd:     %p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;spwndNext-&gt;head.h);</div><div class="line">        &#125;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;spwndPrev) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Previous Wnd: %p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;spwndPrev-&gt;head.h);</div><div class="line">        &#125;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;spwndParent) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Parent Wnd:   %p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;spwndParent-&gt;head.h);</div><div class="line">        &#125;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;spwndChild) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Child Wnd:    %p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;spwndChild-&gt;head.h);</div><div class="line">        &#125;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;spwndOwner) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> <span class="string">"Own Wnd:      %p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;spwndOwner-&gt;head.h);</div><div class="line">        &#125;</div><div class="line">        .<span class="keyword">if</span> (@@C++(((win32k!tagWnd *)@$t0)-&gt;lpfnWndProc) != <span class="number">0</span>) &#123;</div><div class="line">            .<span class="built_in">printf</span> /D <span class="string">"pfnWndProc:   head.pti-&gt;pEThread)-&gt;Tcb.Process);u @@C++(((win32k!tagWnd *)@$t0)-&gt;lpfnWndProc)\"&gt;%p\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;lpfnWndProc);</div><div class="line">        &#125;</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"Visiable: %d\n"</span>, @@C++((((win32k!tagWnd *)@$t0)-&gt;style &amp; (<span class="number">1</span>&lt;&lt;<span class="number">28</span>)) != <span class="number">0</span>);</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"Child:    %d\n"</span>, @@C++((((win32k!tagWnd *)@$t0)-&gt;style &amp; (<span class="number">1</span>&lt;&lt;<span class="number">30</span>)) != <span class="number">0</span>);</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"Minimized:%d\n"</span>, @@C++((((win32k!tagWnd *)@$t0)-&gt;style &amp; (<span class="number">1</span>&lt;&lt;<span class="number">29</span>)) != <span class="number">0</span>);</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"Disabled: %d\n"</span>, @@C++((((win32k!tagWnd *)@$t0)-&gt;style &amp; (<span class="number">1</span>&lt;&lt;<span class="number">27</span>)) != <span class="number">0</span>);</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"Window Rect &#123; %d, %d, %d, %d&#125;\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;rcWindow.left), @@C++(((win32k!tagWnd *)@$t0)-&gt;rcWindow.top), @@C++(((win32k!tagWnd *)@$t0)-&gt;rcWindow.right), @@C++(((win32k!tagWnd *)@$t0)-&gt;rcWindow.bottom);</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"Clent Rect  &#123; %d, %d, %d, %d&#125;\n"</span>, @@C++(((win32k!tagWnd *)@$t0)-&gt;rcClient.left), @@C++(((win32k!tagWnd *)@$t0)-&gt;rcClient.top), @@C++(((win32k!tagWnd *)@$t0)-&gt;rcClient.right), @@C++(((win32k!tagWnd *)@$t0)-&gt;rcClient.bottom);</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    .<span class="keyword">else</span> &#123;</div><div class="line">        .<span class="built_in">printf</span> <span class="string">"HWND is out of range.\n"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">.<span class="keyword">else</span> &#123;</div><div class="line">    .echo <span class="string">"Usage $$&gt;a&lt;$&#123;$arg0&#125; HWND(HEX)"</span></div><div class="line">    .echo <span class="string">"e.g. $$&gt;a&lt;$&#123;$arg0&#125; 0x60962"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[解析youku视频地址的python脚本]]></title>
      <url>/2013/09/28/e8a7a3e69e90youkue8a786e9a291e59cb0e59d80e79a84pythone8849ae69cac/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>几个月前写的东西，偶然翻出来发现还能用，就贴出来吧。非专业python程序员，代码比较乱 :-(</p>
<p><a href="/uploads/2013/09/20130928134507.png"><img src="/uploads/2013/09/20130928134507.png" alt="20130928134507"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Created on 2013-3-6</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">@author: nightxie</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> urllib.parse</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetKeyString</span><span class="params">(seed)</span>:</span></div><div class="line">    base_string = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/\\:._-1234567890'</span>;</div><div class="line">    target_string = <span class="string">''</span>;</div><div class="line">    <span class="keyword">while</span> len(base_string) != <span class="number">0</span> :</div><div class="line">        seed = (seed * <span class="number">211</span> + <span class="number">30031</span>) % <span class="number">65536</span>;</div><div class="line">        index = (seed / <span class="number">65536</span> * len(base_string));</div><div class="line">        target_string += base_string[int(index)];</div><div class="line">        base_string = base_string[:int(index)] + base_string[int(index)+<span class="number">1</span>:];</div><div class="line">    <span class="keyword">return</span> target_string;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFildId</span><span class="params">(daye_str, seed)</span>:</span></div><div class="line"></div><div class="line">    new_list = daye_str.split(<span class="string">'*'</span>);</div><div class="line">    target_string = <span class="string">''</span>;</div><div class="line">    base_string = GetKeyString(seed);</div><div class="line">    length = len(new_list);</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> i &lt; length - <span class="number">1</span>:</div><div class="line">        index = int(new_list[i]);</div><div class="line">        target_string += base_string[index];</div><div class="line">        i += <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> target_string;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFlvPath</span><span class="params">(videoids, flv_type)</span>:</span></div><div class="line">    url = <span class="string">'http://v.youku.com/player/getPlayList/VideoIDS/'</span> + videoids + <span class="string">'/timezone/+08/version/5/source/video'</span></div><div class="line">    req = urllib.request.Request(url);</div><div class="line">    req.add_header(<span class="string">'Referer'</span>, <span class="string">'http://static.youku.com/v1.0.0307/v/swf/player_yk.swf'</span>);</div><div class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.56 Safari/537.17'</span>);</div><div class="line">    play_list = urllib.request.urlopen(req).read().decode(<span class="string">"utf8"</span>);</div><div class="line">   </div><div class="line">    play_list_data = json.loads(play_list)[<span class="string">'data'</span>][<span class="number">0</span>];</div><div class="line">    seed = play_list_data[<span class="string">'seed'</span>];</div><div class="line">    streamfileids = play_list_data[<span class="string">'streamfileids'</span>];</div><div class="line">    regs = play_list_data[<span class="string">'segs'</span>];</div><div class="line">    </div><div class="line">    type_fileid = streamfileids[flv_type];</div><div class="line">    type_list = regs[flv_type];</div><div class="line">    url_type = flv_type;</div><div class="line">    <span class="keyword">if</span> url_type == <span class="string">'hd2'</span>:</div><div class="line">        url_type = <span class="string">'flv'</span></div><div class="line">    </div><div class="line">    type_list_count = len(type_list);</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> i &lt; type_list_count :</div><div class="line">        fileid = GetFildId(type_fileid, seed);</div><div class="line">        fileid = fileid[:<span class="number">8</span>] + (<span class="string">"%0.2X"</span> % i) + fileid[<span class="number">10</span>:];</div><div class="line">        fileid += <span class="string">'?k='</span>;</div><div class="line">        fileid += type_list[i][<span class="string">'k'</span>];</div><div class="line">        flv_path = <span class="string">'http://f.youku.com/player/getFlvPath/sid/00_00/st/'</span>+url_type+<span class="string">'/fileid/'</span> + fileid;</div><div class="line">        print(flv_path);</div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetVideoIdsFromUrl</span><span class="params">(url)</span>:</span></div><div class="line">    url_object = urllib.parse.urlparse(url);</div><div class="line">    url_path = url_object.path;</div><div class="line">    <span class="keyword">return</span> url_path[<span class="number">11</span>:<span class="number">-5</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFlvPathFromUrl</span><span class="params">(url, video_type)</span>:</span></div><div class="line">    video_ids = GetVideoIdsFromUrl(url);</div><div class="line">    GetFlvPath(video_ids, video_type);</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</div><div class="line">        GetFlvPathFromUrl(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>]);</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"youku.py  "</span>);</div><div class="line">   </div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Floppy Disk Controller编程]]></title>
      <url>/2013/09/21/floppy-disk-controllere7bc96e7a88b/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="/uploads/2013/09/N82077AA.jpg"><img src="/uploads/2013/09/N82077AA.jpg" alt="N82077AA"></a></p>
<p>看的没错，这篇文章将描述一些关于Floppy Disk Controller的编程知识。我们知道，在当今的计算机硬件体系中，软盘驱动器是一个已经完全被淘汰的设备，那么为什么还要有这样一篇文章？原因很简单，如果想构建自己的操作系统，必须有相应的存储介质，而软盘正是这样一个好的存储介质。他的容量虽然很小，但是却完全足够应付我们的内核程序，另一方面软盘驱动器的控制相对于之前我所介绍的硬盘的控制要简单的多，而且关于软盘驱动器控制的教程和文章在互联网上也非常的多（虽然绝大部分都是英文的）。基于以上几点，我认为还是有必要把自己学到的知识写下了分享。</p>
<p>Floppy Disk Controller，中文称为：软盘控制器，简称：FDC，是一个用来控制软盘驱动器的芯片。在1980年代到1990年代，软盘控制器普遍使用于个人电脑以及与IBM PC兼容的机型上，如 8272A、82078、82077SL以及82077AA，其中82077AA是最先进的一款芯片（1991年开始生产）。除了软盘控制器，软驱本身也在几十年的历史中留下了许多机型，如图所示：<br><a href="/uploads/2013/09/floppy_types.png"><img src="/uploads/2013/09/floppy_types.png" alt="floppy_types"></a><br>实际上，我从刚刚接触软盘到最后软盘被淘汰，只使用过3.5英寸1.44MB的软盘，其他型号完全没有接触过。</p>
<p>对于CPU还运行在实模式下的启动引导程序和内核程序，我们可以调用BIOS提供的函数来完成软盘的访问，其中中断号是13h（INT13h），功能号为2（AH=2）是读取操作，功能号为3（AH=3）时是写入操作。实模式下通过中断读写软盘的资料很多（包括中文资料），如果想了解更多的实模式下访问软盘的知识，可以上网google一下，我这里就不做详细的介绍了。</p>
<p>虽然调用中断访问软盘简单，但是我们不能让自己的内核总是跑在实模式下啊。所以我们需要写一个能跑在保护模式下的软驱驱动，要完成这样的驱动，就必须对FDC进行编程了。不过在此之前，我们需要知道，到底PC上有没有软驱。要获得这个信息，我们需要读取CMOS，然后解析读取的信息即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mov dx, 70h</div><div class="line">mov al, 10h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 71h</div><div class="line">in  al, dx</div><div class="line"></div><div class="line">mov f_b, al</div><div class="line">and f_b, 0fh</div><div class="line">shr al, 4</div><div class="line">mov f_a, al</div><div class="line"></div><div class="line">f_a db	0h</div><div class="line">f_b db	0h</div><div class="line"> </div></pre></td></tr></table></figure>
<p>要从CMOS中获得软盘信息，我们需要先给对应的端口设置正确的索引，然后再去数据端口读取数据。具体做法是设置0x70端口为0x10，然后读取0x71端口。读取到的信息都放在一个字节中，需要把字节分为两个部分，高四位是驱动器A的类型索引号，低四位是驱动器B的类型索引号。索引号与软盘类型的对应关系如下图所示：<br><a href="/uploads/2013/09/cmos_floppytype.png"><img src="/uploads/2013/09/cmos_floppytype.png" alt="cmos_floppytype"></a></p>
<p>在确认了软驱存在的情况下，接下来就可以对FDC进行编程了。先来看看FDC的几个基本知识。</p>
<p><strong>寻址方式</strong><br>软盘驱动器使用CHS寻址方式。软盘介质总是有两个头（面），但磁道数和每个磁道的扇区扇区数是不一定的。通常情况下，1.44mb的软盘，他有80个磁道和每个磁道有18个扇区。另外值得注意的是，磁道和磁头是从0开始计算，但是扇区是从1开始计数的。即，有效的磁道通常为0到79，磁头为0或1，而扇区号是1到18的。如果访问0号扇区，那么一定会引起访问错误的。</p>
<p><strong>数据传输方式</strong><br>和硬盘的数据传输方式一样，软盘也支持PIO和DMA两种数据传输方式。<br>软盘使用的通常是ISA DMA方式（这和 PCI BusMastering DMA完全是两码事）。使用DMA传输的方法，简单来说就是这是DMA的通道2，如传输的字节数以及对应的物理地址。物理地址必须是以64k为边界的。当然，还需要设置IRQ6，当数据传输结束的时候，控制器将发送一个IRQ6的中断。用DMA传输数据，这个过程是不需要占用CPU时间的，对于多任务的系统是比较好的选择。缺点是ISA DMA这种古老的DMA比PIO还要慢。<br>PIO数据传输既可以使用轮询，也能使用中断。使用PIO模式传输数据的速度比DMA传输快10％，但这会消耗CPU周期，是一个巨大的成本问题。然而，如果我们的操作系统或应用程序是单任务的，那么没有别的程序需要CPU，这样你就也可以使用PIO模式。使用PIO的要点是，在设置好了各种命令后，需要等待中断或者轮询状态结果，最后还需要使用IO的方式，读取数据，也就是这部分需要消耗额外的CPU周期。<br>值得注意的是，bochs并不支持PIO模式，使用PIO模式的时候bochs会报错，提示没有完全实现PIO模式。所以我在实验代码中也没有写PIO的代码。毕竟我的实验环境是bochs。</p>
<p><strong>ISA DMA</strong><br>ISA DMA全称Industry Standard Architecture Direct Memory Access，是一种古老的DMA方式，速度比PIO还要慢，但是编程相对于PCI BusMastering DMA要简单一点。这里我并不打算详细介绍ISA DMA，因为说明它需要的篇幅不亚于这篇。后面的代码中，在必要的地方我会加入一些解释。</p>
<p><strong>3种模式</strong><br>这三种模式是：PC-AT模式，PS/2模式，Mode 30模式。现在最有可能看到硬件上仍然运行模式是30模式。</p>
<p>FDC寄存器<br><a href="/uploads/2013/09/floppy_regs.png"><img src="/uploads/2013/09/floppy_regs.png" alt="floppy_regs"></a></p>
<p>如上图所示，上面的寄存器我们不会都用到，一般情况下大概只会用到一半的样子，其他的我们可以暂时不去理会。另外我在这里不会列出每个寄存器的详细参数，因为这些参数很多而且复杂，不仅单调乏味，而且容易让初学者望而却步。我采取的做法是，先列出控制FDC的代码，然后在需要讲解的地方详细的说明。</p>
<p><strong>实践</strong><br>下面就是一段控制FDC读取软盘数据的代码。需要说明的是这份代码为了保持简洁易学，它没有任何的错误检测，另外代码也假设了你已经初始化了PIC，并且设置好了IRQ6。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">; MASM的宏应该不陌生吧，就不做解释了。</div><div class="line">outb macro port:req, b:req</div><div class="line">    mov dx, port</div><div class="line">    mov al, b</div><div class="line">    out dx, al</div><div class="line">endm</div><div class="line"></div><div class="line">inb macro port:req</div><div class="line">    mov dx, port</div><div class="line">    in al, dx</div><div class="line">endm</div><div class="line"></div><div class="line">wait_status macro</div><div class="line">    inb 3f4h</div><div class="line">@@:</div><div class="line">    test al, 80h</div><div class="line">    jz @B</div><div class="line">endm</div><div class="line"></div><div class="line">; ISA DMA 初始化部分， 由于ISA DMA不是这篇文章的重点</div><div class="line">; 所以这里只说明大概的用途。</div><div class="line">outb 0dh, 0ffh      ; 重置DMA控制器</div><div class="line">outb 0ah, 6h        ; 选择设置2号DMA通道</div><div class="line">outb 0ch, 0ffh      ; 重置Flipflop寄存器</div><div class="line">outb 4h, 0h         ; 设置DMA的物理地址，需要设置两次</div><div class="line">outb 4h, 0f0h       ; 我这里设置的是0xf000</div><div class="line">outb 81h, 0h        ; 设置地址24bit的高8bit为0，也就是0x00f000</div><div class="line">outb 0ch, 0ffh      ; 重置Flipflop寄存器</div><div class="line">outb 5h, 0ffh       ; 设置物理内存大小，其大小为Length-1</div><div class="line">outb 5h, 0fh        ; 我这里的内存大小是0x1000，所以设置为0xfff</div><div class="line">outb 0ah, 2h        ; 选择清除2号DMA通道</div><div class="line"></div><div class="line">; FDC的初始化过程</div><div class="line">outb 3f2h, 0h       ; 1.重置数字输出寄存器</div><div class="line">outb 3f2h, 0ch</div><div class="line">call WaitIrq</div><div class="line"></div><div class="line">mov ecx, 4</div><div class="line">check_int:</div><div class="line">wait_status</div><div class="line">outb 3f5h, 8h       ; 发送8号命令，该命令清除控制器触发的中断</div><div class="line">wait_status         ; 并且返回结果，这里重复4次，是为了清除4个软驱的状态</div><div class="line">inb 3f5h</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">wait_status</div><div class="line">loop check_int</div><div class="line"></div><div class="line">outb 3f7h, 0h       ; 2.设置传输速度为500kb/s</div><div class="line">wait_status</div><div class="line">outb 3f5h, 3h       ; 3.设置FDC里面三个时钟以及DMA。</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0dfh</div><div class="line">wait_status</div><div class="line">outb 3f5h, 2h</div><div class="line"></div><div class="line">outb 3f2h, 1ch      ; 开启软驱电动机</div><div class="line">wait_status</div><div class="line">outb 3f5h, 7h       ; 发送校验命令</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0h       ; 选择0号软驱</div><div class="line">wait_status</div><div class="line">outb 3f5h, 8h       ; 发送清楚中断命令，获得结果</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">outb 3f2h, 4h       ; 关闭电动机</div><div class="line"></div><div class="line">; 接下来是软盘的读取操作</div><div class="line">outb 3f2h, 1ch      ; 开启电动机</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0fh      ; 4.发送0f寻道命令</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0h</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0h</div><div class="line">wait_status</div><div class="line">outb 3f5h, 8h       ; 发送清楚中断命令，获得结果</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line"></div><div class="line">; 设置ISA DMA为读取</div><div class="line">outb 0ah, 6h</div><div class="line">outb 0bh, 46h</div><div class="line">outb 0ah, 2h</div><div class="line"></div><div class="line">wait_status</div><div class="line">outb 3f5h, 0e6h     ; 5.发送读取扇区命令</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0h       ; 设置磁头和驱动器号</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0h       ; 设置磁道</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0h       ; 设置磁头</div><div class="line">wait_status</div><div class="line">outb 3f5h, 1h       ; 设置扇区号</div><div class="line">wait_status</div><div class="line">outb 3f5h, 2h       ; 设置扇区大小</div><div class="line">wait_status</div><div class="line">outb 3f5h, 8h       ; 设置读取扇区数量</div><div class="line">wait_status</div><div class="line">outb 3f5h, 1bh      ; 设置磁盘为3.5英寸</div><div class="line">wait_status</div><div class="line">outb 3f5h, 0ffh     ; 设置读取长度，总是0xff</div><div class="line"></div><div class="line">call WaitIrq</div><div class="line"></div><div class="line">mov ecx, 7</div><div class="line">loop_ret:</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">loop loop_ret</div><div class="line"></div><div class="line">wait_status</div><div class="line">outb 3f5h, 8h       ; 发送清楚中断命令，获得结果</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">wait_status</div><div class="line">inb 3f5h</div><div class="line">outb 3f2h, 4h       ; 关闭电动机</div><div class="line"> </div></pre></td></tr></table></figure>
<p>1.重置数字输出寄存器<br>这是一个只写寄存器，可以用来控制FDC，例如控制软驱电动机，重置控制器，选择目标软驱，设置数据模式，以下是他的详细参数<br>Bits 0-1<br>00 - 软驱 0<br>01 - 软驱 1<br>10 - 软驱 2<br>11 - 软驱 3<br>Bit 2 重置<br>0 - 重置控制器<br>1 - 开启控制器<br>Bit 3 模式<br>0 - IRQ 模式<br>1 - DMA 模式<br>Bits 4 - 7 电动机控制器 (软驱 0 - 3)<br>0 - 停止电动机<br>1 - 开启电动机  </p>
<p>我这里设置的是0Ch也就是说，选择了0号软驱，开启了控制器和DMA模式。</p>
<p>2.设置传输速度为500kb/s<br>这个寄存器只有前两位有效，下面两位不同的组合表达了不同的速度，如下表：<br>00 500 Kbps<br>10 250 Kbps<br>01 300 Kbps<br>11 1 Mbps  </p>
<p>3.设置FDC里面三个时钟以及DMA<br>三个时钟分别是步进速率时钟、磁头卸载时钟和磁头装入时钟。数据格式如下：<br>S S S S H H H H - S=步进速率时钟 H=磁头卸载时钟<br>H H H H H H H NDMA - H=磁头装入时钟 NDMA=0 (DMA模式) 或者 1 (非DMA模式)<br>实际上这个大家可以随意设置，我设置的是步进速率时钟=3ms, 磁头卸载时钟=240ms, 磁头装入时钟=16ms  </p>
<p>4.发送寻道命令进行寻道<br>寻道命令的参数是两个自己，分别代表磁头、柱面和驱动器号，格式如下<br>x x x x x HD DR1 DR0 - HD=磁头 DR1/DR0 = 驱动器<br>C C C C C C C C - C=柱面  </p>
<p>5.发送读取扇区命令<br>读取和写入命令一样，有8个参数和7个返回值！<br>第1个参数字节 = (磁头号 &lt;&lt; 2) | 驱动器号 (驱动器号必须是当前选择的驱动器)<br>第2个参数字节 = 柱面号<br>第3个参数字节 = 磁头号 (没错，重复了 = =)<br>第4个参数字节 = 开始的扇区号<br>第5个参数字节 = 2 (总是2，代表软盘扇区大小总是512字节)<br>第6个参数字节 = 操作扇区数<br>第7个参数字节 = 0x1b (软盘大小是3.5in)<br>第8个参数字节 = 0xff (总是0xff)<br>这里不关心返回值，如果有兴趣可以自己查找资料。  </p>
<p>读取就是这样，如果要写入安排，只需要更改命令即可，这里就不再赘述了。最后按照国际惯例，提供一些深入学习的链接：<br><a href="http://wiki.osdev.org/Floppy" target="_blank" rel="external">http://wiki.osdev.org/Floppy</a><br><a href="http://en.wikipedia.org/wiki/Floppy" target="_blank" rel="external">http://en.wikipedia.org/wiki/Floppy</a><br><a href="http://www.isdaman.com/alsos/hardware/fdc/floppy.htm" target="_blank" rel="external">http://www.isdaman.com/alsos/hardware/fdc/floppy.htm</a><br><a href="http://www.osdever.net/documents/82077AA_FloppyControllerDatasheet.pdf?the_id=41" target="_blank" rel="external">http://www.osdever.net/documents/82077AA_FloppyControllerDatasheet.pdf</a>  </p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Windbg Logexts监控程序API调用]]></title>
      <url>/2013/09/14/e4bdbfe794a8windbg-logextse79b91e68ea7e7a88be5ba8fapie8b083e794a8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在我们调试BUG和逆向程序的时候，往往需要监控一些API的调用。这个时候我们可以借助调试器和第三方工具完成这样的任务。例如调试器可以下断点查看栈状态得到相关信息，或者使用第三方工具如API Monitor可以方便的监控API的调用。不过，这篇文章中想说的是另一个工具，Windbg的扩展程序Logexts.dll。闲话少说，我们先看一看监控的效果如何吧。</p>
<p><a href="/uploads/2013/09/20130914230701.png"><img src="/uploads/2013/09/20130914230701.png" alt="20130914230701"></a></p>
<p>上图是Windbg输出的信息，再看看使用logviewer.exe查看的效果。</p>
<p><a href="/uploads/2013/09/20130914234812.png"><img src="/uploads/2013/09/20130914234812.png" alt="20130914234812"></a></p>
<p>怎么样，是不是相当的不错！那么下面我就来简单介绍一下，这个扩展的用法。</p>
<p>!logexts.logi<br>将Logger注入目标程序，初始化监控，但是并不开启它。</p>
<p>!logexts.loge<br>开启监控，如果之前没有调用logexts.logi，这个扩展命令会先初始化监控，然后启动。</p>
<p>!logexts.logd<br>停止监控。这个命令会摘掉所有的Hook，从而让程序自由运行。不过COM的Hook并不会被摘除。</p>
<p>!logexts.logo<br>显示或者修改输出选项，这里有三种输出方式：1.在调试器中显示，2.输出到一个文本文件，3.输出到lgv文件。其中lgv文件会包含更多的信息，我们可以使用LogViewer进行查看。</p>
<p>!logexts.logc<br>显示或者控制监控的API分类。</p>
<p>!logexts.logb<br>显示或者刷新输出缓存。由于如果在监控过程中发生异常，那么扩展可能无法将记录的日志写入文件中，这个时候我们就需要这个命令，手动的将缓存中的数据写入文件。</p>
<p>!logexts.logm<br>显示和创建模块的包含/排除列表。这可以帮助我们指定记录那些特定模块中的API调用。</p>
<p>上面图中我所使用的命令是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;!logexts.loge D:\  </div><div class="line">!logexts.logc d *  </div><div class="line">!logexts.logc e 15 16 19  </div><div class="line">!logexts.logo e *  </div><div class="line">!logexts.logm i notepad.exe</div></pre></td></tr></table></figure>
<p>其输出结果是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">!logexts.loge D:\  </div><div class="line">Windows API Logging Extensions v3.01  </div><div class="line">Parsing the manifest files...  </div><div class="line">Location: C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64\winext\manifest\main.h  </div><div class="line">Parsing file &quot;main.h&quot; ...  </div><div class="line">Parsing file &quot;winerror.h&quot; ...  </div><div class="line">Parsing file &quot;kernel32.h&quot; ...  </div><div class="line">Parsing file &quot;debugging.h&quot; ...  </div><div class="line">Parsing file &quot;processes.h&quot; ...  </div><div class="line">Parsing file &quot;memory.h&quot; ...  </div><div class="line">Parsing file &quot;registry.h&quot; ...  </div><div class="line">Parsing file &quot;fileio.h&quot; ...  </div><div class="line">Parsing file &quot;strings.h&quot; ...  </div><div class="line">Parsing file &quot;user32.h&quot; ...  </div><div class="line">Parsing file &quot;clipboard.h&quot; ...  </div><div class="line">Parsing file &quot;hook.h&quot; ...  </div><div class="line">Parsing file &quot;gdi32.h&quot; ...  </div><div class="line">Parsing file &quot;winspool.h&quot; ...  </div><div class="line">Parsing file &quot;version.h&quot; ...  </div><div class="line">Parsing file &quot;winsock2.h&quot; ...  </div><div class="line">Parsing file &quot;advapi32.h&quot; ...  </div><div class="line">Parsing file &quot;uuids.h&quot; ...  </div><div class="line">Parsing file &quot;com.h&quot; ...  </div><div class="line">Parsing file &quot;shell.h&quot; ...  </div><div class="line">Parsing file &quot;ole32.h&quot; ...  </div><div class="line">Parsing file &quot;ddraw.h&quot; ...  </div><div class="line">Parsing file &quot;winmm.h&quot; ...  </div><div class="line">Parsing file &quot;avifile.h&quot; ...  </div><div class="line">Parsing file &quot;dplay.h&quot; ...  </div><div class="line">Parsing file &quot;d3d.h&quot; ...  </div><div class="line">Parsing file &quot;d3dtypes.h&quot; ...  </div><div class="line">Parsing file &quot;d3dcaps.h&quot; ...  </div><div class="line">Parsing file &quot;d3d8.h&quot; ...  </div><div class="line">Parsing file &quot;d3d8types.h&quot; ...  </div><div class="line">Parsing file &quot;d3d8caps.h&quot; ...  </div><div class="line">Parsing file &quot;dsound.h&quot; ...  </div><div class="line">Parsing completed.  </div><div class="line">Logexts injected. Output: &quot;D:\\LogExts\&quot;  </div><div class="line">Logging enabled.  </div><div class="line">0:000&gt; !logexts.logc d *  </div><div class="line">All categories disabled.  </div><div class="line">0:000&gt; !logexts.logc e 15 16 19  </div><div class="line">15 IOFunctions Enabled  </div><div class="line">16 MemoryManagementFunctions Enabled  </div><div class="line">19 ProcessesAndThreads Enabled  </div><div class="line">0:000&gt; !logexts.logo e *  </div><div class="line">Debugger Enabled  </div><div class="line">Text file Enabled  </div><div class="line">Verbose log Enabled  </div><div class="line">0:000&gt; !logexts.logm i notepad.exe  </div><div class="line">Included modules:  </div><div class="line">notepad.exe</div></pre></td></tr></table></figure>
<p>简单说明一下这些命令：<br>!logexts.loge D:\<br>设置log的保持路径，并且开启监控  </p>
<p>!logexts.logc d *<br>先关闭所有API分类的监控  </p>
<p>!logexts.logc e 15 16 19<br>然后设置我们想监控分类，这里是IOFunctions，MemoryManagementFunctions和ProcessesAndThreads。至于如何查询分类对于的id，可以直接输入!logexts.logc进行查看。</p>
<p>!logexts.logo e *<br>这里我开启了所有输出方式，注意：如果想要被监控的程序响应的更快，可以去掉Debugger的输出，因为显示花费的时间比较的多。</p>
<p>!logexts.logm i notepad.exe<br>最后当然是设置inclusion list了。</p>
<p>按下F5，让程序跑起来看看效果吧。先别着急惊叹，Logexts还有更惊艳的地方。那就是他的高度可配置性。如果你想监控他描述以外的API，那么你可以自己写这个API的“头文件”。这里用引号是因为，它并不是真正的头文件，只不过他的语法和C的头文件非常的相似。我们可以看一个例子：</p>
<p>创建%windbg_dir%\winext\manifest\Context.h<br>并且写入这些内容</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">category ActivationContext:</div><div class="line"><span class="keyword">module</span> KERNEL32.DLL:</div><div class="line"></div><div class="line"><span class="function">FailOnFalse <span class="title">ActivateActCtx</span><span class="params">(HANDLE hActCtx, [out] PULONG_PTR lpCookie)</span></span>;</div><div class="line"><span class="function">FailOnFalse <span class="title">DeactivateActCtx</span><span class="params">(DWORD dwFlags, ULONG_PTR upCookie)</span></span>;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>在%windbg_dir%\winext\manifest\main.h文件的最后加入一行 #include “Context.h”</p>
<p>保存后，重启调试程序，输入!logexts.logc，可以看了多出了ActivationContext这一项。现在就可以选择这一项分类来监控ActivateActCtx和DeactivateActCtx了。</p>
<p>最后，大家应该发现了这样一个问题，开启这个API监控还是比较麻烦的，需要输入好几条命令。为了更方便的使用这个功能，我写了一个脚本来解决这个问题，这样就可以用一行命令来开启监控。使用方法是：<br>Usage $$&gt;a<logger.wds output_dir="" categories="" include_modules="" e.g.="" $$="">a&lt;logger.wds “d:\” “15 16 19” “notepad.exe”  </logger.wds></p>
<p>下载<a href="/uploads/2013/09/logger.zip">logger</a></p>
<p>关于Logexts的更多详细信息请参考msdn：<a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff560170(v=vs.85" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/windows/hardware/ff560170(v=vs.85).aspx</a>.aspx)</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows7下控制单个进程音量的小技巧]]></title>
      <url>/2013/09/10/windows7e4b88be68ea7e588b6e58d95e4b8aae8bf9be7a88be99fb3e9878fe79a84e5b08fe68a80e5b7a7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="/uploads/2013/09/2013-09-10_200213.png"><img src="/uploads/2013/09/2013-09-10_200213.png" alt="2013-09-10_200213"></a></p>
<p>如上图所示，Windows7下有一个很有趣的功能，就是可以给单独的进程调节音量。出于好奇，在网上翻了下资料，原来这个功能要归功于Windows7上新的音频接口——Core Audio APIs。这套API是用COM写，各种接口也比较多。但是如果我们的目的只是控制单个进程的音量，那还是很简单的。接下来的代码就是控制进程音量的函数了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> CLSID CLSID_MMDeviceEnumerator = __uuidof(MMDeviceEnumerator);</div><div class="line"><span class="keyword">const</span> IID IID_IMMDeviceEnumerator = __uuidof(IMMDeviceEnumerator);</div><div class="line"><span class="keyword">const</span> IID IID_IAudioSessionManager2 = __uuidof(IAudioSessionManager2);</div><div class="line"><span class="keyword">const</span> IID IID_IAudioSessionControl2 = __uuidof(IAudioSessionControl2);</div><div class="line"><span class="keyword">const</span> IID IID_ISimpleAudioVolume = __uuidof(ISimpleAudioVolume);</div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">SetProcessVolume</span><span class="params">(ULONG target_pid, <span class="keyword">float</span> level)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    CComPtr imm_dev_enumor;</div><div class="line"></div><div class="line">    HRESULT hr = imm_dev_enumor.CoCreateInstance(</div><div class="line">        CLSID_MMDeviceEnumerator, <span class="literal">NULL</span>,</div><div class="line">        CLSCTX_ALL);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    CComPtr imm_dev;</div><div class="line">    hr = imm_dev_enumor-&gt;GetDefaultAudioEndpoint(eRender, eMultimedia, &amp;imm;_dev.p);</div><div class="line">    <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    CComPtr session_mgr2;</div><div class="line">    hr = imm_dev-&gt;Activate(IID_IAudioSessionManager2, CLSCTX_ALL, <span class="literal">NULL</span>, (<span class="keyword">void</span> **)&amp;session;_mgr2.p);</div><div class="line">    <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    CComPtr session_enumor;</div><div class="line">    hr = session_mgr2-&gt;GetSessionEnumerator(&amp;session;_enumor.p);</div><div class="line">    <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    hr = session_enumor-&gt;GetCount(&amp;count;);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        CComPtr session_ctrl;</div><div class="line">        hr = session_enumor-&gt;GetSession(i, &amp;session;_ctrl.p);</div><div class="line">        <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CComPtr session_ctrl2;</div><div class="line">        hr = session_ctrl-&gt;QueryInterface(IID_IAudioSessionControl2, (<span class="keyword">void</span> **)&amp;session;_ctrl2.p);</div><div class="line">        <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ULONG pid;</div><div class="line">        hr = session_ctrl2-&gt;GetProcessId(&amp;pid;);</div><div class="line">        <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (pid != target_pid) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CComPtr simple_vol;</div><div class="line">        hr = session_ctrl2-&gt;QueryInterface(IID_ISimpleAudioVolume, (<span class="keyword">void</span> **)&amp;simple;_vol.p);</div><div class="line">        <span class="keyword">if</span> (FAILED(hr)) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        simple_vol-&gt;SetMasterVolume(level, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用PCI IDE Controller读写硬盘 – 2]]></title>
      <url>/2013/08/31/e4bdbfe794a8pci-ide-controllere8afbbe58699e7a1ace79b98-2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="/uploads/2013/09/20130901011808.png"><img src="/uploads/2013/09/20130901011808.png" alt="20130901011808"></a></p>
<p>上一篇文章简单介绍了用PIO的方式读写硬盘数据，那么这篇文章就来介绍另一种数据传输的方式——DMA。</p>
<p>DMA全称是Direct memory access，以下依旧是wiki上的一段简短的介绍：<br>“直接存储器访问（Direct Memory Access，DMA）是计算机科学中的一种内存访问技术。它允许某些电脑内部的硬件子系统（电脑外设），可以独立地直接读写系统存储器，而不需绕道中央处理器（CPU）。很多硬件的系统会使用DMA，包含硬盘控制器、绘图显卡、网卡和声卡。”</p>
<p>结合以上的描述和上一篇PIO的介绍，我们就可以发现DMA的优势，他最大的优势之一就是解放了CPU，让CPU不用重复的执行IO端口的操作读写数据。使用DMA的时候，CPU可以做其他的计算，读写数据的操作完全交由CPU外部的DMA芯片进行操作。当读写操作结束后CPU收到通知，然后再来处理读写之后的工作。DMA的另一个优势，就是速度快，不过这么说也不是完全正确的。因为古老的ISA DMA的速度只有4MB/s，现代CPU跑起PIO来，传输速度应该会比这个快。幸运的是，硬盘使用的DMA并不是ISA DMA，而是PCI DMA。PCI DMA的速度通常都超过了100MB/s，所以说速度也算是DMA的一个优势了吧。这里在顺便提一点，ISA DMA也不是完全没有用处的。软盘使用的DMA就是ISA DMA，虽然说软盘在现代的PC上已经消失了，但是如果要写自己的Mini Kernel，那么支持软盘以及ISA DMA还是很有必要的。</p>
<p>DMA的优势很明显，付出的代价就是编程起来相对复杂。那么下面就来介绍让IDE使用DMA传输数据的基础知识。</p>
<p><strong>物理区域描述符（Physical Region Descriptor）</strong><br><a href="/uploads/2013/09/20130828165621.jpg"><img src="/uploads/2013/09/20130828165621.jpg" alt="20130828165621"></a>进行数据传输的物理内存块都用物理区域描述符进行描述。当所有在物理区域描述符表中的物理区域描述符所指向的内存都被传输完成后，数据传输就会停止。每个物理区域描述符是8字节。前4个字节指定的是物理内存区域的地址。接下来的两个字节指定内存数量。最后一个字节的第7位表示此理区域描述符是该表中最后一个描述符。</p>
<p><strong>物理区域描述符表（Physical Region Descriptor Table）</strong><br>这张表中包含一定数量的物理区域描述符（PRD），描述符表必须是4字节对齐且不能跨越64K边界的内存。</p>
<p><strong>总线主控IDE寄存器（Bus Master IDE Register）</strong><br><a href="/uploads/2013/09/20130829115331.png"><img src="/uploads/2013/09/20130829115331.png" alt="20130829115331"></a></p>
<p>要获得总线主控IDE寄存器的基础地址，需要读取PCI配置空间IDE区域的0x20处的DWORD。由于这篇文章不会设计到如何读取PCI配置空间，所以这里的基址就采用bochs设定（0xC000）。后面代码部分也会直接硬编码。</p>
<p><strong>总线主控IDE命令寄存器（Bus Master IDE Command Register）</strong><br><a href="/uploads/2013/09/20130829120041.png"><img src="/uploads/2013/09/20130829120041.png" alt="20130829120041"></a></p>
<p>这里读写控制位是特别要注意的，刚开始容易理解错误。这里的读写是针对的设备，而不是CPU。也就是说这里的都，是指设备读取CPU指定的内存到自己的数据空间。而写是指将自己的数据空间的数据写到CPU指定的内存。所以这里的读写和我们对硬盘要做的读写是刚好相反的。</p>
<p><strong>总线主控IDE状态寄存器（Bus Master IDE Status Register）</strong><br><a href="/uploads/2013/09/20130829120248.png"><img src="/uploads/2013/09/20130829120248.png" alt="20130829120248"></a></p>
<p><strong>描述符指针寄存器（Descriptor Table Pointer Register）</strong><br>用于设置物理区域描述符表的地址</p>
<p>对于初学者理论知识不用了解的过细，最好还是在代码中边写边学习，还是一边堆代码，一边解释吧。<br>（关于下面代码的补充说明：由于使用DMA必须处理中断以获得DMA处理结束的信号，而配置中断又涉及到许多理论知识和额外代码（8259A &amp;IDT），所以下面的代码就不涉及配置中断了，我这里就假设CPU已经进入保护模式，但没有开启分页并且IDE的中断已经配置完毕了。以下代码依旧为了保持最简洁，忽略了状态和结果的检查，在试验中够用即可）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">mov dx, 0C000h ; 设置开始停止位为0，停止DMA</div><div class="line">mov al, 0h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 0C002h ; 清除中断位和错误位，这里清除方式比较特别，设置1后清除</div><div class="line">mov al, 6h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">; 配置描述符表，表地址为10000h，且只有一个描述符</div><div class="line">; 描述符描述的物理基址是20000h，大小为512字节，且设置了第7位，</div><div class="line">; 说明自己就是最后一个描述符</div><div class="line">mov dword ptr [10000h], 20000h</div><div class="line">mov dowrd ptr [10004h], 200h | 80000000h</div><div class="line">mov dx, 0C004h</div><div class="line">mov eax, 10000h</div><div class="line">out dx, eax</div><div class="line"></div><div class="line">mov dx, 3f6h   ; 这里不再设置nIEN，DMA需要中断</div><div class="line">mov al, 0h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f1h   ; 下面代码基本上和PIO一致，</div><div class="line">mov al, 0      ; 详细注释请看上一篇文章</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f2h</div><div class="line">mov al, 1</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f3h</div><div class="line">mov al, 11h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f4h</div><div class="line">mov al, 22h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f5h</div><div class="line">mov al, 33h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f6h</div><div class="line">mov al, 44h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 1f7h   ; 设置读取扇区的命令C8h，不同于20h，这个是DMA读取扇区的命令</div><div class="line">mov al, C8h</div><div class="line">out dx, al</div><div class="line"></div><div class="line">mov dx, 0C000h ; 设置开始停止位为1，开始DMA，并且指定为读取硬盘操作</div><div class="line">mov al, 9h     ; （对硬盘而言是写出，所以设置bit3）</div><div class="line">out dx, al</div><div class="line"></div><div class="line">call wait_int  ; 等待中断</div><div class="line"></div><div class="line">mov dx, 0C000h ; 中断返回，设置开始停止位为0，停止DMA</div><div class="line">mov al, 0h     ; 如果一切都顺利，那么20000h开始的512个字节</div><div class="line">out dx, al     ; 就应该是读出的硬盘数据了</div><div class="line"> </div></pre></td></tr></table></figure>
<p>上面的代码主要分为以下这几步：<br>1) 在系统内存中配置PRD Table。每个PRD是8个字节，其中包含着一个起始内存地址和一个内存大小传送，而且PRD必须是4字节对齐的。<br>2) 给PRD Table指针寄存器传入配置好的PRD Table的地址，设置读写控制位，清除中断和错误位。<br>3) 设置读写命令，包括读写的驱动器，逻辑地址等（这里基本上和PIO类似）。<br>4) 设置总线主控IDE命令寄存器的开始/停止位为1，控制器开始执行DMA操作。<br>5) 控制器DMA操作结束，IDE设备发起中断，收到中断后，设置开始/停止位为0（我们省略了读取状态寄存器来查看操作是否成功的步骤。）  </p>
<p>如果只是从IDE方面来看，代码没有复杂多少，可惜的是他还需要配合其他计算机硬件，所以实际要用上的代码要比PIO多上了不少。最后还是给大家推荐一些深入理解DMA的资料吧。<br>ISA DMA：<a href="http://wiki.osdev.org/ISA_DMA" target="_blank" rel="external">http://wiki.osdev.org/ISA_DMA</a><br>PCI DMA：<a href="http://wiki.osdev.org/ATA/ATAPI_using_DMA" target="_blank" rel="external">http://wiki.osdev.org/ATA/ATAPI_using_DMA</a>  </p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用PCI IDE Controller读写硬盘 – 1]]></title>
      <url>/2013/08/26/e4bdbfe794a8pci-ide-controllere8afbbe58699e7a1ace79b98-1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="/uploads/2013/08/PIO_hd04.jpg"><img src="/uploads/2013/08/PIO_hd04.jpg" alt="PIO_hd04"></a></p>
<p>上一篇文章中提到了一些IDE基础的知识，并且知道了如何判断IDE的类型。接下来介绍IDE最基本的IO方法——PIO。</p>
<p>PIO是Programmed input/output的缩写，下面是一段wiki上对PIO的介绍：<br>“可编程输入输出（英语：PIO）是CPU与外围设备（如网卡、硬盘等）传输数据的一种方法。当 CPU 上执行的软件程序使用 I/O 地址空间来与输入/输出设备（I/O 设备）进行数据传输时，系统即进行了 PIO. 这和直接内存存取（DMA）恰好相反。</p>
<p>在 PC 上最常见的使用 PIO 的例子是 ATA 接口，但 ATA 接口也可以在 DMA 模式下工作。 PC 上的许多比较古老的设备也使用 PIO, 如串行端口、并行端口（在不使用 ECP 模式时）、PS/2 接口、MIDI 接口、内部时钟以及一些古老的网卡。”</p>
<p>实际上，在DMA出现之前，PIO是硬盘唯一的数据传输的方式。就算是现在，ATA的部分命令还必须使用PIO的方式获得数据，例如DEVICE IDENTIFY。PIO传输数据的思想简单直接，例如从硬盘都数据，只需要在硬盘准备好了之后，不断的读取特定端口就能将数据读出来了。例如 in eax, dx（dx里是数据端口号），这样每次就传输4个字节，也就是说如果需要传输512（一个扇区）的数据，需要128次IO。这样一方面数据传输的效率难以提高，另一方面还占用了CPU时间。所以被DMA淘汰也是有道理的。然而，他也有自身的优势，那就是编程起来简单方便。不像DMA那样，需要配置中断和其他一些事情。简单的对IDE下命令就可以达到数据传输的目的了。所以这也是我们入门的很好的切入口。</p>
<p>最后，在开始堆代码之前，我们必须了解硬盘的两种寻址模式：CHS(cylinders-heads-sectors，磁柱-磁头-扇区)寻址模式和LBA(Logical Block Address, 逻辑区块地址)寻址模式。<br>CHS寻址模式，区块必须以硬盘上某个磁柱、磁头、扇区的硬件位置所合成的地址来指定。<br>LBA寻址模式从0开始编号来定位区块，第一区块LBA=0，第二区块LBA=1，依此类推。  </p>
<p>前者的描述更偏向物理，理解起来需要转换，而后者更偏向思维逻辑，理解起来直接了当。既然LBA模式简单容易理解，所以下面的文章和代码所采用的寻址模式就默认是LBA28。所谓LBA28其实是LBA模式中的子模式，它可以寻址到128GB，与之对应的是LBA48，它的寻址范围可以达到128PB，这个对我们来说没啥意义，所以还是选用LBA28。另外CHS模式还需要解释硬盘机械方面的知识，前提太多不利于学习，就暂时搁下吧。</p>
<p>好了，介绍理论的知识不是这篇文章的目的，就让我们一边堆代码，一边讲解这些理论知识吧。下面就是一段读取硬盘数据的asm代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">    mov dx, 3f6h    ; 1.设置nIEN</div><div class="line">    mov al, 2h</div><div class="line">    out dx, al</div><div class="line">    </div><div class="line">    mov dx, 1f1h    ; 2.设置FEATURES为0</div><div class="line">    mov al, 0</div><div class="line">    out dx, al</div><div class="line">        </div><div class="line">    mov dx, 1f2h    ; 3.设置读取的扇区数量，这里指定为1</div><div class="line">    mov al, 1</div><div class="line">    out dx, al</div><div class="line">        </div><div class="line">    mov dx, 1f3h    ; 4.设置读取地址的低八位</div><div class="line">    mov al, 11h</div><div class="line">    out dx, al</div><div class="line">        </div><div class="line">    mov dx, 1f4h    ; 5.设置读取地址的中八位</div><div class="line">    mov al, 22h</div><div class="line">    out dx, al</div><div class="line">        </div><div class="line">    mov dx, 1f5h    ; 6.设置读取地址的高八位</div><div class="line">    mov al, 33h</div><div class="line">    out dx, al</div><div class="line">    </div><div class="line">    mov dx, 1f6h    ; 7.设置LBA模式，目标驱动器，和地址的最高4位</div><div class="line">    mov al, 44h     ;   其中第6位（40h）是设置LBA模式，第4位设置主从驱动器，0为主驱动器</div><div class="line">    out dx, al      ;   后四位就是LBA最高位了，这里是4h，也就是说读取的地址是04332211h</div><div class="line">        </div><div class="line">    mov dx, 1f7h    ; 8.设置读取扇区的命令20h</div><div class="line">    mov al, 20h</div><div class="line">    out dx, al</div><div class="line">pri_stat:</div><div class="line">    in al, dx       ; 9.轮询状态寄存器，第3位（8）如果是设置状态，表明可以进行数据传输了。</div><div class="line">    test al, 8</div><div class="line">    jz pri_stat</div><div class="line">         </div><div class="line">    mov ecx, 512/4  ; IO 128次！</div><div class="line">    mov edi, offset buffer  ; 设置buffer地址到edi</div><div class="line">    mov dx, 1f0h</div><div class="line">    rep insw        ; 10.循环128次从数据寄存器读取1个扇区的数据</div><div class="line"> </div></pre></td></tr></table></figure>
<p>上面的代码主要分为以下这几步：<br>1.我们现在不需要IRQs，所以我们这里要禁用它，以免发生不必要的问题。这里，我们设置CBR（Control Block Register）的第1位，也叫nIEN位，只要它处于设置的状态，那么IRQs就不会触发。<br>2.设置FEATURES寄存器<br>3.设置扇区数寄存器<br>4.设置LBA低8位<br>5.设置LBA中8位<br>6.设置LBA中高8位<br>7.设置LBA最高4位，以及驱动器，指明使用LBA模式<br>8.设置读扇区命令<br>9.轮询等待完成状态<br>10.循环128次读取1个扇区的数据（128*4=512 bytes）  </p>
<p>再看看写扇区有哪些不同呢？没错，只有最后几条指令有细微的差别。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    mov dx, 1f7h</div><div class="line">    mov al, 30h     ; 这里命令改为30h，写扇区</div><div class="line">    out dx, al</div><div class="line">pri_stat:</div><div class="line">    in al,dx</div><div class="line">    test al,8</div><div class="line">    jz pri_stat</div><div class="line">    </div><div class="line">    mov ecx, 512/4</div><div class="line">    mov esi, offset buffer ; 设置buffer地址到esi</div><div class="line">    mov dx, 1f0h</div><div class="line">    rep outsd       ; 这里指令改为outsd</div><div class="line"> </div></pre></td></tr></table></figure>
<p>看起来还是很简单的吧！不过这也是当然的，因为我们没有做任何的排错和检验处理。不过这样的代码才是初学者最喜欢看到的吧，同样对于做操作系统实验也没多大问题。</p>
<p>最后，如果对CHS以及LBA和CHS的转换关系感兴趣，推荐翻阅wiki：<br><a href="http://en.wikipedia.org/wiki/Cylinder-head-sector" target="_blank" rel="external">http://en.wikipedia.org/wiki/Cylinder-head-sector</a><br><a href="http://en.wikipedia.org/wiki/Logical_block_addressing#CHS_conversion" target="_blank" rel="external">http://en.wikipedia.org/wiki/Logical_block_addressing#CHS_conversion</a>  </p>
<p>在下一篇的文章中，会介绍一些用PCI DMA的方式读写硬盘的知识。</p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用PCI IDE Controller读写硬盘 - 0]]></title>
      <url>/2013/08/17/e4bdbfe794a8pci-ide-controllere8afbbe58699e7a1ace79b98-0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>依稀记得我一年半以前曾经写过一篇关于PIO读硬盘数据的文章，当时就提到了读写硬盘操作很复杂，完全可以拿来做一个系列来写。当时也是真有写出一个系列的冲动，不过不巧的是，由于那段时间换工作，新的工作和底层的关系不太大，也就没时间继续读相关文档来把这个系列写下来。我现在还很清楚的记得当时有关使用IDE接口读写硬盘的中文资料特别的少，虽然英文资料倒是挺全面，但是对于英语不好的我来说，看起来还是挺吃力的。一年半后，我又好奇的搜索的这方面的中文资料，结果依旧令人失望。于是，我就决定我把知道的IDE方面的知识写出来，一方面算是自己的一个学习笔记，另一方面也算是一种分享。我将这个系列定位为学习笔记，就是说，文章的很多地方都是自己的理解，不能保证所提到的知识都是正确的。所以如果这篇文章有幸被你看见，并且发现了问题，请使用email联系我。</p>
<h1 id="IDE介绍"><a href="#IDE介绍" class="headerlink" title="IDE介绍"></a>IDE介绍</h1><p><a href="/uploads/2013/08/hdd-sata-pata-ide-aussie-pc-fix.png"><img src="/uploads/2013/08/hdd-sata-pata-ide-aussie-pc-fix.png" alt="hdd-sata-pata-ide-aussie-pc-fix"></a></p>
<p>IDE是Integrated Drive Electronics的简称，wiki上翻译的中文是“集成驱动电子设备”。我们可以认为它是一种接口，可以管理控制IDE的驱动器，比如硬盘，光驱等等。事实上，现在所谓的ATA/ATAPI接口的第一个版本的名称就叫做IDE，所以现在人们通常认为IDE就是PATA。如果现在去买主板，我们会发现集成PATA/IDE的主板已经消失了，现在主流主板都是使用的SATA，这是一套新的接口。那么，我们干嘛要学习一个已经淘汰的技术呢？其实不然，虽然硬件的接口被淘汰了，但是IDE的驱动器的控制模式还是存在的。现在的BIOS设置中，通常有一种叫做“legacy mode”或者“IDE”的选项，开启这个选项，系统就能如同操作IDE/PATA一样操作SATA了。而对于我这有写迷你内核的人来说，学习IDE是非常好的，因为虚拟机bochs模拟的硬盘设备就是IDE/PATA的，另一方面，把迷你内核拿到真机上做实验的时候，开启“legacy mode”或者“IDE”也能够很顺利的进行实验。</p>
<p><a href="/uploads/2013/08/bios-sata-native-mode-ide-raid-ahci-ca184a.jpg"><img src="/uploads/2013/08/bios-sata-native-mode-ide-raid-ahci-ca184a.jpg" alt="bios-sata-native-mode-ide-raid-ahci-ca184a"></a></p>
<h1 id="IDE通道以及通道寄存器地址"><a href="#IDE通道以及通道寄存器地址" class="headerlink" title="IDE通道以及通道寄存器地址"></a>IDE通道以及通道寄存器地址</h1><p>IDE有2个通道，可以管理4个驱动器，分别是：<br>通道1：<br>第一主驱动器<br>第一从驱动器<br>通道2：<br>第二主驱动器<br>第二从驱动器  </p>
<p>每个通道都有两套用于控制其主从驱动器的寄存器，他们分别是 Control Block Registers 和 Command Block Registers。这些寄存器首先是有一个基础地址，然后通过按顺序可以获得整套寄存器地址，而寄存器的基础地址可以通过PCI Configuration Space来获得，更多情况下，我们不妨直接使用下面这张表来配置寄存器的基础地址。</p>
<p><a href="/uploads/2013/08/2013-08-18_142953.png"><img src="/uploads/2013/08/2013-08-18_142953.png" alt="2013-08-18_142953"></a></p>
<p>事实上，这个基础地址是根据PCI IDE Controller模式不同而确定的。Compatibility模式下，寄存器的基础地址是固定的，但是在Native-PCI模式下，这个就需要读取具体的配置信息了。不过，大部分情况下，用上述地址不会有什么问题，所以这里就略过读取PCI Configuration Space的步骤了。</p>
<p>现在既然知道了寄存器的Base Address，那么下一步就是获得每个寄存器的地址了，其实这也非常简单。</p>
<p>Command Block Registers<br>1F0 （170）（读取和写入）：数据寄存器<br>1F1 （171）（读）：错误寄存器<br>1F1 （171）（写入）：特性寄存器<br>1F2 （172）（读取和写入）：扇区数寄存器<br>1F3 （173）（读取和写入）：低LBA寄存器<br>1F4 （174）（读取和写入）：中LBA寄存器<br>1F5 （175）（读取和写入）：高LBA寄存器<br>1F6 （176）（读取和写入）：驱动器/磁头寄存器<br>1F7 （177）（读）：状态寄存器<br>1F7 （177）（写入）：命令寄存器  </p>
<p>Control Block Registers<br>3F6 （376）（读取）：备用状态寄存器<br>3F6 （376）（写入）：设备控制寄存器  </p>
<p>另外还有一组寄存器叫做Bus Master IDE Register，我们使用DMA进行数据传输的时候会用到这类寄存器。现在就不去了解了，以免东西太多，造成不必要的混乱。</p>
<p>判断驱动器类型</p>
<p>前面说了很多的理论上的东西，现在我们看看怎么运用它们判断驱动器类型，比如是PATA还是SATA。当然，在做判断它们的类型之前，我们需要检测驱动器是否存在。判断方法很简单，先选择驱动器，对扇区数寄存器（1F2）和低LBA寄存器（1F3）写两个非0的数字，然后进行读取。如果读出的内容和写入的相同，那么我们可以认为驱动存在。就拿第一主驱动器举个例子：<br>mov dx, 1f6h ; 驱动器寄存器<br>xor al, al ; 选择驱动器，如果al第4位是0，那么选择0号设备，否则选择1号设备<br>out dx, al  </p>
<p>mov dx, 1f2h<br>mov al, 55h ; 随意写一个数<br>out dx, al  </p>
<p>mov dx, 1f3h<br>mov al, aah<br>out dx, al  </p>
<p>mov dx, 1f2h<br>in al, dx ; 读取后比较<br>cmp al, 55h<br>jnz not_exist  </p>
<p>mov dx, 1f3h<br>in al, dx<br>cmp al, aah<br>jnz not_exist  </p>
<p>我用bochs测试的结果是，如果驱动器不存在，读出的数字总是0。接下来就可以获得驱动器的类型了，步骤是：1.选择驱动器（前面的操作以及做完这步了）2.软件复位驱动器。3.读取高LBA寄存器和中LBA寄存器。  </p>
<p>mov dx, 3f6h ; 选择设备控制寄存器<br>mov al, 4h ; 设置第二位，表示软件复位<br>out dx, al  </p>
<p>mov dx, 3f6h ; 选择设备控制寄存器<br>mov al, 0h<br>out dx, al  </p>
<p>mov dx, 1f4h<br>in al, dx<br>mov id1, al  </p>
<p>mov dx, 1f5h<br>in al, dx<br>mov id2, al  </p>
<p>当ID1和ID2为不同的数值的时候，表示的设备不同，如下表所示<br><a href="/uploads/2013/08/20130818152800.png"><img src="/uploads/2013/08/20130818152800.png" alt="20130818152800"></a><br>我在bochs实验的得到的结果是PATA，虽然模拟的设备比较老，但是这正是我想要的。  </p>
<p>这样，我们读写硬盘的第一步，环境检测已经完成了。这个系列的下一篇文章，我们就来了解下通过PIO的方式读写硬盘。  </p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用可编程间隔定时器(Programmable Interval Timer)编写系统时钟]]></title>
      <url>/2013/08/04/e4bdbfe794a8e58fafe7bc96e7a88be997b4e99a94e5ae9ae697b6e599a8programmable-interval-timere7bc96e58699e7b3bbe7bb9fe697b6e9929f/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>很久没有写关于MiniKernel的文章了，这周末看着有点时间，就写一点关于定时器的东西吧。</p>
<p><a href="/uploads/2013/08/8253.jpg"><img src="/uploads/2013/08/8253.jpg" alt="8253"></a></p>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>可编程间隔定时器（PIT）芯片（也就是我们常说的8253/8254芯片），他包含了1个振荡器，1个预分频器和3个独立的分频器。每个分频器有一个输出，它是可以让定时器控制外部电路（例如，IRQ0）</p>
<p>其中PIT的振荡器的频率是1.193182 MHz。具体为什么是这么个奇怪的数字，是有一点历史的，但这些不是这篇文章的重点，有兴趣的可以Google一下。</p>
<p>分频器也比较容易理解，就是把高频分割为低频，一般来说就是使用一个计数器，当每次脉冲的时候，计数器的数值减少，当计数器数值为0的时候，在输出上产生一个脉冲，并且计数器复位，重新开始计数。</p>
<p>PIT定时器的准确度依赖于所使用的振荡器，一般来说，一天的浮动为+/- 1.73秒。不过这种浮动，对我们影响并不大，所以也不必过于在意。</p>
<p>PIT的输出通道一共有三个：通道0，直接连接到IRQ0，并且触发时钟中断（这个通道是我们写MiniKernel最重要的一个。）。通道1，貌似以前是定时刷新内存的，但是现在没什么用了。通道2是连接到PC扬声器的，目前我也没有研究过它的作用。</p>
<p>这里再重点介绍一下通道0：PIT通道0的输出是连接到PIC芯片上的（8259A，以后有空也可以写一篇简单的介绍），因此，它能生成一个IRQ0的中断。通常情况下，在开机时，BIOS会将通道0的计数器的值设置为65535或0（其中如果是0，硬件会自动转化为65536），这样，它的输出频率就是18.2065Hz。另外，之所以说通道0最重要，主要原因就是它是三个通道中，唯一一个能连接到IRQ的，对于编写系统时钟至关重要。</p>
<h2 id="编程相关"><a href="#编程相关" class="headerlink" title="编程相关"></a>编程相关</h2><p>PIT是使用以下IO端口进行控制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I/O 端口     用途</div><div class="line">0x40         通道0的数据端口</div><div class="line">0x41         通道1的数据端口</div><div class="line">0x42         通道2的数据端口</div><div class="line">0x43         控制字寄存器</div></pre></td></tr></table></figure></p>
<p>控制字寄存器的具体内容如下：</p>
<p><a href="/uploads/2013/08/8253cw.png"><img src="/uploads/2013/08/8253cw.png" alt="8253cw"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Bits</div><div class="line">6 7选择通道：</div><div class="line">0 0 =通道0</div><div class="line">0 1 =通道1</div><div class="line">1 0 =通道2</div><div class="line">1 1 =回读命令（只有8254支持）</div><div class="line">4 5访问模式：</div><div class="line">0 0 =锁存计数值命令</div><div class="line">0 1 =访问模式：读写最低有效字节</div><div class="line">1 0 =访问模式：读写最高有效字节</div><div class="line">1 1 =访问模式：先读写最低有效字节，然后读写高位字节</div><div class="line">1-3工作模式：</div><div class="line">0 0 0 =模式0（计数结束中断）</div><div class="line">0 0 1 =模式1（硬件再触发单稳）</div><div class="line">0 1 0 =模式2（速率发生器）</div><div class="line">0 1 1 =模式3（方波发生器）</div><div class="line">1 0 0 =模式4（软件触发闸门）</div><div class="line">1 0 1 =模式5（硬件触发闸门）</div><div class="line">1 1 0 =模式2（速率发生器，与010B相同）</div><div class="line">1 1 1 =模式3（方波发生器，与011B相同）</div><div class="line">0 BCD /二进制模式：0 = 16位二进制数，1 =四位BCD&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<p>这里，我们要写系统时钟，那么就应该这样选择：</p>
<ol>
<li>选择通道，必须是通道0，那么bit 6 7 就分别为 0 0。  </li>
<li>由于我们的计数器是16位的，那么访问模式bit 4 5就应该选择1 1。  </li>
<li>数据模式，毫无疑问选择二进制模式。  </li>
<li>最后就是工作模式了，应该选择什么呢？这里我也不想把这些模式都讲的很清楚，因为那样就涉及到引脚和电平等等硬件知识。现在我们只需要知道0，1，4，5这些模式都可以触发中断，但是却不会自动复位。只有模式2和3会自动复位。所以模式2 3都是我们可以用来作为系统时钟的模式。那么1-3 bits可以为0 1 0或者0 1 1。</li>
</ol>
<h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><p>现在假设，系统的时钟中断例程已经设置好了，并且设置好了PIC的IRQ0到这个例程。下面要做的事情就是，设置时钟中断的频率了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mov dx, 1193180 / 100 ; 没10ms触发一次中断</div><div class="line">mov al, 110110b ; 设置控制字寄存器，上面已经介绍过每个位的含意</div><div class="line">out 0x43, al</div><div class="line">mov ax, dx</div><div class="line">out 0x40, al   ;先设置低位的值</div><div class="line">xchg ah, al</div><div class="line">out 0x40, al   ;再设置高位的值</div></pre></td></tr></table></figure>
<p>总的来说8253 和 8254 是很有用的芯片。他们可以用在很多不同的设备，并用于很多不同的目的。不过就目前的PC来说，系统对他们的依赖已经不像以前那样严重了。随着科技的进步，APIC Timer已经可以取代他们。另外2005年，Intel和MS已经联合开发了新的高精度的定时器芯片High Precision Event Timer（HPET）。</p>
<p>虽然成熟的系统可能已经不用8253 和 8254了，但是对于我们自己的迷你内核来说，使用它们就完全足够了</p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于JsonCpp的中文编码问题]]></title>
      <url>/2013/07/19/e585b3e4ba8ejsoncppe79a84e4b8ade69687e7bc96e7a081e997aee9a298/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近工作中用到了jsoncpp来解析json文件。但是遇到了一个这样的问题，如果json代码中有中文，并且用“\u594E\u6258\u65AF”这样的方式表示，那么jsoncpp解析的时候，就会把他转换成UTF-8。到这一步还是OK的，然后我就试图把这段中文写回文件，问题就来了，jsoncpp不会把中文转换为“\u594E\u6258\u65AF”这样的形式在存储，而是直接存储为UTF-8格式的文件。如图所示：</p>
<p><a href="/uploads/2013/07/20130719231900.png"><img src="/uploads/2013/07/20130719231900.png" alt="20130719231900"></a></p>
<p>而我恰好是需要这种经过编码的形式的字符串，而非直接给我中文。在网上搜了搜，貌似也没有很好的解决方案，只好自己修改jsoncpp的代码以满足这个需求了。<br>简单读了下jsoncpp的read和write的代码。jsoncpp在read的时候会调用codePointToUTF8这个函数把\uXXXX这个形式的代码转换成UTF-8，但是write的时候就没有这样的转换了，虽然不是很了解作者这么写的思路，但是修改的思路倒是有了。我的做法是把所有需要两个和两个以上字节表示一个字符的UTF-8字符串全部转换成\uXXXX这个形式。那么就需要写一个转换函数。<a href="http://en.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">http://en.wikipedia.org/wiki/UTF-8</a> 上很清楚的描述了这些转换关系，所以完全可以自己动手写一个这样的函数。以下是我自己的实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">UTF8TocodePoint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *c, <span class="keyword">unsigned</span> <span class="keyword">int</span> *result)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (((*c) &amp; <span class="number">0x80</span>) == <span class="number">0</span>) &#123;</div><div class="line">*result = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(*c);</div><div class="line">count = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (((*c) &amp; <span class="number">0xe0</span>) == <span class="number">0xc0</span>) &#123;</div><div class="line">*result = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;((((*c) &amp; <span class="number">0x1f</span>) &lt;&lt; <span class="number">6</span>) | ((*(c + <span class="number">1</span>)) &amp; <span class="number">0x3f</span>));</div><div class="line">count = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (((*c) &amp; <span class="number">0xf0</span>) == <span class="number">0xe0</span>) &#123;</div><div class="line">*result = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;((((*c) &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">12</span>) | (((*(c + <span class="number">1</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>) | (((*(c + <span class="number">2</span>)) &amp; <span class="number">0x3f</span>)));</div><div class="line">count = <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (((*c) &amp; <span class="number">0xf8</span>) == <span class="number">0xf0</span>) &#123;</div><div class="line">*result = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;((((*c) &amp; <span class="number">0x7</span>) &lt;&lt; <span class="number">18</span>) | (((*(c + <span class="number">1</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">12</span>) | (((*(c + <span class="number">2</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>) | (((*(c + <span class="number">3</span>)) &amp; <span class="number">0x3f</span>)));</div><div class="line">count = <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (((*c) &amp; <span class="number">0xfc</span>) == <span class="number">0xf8</span>) &#123;</div><div class="line">*result = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;((((*c) &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">24</span>) | (((*(c + <span class="number">1</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">18</span>) | (((*(c + <span class="number">2</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">12</span>) | (((*(c + <span class="number">3</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>) | (((*(c + <span class="number">4</span>)) &amp; <span class="number">0x3f</span>)));</div><div class="line">count = <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (((*c) &amp; <span class="number">0xfe</span>) == <span class="number">0xfc</span>) &#123;</div><div class="line">*result = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;((((*c) &amp; <span class="number">0x1</span>) &lt;&lt; <span class="number">30</span>) | (((*(c + <span class="number">1</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">24</span>) | (((*(c + <span class="number">2</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">18</span>) | (((*(c + <span class="number">3</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">12</span>) | (((*(c + <span class="number">4</span>)) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>) | (((*(c + <span class="number">5</span>)) &amp; <span class="number">0x3f</span>)));</div><div class="line">count = <span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>然后把这个函数的调用加入到valueToQuotedString中，将原始的代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> ( isControlCharacter( *c ) )</div><div class="line">&#123;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">ostringstream</span> oss;</div><div class="line">oss &lt;&lt; <span class="string">"\\u"</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt; <span class="built_in">std</span>::uppercase &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">4</span>) &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(*c);</div><div class="line">result += oss.str();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">result += *c;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> ( isControlCharacter( *c ) )</div><div class="line">&#123;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">ostringstream</span> oss;</div><div class="line">oss &lt;&lt; <span class="string">"\\u"</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt; <span class="built_in">std</span>::uppercase &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">4</span>) &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(*c);</div><div class="line">result += oss.str();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*c) &amp; <span class="number">0x80</span>) &#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">c += UTF8TocodePoint(c, &amp;num) - <span class="number">1</span>;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">ostringstream</span> oss;</div><div class="line">oss &lt;&lt; <span class="string">"\\u"</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt; <span class="built_in">std</span>::uppercase &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">4</span>) &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(num);</div><div class="line">result += oss.str();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">result += *c;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>这样还没算结束，因为这个函数开头的地方还有一个判断，我们也需要修改一下，将原始代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">strpbrk</span>(value, <span class="string">"\"\\\b\f\n\r\t"</span>) == <span class="literal">NULL</span> &amp;&amp; !containsControlCharacter( value ))</div><div class="line"><span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"\""</span>) + value + <span class="string">"\""</span>;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">strpbrk</span>(value, <span class="string">"\"\\\b\f\n\r\t"</span>) == <span class="literal">NULL</span> &amp;&amp; !containsControlCharacter( value ) &amp;&amp; !containsMultiByte( value ))</div><div class="line"><span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"\""</span>) + value + <span class="string">"\""</span>;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>containsMultiByte的实现是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">containsMultiByte</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* str )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">while</span> ( *str )</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> ( ( *(str++) ) &amp; <span class="number">0x80</span> )</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>好了，万事俱备，现在试一试效果，结果如图：</p>
<p><a href="/uploads/2013/07/20130719232025.png"><img src="/uploads/2013/07/20130719232025.png" alt="20130719232025"></a></p>
<p>现在这个jsoncpp看起来已经满足了我的需求，但是不确定的是，不知道这样修改会不会引起其他问题。现在也只能说暂时不去管他，有问题再一步一步的修改吧。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[调试挂死的Explorer]]></title>
      <url>/2013/07/05/e8b083e8af95e68c82e6adbbe79a84explorer/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一个同事前几天告诉我说，他的explorer.exe总是挂死，不知道是什么情况导致的。于是我让他下次挂死的时候抓个dump我。抓Dump的工具很多，例如用Win7的TaskMgr，sysinternals的Procexp，或者Windbg本身。不过考虑到explorer挂死了，操作桌面起来不方便，所以最好选择能够自动检测挂死并且抓住dump的工具。这里比较推荐的是sysinternals的Procdump以及我开发的<a href="http://0cch.net/wordpress/?p=208" target="_blank" rel="external">proc_dump_study</a>（带UI）。</p>
<p><a href="/uploads/2013/07/20130706003632.png"><img src="/uploads/2013/07/20130706003632.png" alt="20130706003632"></a></p>
<p>第二天，同事把explorer.exe挂死的Dump传给了我，200多MB。用Windbg打开Dump文件，第一反应就是看看有多少线程再说吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0:000&gt; ~</div><div class="line">. 0 Id: b14.b18 Suspend: 0 Teb: 7ffde000 Unfrozen</div><div class="line">1 Id: b14.b1c Suspend: 0 Teb: 7ffdd000 Unfrozen</div><div class="line">...</div><div class="line">54 Id: b14.1a94 Suspend: 0 Teb: 7ff75000 Unfrozen</div><div class="line">55 Id: b14.18c8 Suspend: 0 Teb: 7ff74000 Unfrozen</div></pre></td></tr></table></figure>
<p>56个线程，肯定不能依次看栈回溯。按照尝试判断，explorer界面挂死，肯定是刷新界面的线程挂死了。所以栈回溯里肯定有explorer的身影。于是找找哪个线程有explorer模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !findstack explorer!</div><div class="line">Thread 000, 2 frame(s) match</div><div class="line">* 04 001bf924 0087aa50 explorer!wWinMain+0x54a</div><div class="line">* 05 001bf9b8 75771154 explorer!_initterm_e+0x1b1</div><div class="line"></div><div class="line">Thread 003, 2 frame(s) match</div><div class="line">* 11 0324f714 008757a6 explorer!CTray::_MessageLoop+0x265</div><div class="line">* 12 0324f724 75b346bc explorer!CTray::MainThreadProc+0x8a</div><div class="line"></div><div class="line">Thread 008, 1 frame(s) match</div><div class="line">* 03 04a1fc0c 75b346bc explorer!CSoundWnd::s_ThreadProc+0x3a</div></pre></td></tr></table></figure>
<p>从上面的结果看来，3号线程最可疑，于是看看完整的堆栈情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">0:003&gt; kv</div><div class="line"># ChildEBP RetAddr Args to Child</div><div class="line">00 0324f508 76eb5aec 75236924 00000002 0324f55c ntdll!KiFastSystemCallRet (FPO: [0,0,0])</div><div class="line">01 0324f50c 75236924 00000002 0324f55c 00000001 ntdll!NtWaitForMultipleObjects+0xc (FPO: [5,0,0])</div><div class="line">02 0324f5a8 7576f10a 0324f55c 0324f5d0 00000000 KERNELBASE!WaitForMultipleObjectsEx+0x100 (FPO: [Non-Fpo])</div><div class="line">03 0324f5f0 75fa90be 00000002 7ffdf000 00000000 kernel32!WaitForMultipleObjectsExImplementation+0xe0 (FPO: [Non-Fpo])</div><div class="line">04 0324f644 73d51717 000002fc 0324f678 ffffffff user32!RealMsgWaitForMultipleObjectsEx+0x13c (FPO: [Non-Fpo])</div><div class="line">05 0324f664 73d517b8 000024ff ffffffff 00000000 duser!CoreSC::Wait+0x59 (FPO: [Non-Fpo])</div><div class="line">06 0324f68c 73d51757 000024ff 00000000 0324f6b8 duser!CoreSC::WaitMessage+0x54 (FPO: [Non-Fpo])</div><div class="line">07 0324f69c 75fa949f 000024ff 00000000 0324f68c duser!MphWaitMessageEx+0x2b (FPO: [Non-Fpo])</div><div class="line">08 0324f6b8 76eb60ce 0324f6d0 00000008 0324f7e8 user32!__ClientWaitMessageExMPH+0x1e (FPO: [Non-Fpo])</div><div class="line">09 0324f6d4 75fa93f3 00851dee 00000000 80000000 ntdll!KiUserCallbackDispatcher+0x2e (FPO: [0,0,0])</div><div class="line">0a 0324f6d8 00851dee 00000000 80000000 00901180 user32!NtUserWaitMessage+0xc (FPO: [0,0,0])</div><div class="line">0b 0324f714 008757a6 00000000 75b318f2 0324f7ac explorer!CTray::_MessageLoop+0x265 (FPO: [Non-Fpo])</div><div class="line">0c 0324f724 75b346bc 00901180 00000000 00000000 explorer!CTray::MainThreadProc+0x8a (FPO: [Non-Fpo])</div><div class="line">0d 0324f7ac 75771154 001bf810 0324f7f8 76ecb299 shlwapi!WrapperThreadProc+0x1b5 (FPO: [Non-Fpo])</div><div class="line">0e 0324f7b8 76ecb299 001bf810 75d00467 00000000 kernel32!BaseThreadInitThunk+0xe (FPO: [Non-Fpo])</div><div class="line">0f 0324f7f8 76ecb26c 75b345e9 001bf810 00000000 ntdll!__RtlUserThreadStart+0x70 (FPO: [Non-Fpo])</div><div class="line">10 0324f810 00000000 75b345e9 001bf810 00000000 ntdll!_RtlUserThreadStart+0x1b (FPO: [Non-Fpo])</div></pre></td></tr></table></figure>
<p>可以看出线程正在调用WaitForMultipleObjectsEx等待两个内核对象。那么看看这两个内核对象是什么吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0:003&gt; dp 0324f55c L2</div><div class="line">0324f55c 00000318 000002fc</div><div class="line">0:003&gt; !handle 00000318</div><div class="line">Handle 00000318</div><div class="line">Type Event</div><div class="line">0:003&gt; !handle 000002fc</div><div class="line">Handle 000002fc</div><div class="line">Type Event</div></pre></td></tr></table></figure>
<p>很不幸，两个内核对象都是Event，这样就没有什么可参考的价值了，因为我们没办法知道谁应该去设置两个event。那么好吧，从其他方面下手，看能不能发现问题。看看关键区的情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">0:003&gt; !cs -l</div><div class="line">-----------------------------------------</div><div class="line">DebugInfo = 0x76f47540</div><div class="line">Critical section = 0x76f47340 (ntdll!LdrpLoaderLock+0x0)</div><div class="line">LOCKED</div><div class="line">LockCount = 0x6</div><div class="line">WaiterWoken = No</div><div class="line">OwningThread = 0x000013e0</div><div class="line">RecursionCount = 0x1</div><div class="line">LockSemaphore = 0x220</div><div class="line">SpinCount = 0x00000000</div><div class="line">-----------------------------------------</div><div class="line">DebugInfo = 0x002ac6e0</div><div class="line">Critical section = 0x765ea0f0 (shell32!CMountPoint::_csDL+0x0)</div><div class="line">LOCKED</div><div class="line">LockCount = 0x0</div><div class="line">WaiterWoken = No</div><div class="line">OwningThread = 0x000013e0</div><div class="line">RecursionCount = 0x1</div><div class="line">LockSemaphore = 0xA50</div><div class="line">SpinCount = 0x00000000</div></pre></td></tr></table></figure>
<p>看到一个很可疑的情况了，两个cs都被一个线程占用，更可疑的是这个线程居然还占用了LdrpLoaderLock。这就很有可能是引起死锁的原因了。来看看这个线程的完整堆栈。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">0:053&gt; ~~[13e0]s</div><div class="line">eax=06d02f00 ebx=00000000 ecx=03920000 edx=06ce0000 esi=000015ac edi=00000000</div><div class="line">eip=76eb6194 esp=0b1ad1cc ebp=0b1ad238 iopl=0 nv up ei pl zr na pe nc</div><div class="line">cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246</div><div class="line">ntdll!KiFastSystemCallRet:</div><div class="line">76eb6194 c3 ret</div><div class="line">0:053&gt; k</div><div class="line"># ChildEBP RetAddr</div><div class="line">00 0b1ad1c8 76eb5b0c ntdll!KiFastSystemCallRet</div><div class="line">01 0b1ad1cc 7523179c ntdll!ZwWaitForSingleObject+0xc</div><div class="line">02 0b1ad238 7576efe3 KERNELBASE!WaitForSingleObjectEx+0x98</div><div class="line">03 0b1ad250 7576ef92 kernel32!WaitForSingleObjectExImplementation+0x75</div><div class="line">04 0b1ad264 7622399a kernel32!WaitForSingleObject+0x12</div><div class="line">05 0b1ad294 7622299c shell32!CMountPoint::_InitLocalDrives+0xcd</div><div class="line">...</div><div class="line">14 0b1ad81c 762aa690 shell32!SHGetFolderLocation+0x121</div><div class="line">15 0b1ad838 0a5c0bf5 shell32!SHGetSpecialFolderLocation+0x17</div><div class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</div><div class="line">16 0b1ae0bc 0a5bfceb HaoZipExt!DllUnregisterServer+0x1cd04</div><div class="line">17 0b1ae240 0a5e0200 HaoZipExt!DllUnregisterServer+0x1bdfa</div><div class="line">18 0b1ae284 0a5e02b9 HaoZipExt!DllUnregisterServer+0x3c30f</div><div class="line">19 0b1ae2ac 76ecfbdf HaoZipExt!DllUnregisterServer+0x3c3c8</div><div class="line">1a 0b1ae3a0 76ed008b ntdll!LdrpRunInitializeRoutines+0x26f</div><div class="line">1b 0b1ae50c 76ecf499 ntdll!LdrpLoadDll+0x4d1</div><div class="line">1c 0b1ae540 7523b96d ntdll!LdrLoadDll+0x92</div><div class="line">1d 0b1ae57c 7534a333 KERNELBASE!LoadLibraryExW+0x1d3</div><div class="line">1e 0b1ae598 7534a2b8 ole32!LoadLibraryWithLogging+0x16</div><div class="line">...</div><div class="line">39 0b1afbac 76241ee6 shell32!CShellExecute::_DoExecute+0x5a</div><div class="line">3a 0b1afbc0 75b346bc shell32!CShellExecute::s_ExecuteThreadProc+0x30</div><div class="line">3b 0b1afc48 75771154 shlwapi!WrapperThreadProc+0x1b5</div><div class="line">3c 0b1afc54 76ecb299 kernel32!BaseThreadInitThunk+0xe</div><div class="line">3d 0b1afc94 76ecb26c ntdll!__RtlUserThreadStart+0x70</div><div class="line">3e 0b1afcac 00000000 ntdll!_RtlUserThreadStart+0x1b</div></pre></td></tr></table></figure>
<p>首先一眼就看到了一个非系统模块HaoZipExt。再扫一眼，发现他在LdrpLoaderLock的时候又去等待了某个内核对象。那么再来看看这个内核对象是什么吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">0:053&gt; kv L5</div><div class="line"># ChildEBP RetAddr Args to Child</div><div class="line">00 0b1ad1c8 76eb5b0c 7523179c 000015ac 00000000 ntdll!KiFastSystemCallRet (FPO: [0,0,0])</div><div class="line">01 0b1ad1cc 7523179c 000015ac 00000000 00000000 ntdll!ZwWaitForSingleObject+0xc (FPO: [3,0,0])</div><div class="line">02 0b1ad238 7576efe3 000015ac ffffffff 00000000 KERNELBASE!WaitForSingleObjectEx+0x98 (FPO: [Non-Fpo])</div><div class="line">03 0b1ad250 7576ef92 000015ac ffffffff 00000000 kernel32!WaitForSingleObjectExImplementation+0x75 (FPO: [Non-Fpo])</div><div class="line">04 0b1ad264 7622399a 000015ac ffffffff 00000000 kernel32!WaitForSingleObject+0x12 (FPO: [Non-Fpo])</div><div class="line">0:053&gt; !handle 000015ac f</div><div class="line">Handle 000015ac</div><div class="line">Type Thread</div><div class="line">Attributes 0</div><div class="line">GrantedAccess 0x1fffff:</div><div class="line">Delete,ReadControl,WriteDac,WriteOwner,Synch</div><div class="line">Terminate,Suspend,Alert,GetContext,SetContext,SetInfo,QueryInfo,SetToken,Impersonate,DirectImpersonate</div><div class="line">HandleCount 4</div><div class="line">PointerCount 7</div><div class="line">Name &lt;none&gt;</div><div class="line">Object specific information</div><div class="line">Thread Id b14.1a94</div><div class="line">Priority 10</div><div class="line">Base Priority 0</div></pre></td></tr></table></figure>
<p>原来他在等待1a94这个线程结束啊，那么这个1a94线程又在干嘛呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">0:054&gt; ~~[1a94]s</div><div class="line">eax=0bbdfbb4 ebx=00000000 ecx=00000000 edx=00000000 esi=76f47340 edi=00000000</div><div class="line">eip=76eb6194 esp=0bbdfa24 ebp=0bbdfa88 iopl=0 nv up ei pl nz ac pe cy</div><div class="line">cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000217</div><div class="line">ntdll!KiFastSystemCallRet:</div><div class="line">76eb6194 c3 ret</div><div class="line">0:054&gt; kv</div><div class="line"># ChildEBP RetAddr Args to Child</div><div class="line">00 0bbdfa20 76eb5b0c 76e9f98e 00000220 00000000 ntdll!KiFastSystemCallRet (FPO: [0,0,0])</div><div class="line">01 0bbdfa24 76e9f98e 00000220 00000000 00000000 ntdll!ZwWaitForSingleObject+0xc (FPO: [3,0,0])</div><div class="line">02 0bbdfa88 76e9f872 00000000 00000000 00000000 ntdll!RtlpWaitOnCriticalSection+0x13e (FPO: [Non-Fpo])</div><div class="line">03 0bbdfab0 76ecb31d 76f47340 7d4908db 7ff75000 ntdll!RtlEnterCriticalSection+0x150 (FPO: [Non-Fpo])</div><div class="line">04 0bbdfb44 76ecb13c 0bbdfbb4 7d49080f 00000000 ntdll!LdrpInitializeThread+0xc6 (FPO: [Non-Fpo])</div><div class="line">05 0bbdfb90 76ecb169 0bbdfbb4 76e70000 00000000 ntdll!_LdrpInitialize+0x1ad (FPO: [Non-Fpo])</div><div class="line">06 0bbdfba0 00000000 0bbdfbb4 76e70000 00000000 ntdll!LdrInitializeThunk+0x10 (FPO: [Non-Fpo])</div></pre></td></tr></table></figure>
<p>原来这个线程在等待LdrpLoaderLock这个锁啊，真相大白了。这里理一下思路，线程13e0，创建后，调用Loadlibrary，装载HaoZipExt。这个时候HaoZipExt获得LdrpLoaderLock，但是HaoZipExt犯了编写DLL的大忌。在DLLMain里面做了一些不能预期的事情。HaoZipExt调用了SHGetSpecialFolderLocation，这个函数在内部会创建一个线程，运行一个叫做FirstHardwareEnumThreadProc 的子过程。这个线程起来之后，就会通知所用的DllMain，告诉他们DLL_THREAD_ATTACH的消息。但是告诉他们这个消息之前，首先要获得LdrpLoaderLock这个锁。但是LdrpLoaderLock这个锁正在被创建他的线程使用，而且还在等自己结束，就这样死锁了。这也是MSDN特别强调告诉我们，不要在DllMain里有过多自己不能预期的操作的原因。</p>
<p>那么看看这个罪魁祸首是什么模块吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">0:054&gt; lmvm HaoZipExt</div><div class="line">Browse full module list</div><div class="line">start end module name</div><div class="line">0a5a0000 0a605000 HaoZipExt (export symbols) HaoZipExt.dll</div><div class="line">Loaded symbol image file: HaoZipExt.dll</div><div class="line">Image path: C:\Program Files\HaoZip\HaoZipExt.dll</div><div class="line">Image name: HaoZipExt.dll</div><div class="line">Browse all global symbols functions data</div><div class="line">Timestamp: Wed Jul 25 17:16:06 2012 (500FB956)</div><div class="line">CheckSum: 0006C14B</div><div class="line">ImageSize: 00065000</div><div class="line">File version: 3.0.1.9002</div><div class="line">Product version: 3.0.1.9002</div><div class="line">File flags: 0 (Mask 3F)</div><div class="line">File OS: 40004 NT Win32</div><div class="line">File type: 2.0 Dll</div><div class="line">File date: 00000000.00000000</div><div class="line">Translations: 0804.04b0</div><div class="line">CompanyName: 瑞创网络</div><div class="line">ProductName: 2345好压（HaoZip）</div><div class="line">InternalName: HaoZipExt</div><div class="line">OriginalFilename: HaoZipExt.dll</div><div class="line">ProductVersion: 3.0</div><div class="line">FileVersion: 3.0.1.9002</div><div class="line">FileDescription: 2345好压-Windows扩展模块</div><div class="line">LegalCopyright: 版权所有(c) 2012 瑞创网络</div><div class="line">Comments: www.haozip.com</div></pre></td></tr></table></figure>
<p>知道问题后，我感觉这应该就是explorer挂死的原因，虽然没有100%的证据，但是至少也是一个造成死锁的程序，早卸载为妙，于是我告诉了同事，卸载了这个叫做好压的软件。之后几天，explorer运行正常，再也没有出现过挂死现象了。</p>
<p>最后总结HaoZipExt犯的错误<br>1.在DllMain里面的做了线程创建的操作。<br>2.跟挂死无关，只是吐槽一下他在DllMain里面调用了SHGetSpecialFolderLocation这个函数。因为这个函数已经不被支持，而且有可能在将来被废弃。以下是MSDN的原话：[SHGetSpecialFolderLocation is not supported and may be altered or unavailable in the future. Instead, useSHGetFolderLocation.]</p>
<p>感叹一下，写一个健壮的程序真的不是件容易的事啊。</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于WOW64的一点记录]]></title>
      <url>/2013/06/30/e585b3e4ba8ewow64e79a84e4b880e782b9e8aeb0e5bd95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1.关于TEB的地址：32位的TEB地址在64位TEB地址加上0x2000的偏移处。验证如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0:000&gt; r @$teb</div><div class="line">$teb=000000007efdb000</div><div class="line"></div><div class="line">0:000:x86&gt; dg @fs</div><div class="line">P Si Gr Pr Lo</div><div class="line">Sel Base Limit Type l ze an es ng Flags</div><div class="line">---- ----------------- ----------------- ---------- - -- -- -- -- --------</div><div class="line">0053 7efdd000 00000fff Data RW Ac 3 Bg By P Nl 000004f3</div><div class="line"></div><div class="line">0:000:x86&gt; ? 7efdd000 - 7efdb000</div><div class="line">Evaluate expression: 8192 = 00002000</div></pre></td></tr></table></figure>
<p>2.从32位切换到到64位的时候，系统会保存32位的寄存器状态。这些状态保存在Teb-&gt;TlsShots[1]中。继续用Windbg验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">0:000&gt; dt _teb @$teb -a5 TlsSlots</div><div class="line">ntdll!_TEB</div><div class="line">+0x1480 TlsSlots :</div><div class="line">[00] (null)</div><div class="line">[01] 0x00000000`001cfd20 Void</div><div class="line">[02] (null)</div><div class="line">[03] 0x00000000`001ca930 Void</div><div class="line">[04] (null)</div><div class="line"></div><div class="line">0:000&gt; !wow64exts.r</div><div class="line"></div><div class="line">No wow64 context address specified, dumping wow64 context from cpu area...</div><div class="line">Teb64 Address: 0x7efdb000, CpuArea Address: 0x1cfd20</div><div class="line"></div><div class="line">Context Address: 0x1cfd24</div><div class="line"></div><div class="line">eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=77200094 edi=00000000</div><div class="line">eip=772000a6 esp=000ee0ac ebp=000ee150 iopl=0 nv up ei pl zr na po nc</div><div class="line">cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00000246</div></pre></td></tr></table></figure>
<p>3.从64位切换到到32位的时候,会保存64位的RSP，保持的地址是Teb-&gt;TlsShots[0]。切换回64位的时候，这个地址被清0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:000&gt; dt ntdll!_TEB @r12 -a5 TlsSlots</div><div class="line">+0x1480 TlsSlots :</div><div class="line">[00] 0x00000000`001ce530 Void</div><div class="line">[01] 0x00000000`001cfd20 Void</div><div class="line">[02] (null)</div><div class="line">[03] (null)</div><div class="line">[04] (null)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[EtwLogView —— 实时查看ETW的工具]]></title>
      <url>/2013/06/12/etwlogview-e5ae9ee697b6e69fa5e79c8betwe79a84e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近玩XPerf玩的比较多，也经常和cradiator(<a href="http://sysdbg.com" target="_blank" rel="external">blog</a>)讨论xperf和etw的话题。上周吃饭的时候就讨论到，貌似没找到一款实时记录查看etw的工具。当时我的观点是，只是看etw的原始记录很难分析出什么东西，必须配合很细工具，例如xperfview。这样才能有效的发挥出etw的威力，所以实时工具用处不大。而cradiator认为，除了这些常规的用法外，如果能实时记录查看etw的信息，那么把etw当作平时的log输出方式也是不错的选择。这样的好处就是，不需要额外的加入log机制，使用etw就足够强大，其次如果遇上了问题，这些etw的记录又可以作为event，帮助xperfview的分析。然后这家伙就怂恿我写一个:-)</p>
<p>经过上面的一番介绍，应该就能知道EtwLogView的用处何在了。他是一个“实时”记录查看etw的工具。之所以用上了引号。是因为这个实时是有不确定性的。例如，如果一个provider输出了大量的事件信息。那么这个工具就会遇上麻烦，因为更新记录，和刷新界面的速度很可能跟不上provider的输出速度。这样，这个实时就大打折扣。不过就像cradiator所说的，只用来监控自己的事件，倒没什么问题。</p>
<p>现在EtwLogView是1.0版本，勉强算是可以先用着吧。</p>
<p>首先需要在Windows7系统和管理员权限运行工具，然后就可以创建Session，创建的时候需要选择Session的Provider。可以在List选择，也可以自己输入（必须为GUID格式）。如果想监视多个Provider，那么每个GUID之间需要用分号隔开。</p>
<p><a href="/uploads/2013/06/20130613010933.png"><img src="/uploads/2013/06/20130613010933.png" alt="20130613010933"></a></p>
<p><a href="/uploads/2013/06/20130613011032.png"><img src="/uploads/2013/06/20130613011032.png" alt="20130613011032"></a></p>
<p>另外，如果想更灵活的设置Session，可以使用xperf创建Session。然后打开EtwLogView，选择打开Session。在文本框中输入Session名，如果有多个Session需要监视，那么可以用分号隔开Session名。</p>
<p><a href="/uploads/2013/06/20130613011054.png"><img src="/uploads/2013/06/20130613011054.png" alt="20130613011054"></a></p>
<p>ETW输出的信息很多，我主要列出了12列，并且可以根据自己的需要选择显示的列。</p>
<p><a href="/uploads/2013/06/20130613011110.png"><img src="/uploads/2013/06/20130613011110.png" alt="20130613011110"></a></p>
<p>目前的功能就这么多，如果真的有的上再来看看能加上哪些功能吧。</p>
<p>下载<a href="/uploads/2013/06/EtwLogView.zip">EtwLogView</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[几个有趣的未文档化Windbg的扩展命令]]></title>
      <url>/2013/06/07/e587a0e4b8aae69c89e8b6a3e79a84e69caae69687e6a1a3e58c96windbge79a84e689a9e5b195e591bde4bba4/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这里使用的是Windbg最新版本，版本号是6.2.9200，可以在Windows8的SDK中获得。</p>
<p>1.eflags 用更加友好的方式显示被设置的标志寄存器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0:000&gt; r efl</div><div class="line">efl=00000246</div><div class="line"></div><div class="line">0:000&gt; !eflags</div><div class="line">BIT_1_RESERVED</div><div class="line">PARITY_FLAG</div><div class="line">ZERO_FLAG</div><div class="line">INTERRUPTS_ENABLED</div><div class="line"></div><div class="line">0:000&gt; r zf</div><div class="line">zf=1</div><div class="line">0:000&gt; r if</div><div class="line">if=1</div></pre></td></tr></table></figure>
<p>2.frame 用module!function的方式设置栈帧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">0:000&gt; kn L3</div><div class="line"># ChildEBP RetAddr</div><div class="line">00 0018df2c 7586d7db kernel32!CreateFileW</div><div class="line">01 0018e024 7586d9d1 apphelp!IdentifyCandidates+0x176</div><div class="line">02 0018e054 7586d87b apphelp!ApphelpQueryExe+0xb8</div><div class="line"></div><div class="line">0:000&gt; .frame</div><div class="line">00 0018df2c 7586d7db kernel32!CreateFileW</div><div class="line"></div><div class="line">0:000&gt; !frame apphelp!ApphelpQueryExe</div><div class="line">Frame Set to 0x00000002</div><div class="line"></div><div class="line">0:000&gt; .frame</div><div class="line">02 0018e054 7586d87b apphelp!ApphelpQueryExe+0xb8</div></pre></td></tr></table></figure>
<p>3.hashblob 计算指定内存的hash，hash方式包括md5和sha1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !hashblob</div><div class="line">Not enough parameters 0</div><div class="line">!hashblob &lt;hash&gt; &lt;Start&gt; &lt;End&gt;</div><div class="line">&lt;hash&gt;: 1 for MD5</div><div class="line">&lt;hash&gt;: 2 for SHA1</div><div class="line"></div><div class="line">0:000&gt; !hashblob 1 001f0000 001f0100</div><div class="line">DCC4E0B6659F6887DEC24A9FF2D57DC8</div></pre></td></tr></table></figure>
<p>4.imports 列出指定模块的导入函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !imports notepad</div><div class="line"></div><div class="line">notepad notepad Imports from file: ADVAPI32.dll</div><div class="line">RegSetValueExW</div><div class="line">RegQueryValueExW</div><div class="line">...</div><div class="line">notepad Imports from file: KERNEL32.dll</div><div class="line">FindNLSString</div><div class="line">GlobalAlloc</div><div class="line">GlobalUnlock</div><div class="line">GlobalLock</div><div class="line">GetTimeFormatW</div><div class="line">GetDateFormatW</div><div class="line">GetLocalTime</div><div class="line">...</div></pre></td></tr></table></figure>
<p>5.inframe 找出指定地址所在的栈帧范围</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ChildEBP RetAddr</div><div class="line">0018df2c 7586d7db kernel32!CreateFileW</div><div class="line">0018e024 7586d9d1 apphelp!IdentifyCandidates+0x176</div><div class="line"></div><div class="line">0:000&gt; !inframe 0018df8c</div><div class="line">0018df8c 0 00001714 0018df34 &lt; 0018df8c &lt; 0018e02c</div><div class="line">Frame: 1</div></pre></td></tr></table></figure>
<p>6.inmodule 找出指定地址所在的模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !inmodule 7586d9d1</div><div class="line">0x7586d9d1: apphelp!ApphelpQueryExe</div></pre></td></tr></table></figure>
<p>7.url 用默认浏览器打开指定网页</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0:000&gt; !url</div><div class="line">Please provide a valid URL (http://... or https://... )</div><div class="line">USAGE: !url &lt;url&gt;</div><div class="line"></div><div class="line">0:000&gt; !url http://0cch.net</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于DLL加载和运行的性能优化总结]]></title>
      <url>/2013/05/19/e585b3e4ba8edlle58aa0e8bdbde5928ce8bf90e8a18ce680a7e883bde4bc98e58c96e680bbe7bb93/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文从三个方面总结了加快DLL加载和运行速度的方法，他们分别是：  </p>
<ol>
<li>使用Rebase和Bind。  </li>
<li>按序号的方式导入函数。  </li>
<li>使用预读取技术（chromium加载dll时使用了此项）。  </li>
</ol>
<p>首先，讨论一下使用Rebase和Bind，提高DLL加载和运行性能的方法。我们知道，在编译链接DLL的时候，连接器会给DLL一个加载基址，而这个加载基址对于DLL模块中的使用了硬编码地址的代码和数据是至关重要的。因为这些硬编码的地址都是连接器通过DLL加载基址计算出来的。</p>
<p>这样，当我们的DLL被加载到进程空间当中的时候，如果足够幸运的话，DLL正好被加载到连接器所指定的地址，那么那些硬编码的地址就是完全正确的，加载过程不需要其他额外的工作就能让DLL正确运行了。</p>
<p>但是，真实的情况并不是这么理想，因为我们的进程可能不得不加载许许多多DLL，这样就会导致，某些DLL预定的基址可能已经被其他DLL使用。因此，前者就不得不加载到其他地址。由此带来的影响也是显而易见的，硬编码的地址就会出错。为了不让这种错误发生，加载器也就不得不多做一些工作，就是重新矫正这些硬编码。这样，如果DLL里包含的硬编码地址越多，加载的速度就会越慢，从而导致DLL加载性能下降。</p>
<p>另一方面，由于DLL加载基址是不可预见的，所以DLL加载的时候，加载器会根据导入表搜索所有的导入函数，计算并且确定导入函数的正确地址。这个过程也会对DLL加载性能有一定影响。</p>
<p>微软已经考虑到了这个问题的优化方法，在SDK中为我们提供了Rebase和Bind工具。其中Rebase工具，可以合理安排进程中DLL的加载地址，并且修改到PE中，从而避免DLL加载时Rebase操作。这样，一旦我们确认了DLL的加载基址是不会发生改变，那么我们就可以使用Bind工具将导入表进行绑定，这样的好处就是加载器不需要在加载的时候去计算确定导入函数地址，因为这些地址以及被预设了。</p>
<p>需要注意的一点，即使你做了这么多的事情，也不能完全避免加载基址的冲突，例如使用ASLR的DLL，其加载的地址是会发生变化的。所以就不能保证Rebase和Bind的有效性。具体能优化多少性能，在不同的案例中可能结果不同，需要具体实验才能知道。</p>
<p>第二种优化DLL运行性能的方案就是使用序号而非名称的方式导入函数。这一点也就非常容易解释了，如果通过函数名确定导入函数地址，那么加载器就不得不对字符串进行比较，从而确定正确的函数地址，虽然DLL的导出表是按顺序字母排列的，并且查找方式也是二分查找，但是如果函数很多，这依然是个耗时的工作。例如，我机器上的MFC100.dll有14000多个导出函数，如果进程需要按照名称确定自己需要的函数是哪一个，那么工作量还是不小的吧。所以MFC100.dll很明智的使用了导出序号的方法，这样加载器计算导入函数的时候，就能够使用序号来确定函数地址了，也就是简单使用数组搜索，从而得到目标函数地址。</p>
<p>这种方法的优化效果同样也要根据具体情况而定，如果导入函数少，目标DLL导出的函数也非常少，那么这种优化应该是没有什么意义的。相反，如果需要导入函数很多，而且目标DLL也导出了很多函数，那么在想提高程序加载性能的时候，不妨试一试这个方案。</p>
<p>最后一个方法是Pre-Read技术，使用在chromium中的。这种方法的原理是将DLL预先存入系统缓存，从而减少Page Fault来达到提高性能的目的。这种优化主要针对的是进程冷启动加载DLL的情况。进程第一次启动的时候，加载所需的DLL，DLL会被MAP到内存空间，虽然如果查询这片MAP的内存，会发现确实是COMMIT状态。但是，实际上系统并没要保证这些内存在Working Set中。一般情况下，系统只会把你想要用到的内存加载到Working Set中，以节约物理内存。这样，当我们每次用到这个并没有对应的Working Set的虚拟内存的时候，就发生了Page Fault，系统这个时候才会把这些内存加载到Working Set。而Page Fault对性能的影响很是比较大的。所以Pre-Read技术就有了用武之地。</p>
<p>Chromium对Pre-Read实现的非常好，代码的具体位置是<a href="http://src.chromium.org/viewvc/chrome/trunk/src/chrome/app/image_pre_reader_win.cc" target="_blank" rel="external">http://src.chromium.org/viewvc/chrome/trunk/src/chrome/app/image_pre_reader_win.cc</a> 。代码中，分别针对XP和XP以上的系统使用了不同的方法让系统缓存目标DLL。在XP以上的系统中，代码简单的通过ReadFile将文件读取到内存中，然后释放内存，关闭文件句柄，就可以达到缓存目标DLL的目的。而在XP系统下，做法有些不同，它使用LoadLibraryEx函数，将文件Load到内存空间，然后尝试对每个Page进行读取操作，已达到让数据载入Working Set的目的。</p>
<p>以上是我所知道的三种加载DLL的优化方法，也可能还有更多更好的方法，有兴趣的可以一起讨论下。不过无论什么性能优化方法，都必须建立在实际项目的基础上，并且有科学的依据和论证，切不可只从理论上下结论来优化程序，纸上谈兵，这样很可能适得其反，让性能变得更糟。（例如这个例子里所提到的，看上去不错的优化可能还不如什么都不做：<a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/17/317157.aspx" target="_blank" rel="external">http://blogs.msdn.com/b/oldnewthing/archive/2004/12/17/317157.aspx</a>）。至于说，如何得到程序运行数据用于总结出有效的优化方案，这里强烈推荐一款神器XPerf。实际上，也是因为使用了XPerf，才让我对性能优化产生了浓厚的兴趣！</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[gdi_handle_study —— 查看进程GDI资源情况的工具]]></title>
      <url>/2013/05/04/gdi_handle_study-e69fa5e79c8be8bf9be7a88bgdie8b584e6ba90e68385e586b5e79a84e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>gdi_handle_study 是一个用于查看进程中gdi句柄资源的工具。可以用于监控gdi资源是否泄露，已经对gdi资源的使用情况。使用方法非常简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;blockquote&gt;usage: gdi_handle_study.exe [-c] [-v [-f &lt;filter&gt;]] [processname|pid]</div><div class="line">processname    List GDI handles loaded by process (partial name accepted)</div><div class="line">pid                   List GDI handles associated with the specified process id</div><div class="line">-c                    Show GDI count information.</div><div class="line">-v                    Show GDI handle information.</div><div class="line">-f                    Filter the GDI handle type.&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<p>在不用任何参数的情况下，工具会显示所有进程的gdi资源使用概况，如图所示：<br><a href="/uploads/2013/05/20130504154700.png"><img src="/uploads/2013/05/20130504154700.png" alt="20130504154700"></a></p>
<p>值得注意的是，GDI Total和GDI All的区别在于，GDI Total统计出来的数量，是通过工具本身枚举可统计GDI资源后得出统计值，而GDI All是通过系统API直接获得的值，有些的情况下，GDI Total的值是小于GDI All的值的。这种情况可能因为某些GDI资源是系统保留的。另外一个要注意的是，如果要显示所有进程的gdi情况，需要有管理员权限运行该工具。</p>
<p>processname和pid参数能让我们指定需要查看的进程名或者进程ID。参数-c能查看更为详细的gdi资源的统计情况。如下图所示：<br><a href="/uploads/2013/05/20130504155533.png"><img src="/uploads/2013/05/20130504155533.png" alt="20130504155533"></a></p>
<p>从上图可以看出，qq这种DirectUI程序，用的Bitmap资源何其的多啊。。。</p>
<p>-v参数是用来查看更为详细的GDI资源信息，其中就包括额资源的句柄，资源的种类以及资源的内核对象地址。如图所示：<br><a href="/uploads/2013/05/20130504160314.png"><img src="/uploads/2013/05/20130504160314.png" alt="20130504160314"></a></p>
<p>最后工具还能利用-f filter，来查看想看到的资源情况，例如上图中，bitmap不是自己想看的资源，但是却占据了大量的视野。这个时候filter就能用上了。如图：<br><a href="/uploads/2013/05/20130504160837.png"><img src="/uploads/2013/05/20130504160837.png" alt="20130504160837"></a></p>
<p>上图就是利用filter，显示的Brush资源的详细情况了。</p>
<p>下载<a href="/uploads/2013/05/gdi_handle_study.zip">gdi_handle_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ProcMem —— 进程内存查看工具]]></title>
      <url>/2013/04/21/procmem-e8bf9be7a88be58685e5ad98e69fa5e79c8be5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>ProcMem是一个进程内存的查看工具，他可以显示进程中的内存分配情况，以及内存大概的用途，并且Dump指定的内存模块。工具界面如下图</p>
<p><a href="/uploads/2013/04/20130421231145.png"><img src="/uploads/2013/04/20130421231145.png" alt="20130421231145"></a></p>
<p>ProcMem并不是实时监控目标进程的内存情况，而是对内存情况作了一次快照和统计，并且显示出来。所以想看到进程最新的内存状态，可以点击Refresh菜单。</p>
<p>工具上半部分就是显示的目标进程的内存分布情况，以及一些细节信息。这里必须要谈到一点，Windows的标准控件中没有TreeList，对我这个写100个程序99个没有界面的人来说，自绘这个东西差点没要了我的命。</p>
<p>工具的下半部分用来显示TreeList选中项的内存情况，十六进制表示。值得注意的是，这里只会显示选中内存头个PAGE_SIZE大小的内存情况。如果想查看该项内存的全部情况，可以使用Dump功能，把内存Dump下来，然后用WinHex这样的工具查看，这个简单的内存显示区，只是为了提供一个预览功能而已。</p>
<p>值得一提的是，菜单Find，不是用来查找下方十六进制内存显示的内容，而是用来查找TreeList中的项目。例如想找到有关ntdll的内存区域，可以在查找框中输入ntdll，这样就可以定位如图所示的项目了。</p>
<p>这个工具是我花了大半周的业余时间弄的，时间比较仓促，不可避免的可能会有些bug。如果你刚好用上了这个工具，而且发现了bug，不妨通过邮件联系我（邮箱地址见<a href="http://0cch.net/wordpress/?page_id=2" target="_blank" rel="external">About Me</a>页面）。</p>
<p>下载<a href="/uploads/2013/04/ProcMem.zip">ProcMem</a>(包括32和64位版本)</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[记VC6中STL的map的一处BUG]]></title>
      <url>/2013/04/19/e8aeb0vc6e4b8adstle79a84mape79a84e4b880e5a484bug/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天和同事一起调了一个vc6.0中stl的map的一个bug。</p>
<p>BUG的起因是，我们的项目中使用了stl的map类。而这个map类的对象被用在了不同的DLL模块中，在这样的条件写，BUG就产生了，一个模块内部map对象指针能正常工作，另一个模块内部就出了问题。起初我们就觉得很奇怪，很简单一份代码，怎么会出现访问无效内存的情况，我们还是通常的思路，先在自己身上找问题。调了一会发现，自己的代码确实没有错误。于是我们把目光转向了vc6的stl本身。</p>
<p>跟踪了一下stl的代码，发现错误发生在下面这段代码内部。</p>
<p><a href="/uploads/2013/04/20130419140128.png"><img src="/uploads/2013/04/20130419140128.png" alt="20130419140128"></a></p>
<p>在正常的模块中while (_x != _Nil)这个循环只经历了一次，就跳出循环了。而发生错误模块中第二次进入这个循环，也就在这次的循环中，出现了内存访问异常的情况。很明显就要看两次_x != _Nil比较的详细结果。刚开始我被误导了，以为_Nil就是一个为0的常量，把注意力留在_X上后来发现，正确和错误的模块中，_X值一直都是相同的。这才缓过神来，_Nil这个值有问题。</p>
<p>确实，这个不是一个0，更不是一个常量，他是一个静态指针变量。在map对象被创建的时候，生成了一个填充为0的结构体，并且把结构体指针存到了这个变量中。</p>
<p>真相大白了，由于在不同的模块中都是用了stl的map代码，这样map的代码就被编译了两份，同样每个模块中map的_Nil也存放在各自的模块地址范围内。这样就使得_Nil值是不相同的，如果在非创建这个map对象的模块中引用对象指针，并且调用map的函数。如果遇到了_Nil，就会引用此模块自己的_Nil，而不是创建对象模块的_Nil，如果这个模块没有初始化过map对象，那么这个模块的_Nil就是0，即使初始化过，两个模块的_Nil也没可能是同一个值。</p>
<p>新版stl中这个bug必然已经解决，简单来看看vs2010的stl</p>
<p><a href="/uploads/2013/04/20130419142503.png"><img src="/uploads/2013/04/20130419142503.png" alt="20130419142503"></a></p>
<p>循环中检查是否为空，用到了函数_Isnil这个，而这个函数查看了_Nodeptr结构中的_Isnil成员变量。判断空放在成员对象内部，这样在多模块之间调用该对象就不会有任何问题了。</p>
<p>话说，vc6的stl确实是bug一堆，很早之前，人们就喜欢用sgi-stl来代替vc6自带的stl了。</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[文件搜索工具everythings工作原理简介]]></title>
      <url>/2013/04/08/e69687e4bbb6e6909ce7b4a2e5b7a5e585b7everythingse5b7a5e4bd9ce58e9fe79086e7ae80e4bb8b/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>everythings是一个非常强大而且好用的文件搜索工具。他搜索文件的速度非常之快，基本上刚刚输入要查找的文件名，文件已经搜索了出来。这里就简单介绍一下他的工作原理。</p>
<p>有一点已经非常明显，everythings在查找工作开始之前会建立全盘文件索引的数据库，那么这个数据库必然就是搜索文件快速的最重要的原因。而这个数据库的建立的用时似乎非常之短，是普通方法下遍历整个卷所不能及的。</p>
<p>实际上，建立数据库的方法确实比较特殊。简单来说就是遍历目标卷NTFS文件系统的Master File Table（简称MFT）的记录，这也解释了为什么everythings只能工作在是NTFS的文件系统的卷上。MFT可以看成ntfs中文件的索引，MFT中的每条记录都是指向卷中的一个文件。遍历这个索引的速度可要比按照目录递归整个卷的速度要快得多了。不过可惜的是，Windows并没有提供能够直接访问MFT的API，除非你直接解析NTFS磁盘格式（参考<a href="http://0cch.net/wordpress/?p=117" target="_blank" rel="external">这篇文章</a>）。而且就算让你直接遍历的MFT，要监控文件的变化并且写入数据库也是一个不好办的工作。不过可喜的是，微软提供了一种间接遍历MFT记录的方式，并且通过这样的方式可以监控卷上文件的变化，他就是Change Journal（<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363798(v=vs.85" target="_blank" rel="external">官方文档</a>.aspx)）。</p>
<p>Change Journal实际上是Windows 2000的NTFS文件系统就提供了的功能。其目的就是如同名字一样，记录文件改变的日志，方便NTFS文件系统对文件的恢复，这确实是个不错的特性。如何使用这个功能去遍历和监控MFT的记录，我这里就不做详细介绍了。因为有一片更加好的文章已经写的非常的清楚，我的demo也参考了他的很多代码。这篇文章叫做《<a href="http://www.microsoft.com/msj/0999/journal/journal.aspx" target="_blank" rel="external">Keeping an Eye on Your NTFS Drives: the Windows 2000 Change Journal Explained</a>》是1999年9月份的msdn杂志发表的。</p>
<p>我这里假设你已经阅读了这篇文章。我们已经知道了遍历和监控MFT记录的方法，并且通过这个方法获得了每个文件的文件名，file reference和parent reference（可以理解为文件id和其父目录id）。那么这里就可以把这三个元素作为一条记录存储在我们制定的数据库中。</p>
<p>下面简单说下如何利用这个数据库，当需要查找文件的时候：<br>1.获得用户输入的文件名。<br>2.通过文件名A可以从数据库中筛选出一些记录，而这些记录中就包括了文件的parent reference。<br>3.通过parent reference再次查找数据库的file reference字段，获得对应的文件名B，这个文件名B就是文件A的父目录了。重复这一步直到根目录为止。<br>这样就能找到文件的详细路径了。  </p>
<p>我写demo的时候并没有考虑怎么构建这个数据库，直接用了sqlite。不过如果能自己设计一个专门为存储这些数据的小数据库，也应该有更高的效率吧。everythings的数据库就是经过bzip压缩的自定义的文件。</p>
<p>DEMO——构建文件索引数据库：<br><a href="/uploads/2013/04/20130409003609.png"><img src="/uploads/2013/04/20130409003609.png" alt="20130409003609"></a></p>
<p>DEMO——查找文件<br><a href="/uploads/2013/04/20130409003752.png"><img src="/uploads/2013/04/20130409003752.png" alt="20130409003752"></a></p>
<p>P.S 如果采用sqlite作为文件数据库的话，建立索引的插入数据操作一定要利用sqlite的事务机制，否则会在插入数据上花费很多时间。</p>
<p>P.S.2 everythings之所以需要管理员权限才能工作，是因为他需要打开本地卷的句柄，这个就需要管理员权限了。</p>
<p>最后说一点这种方法的不足吧。那就是这种方法对于有多个hardlinks的文件，只能枚举出一个路径。关于hardlink的介绍可以参考<a href="http://0cch.net/wordpress/?p=179" target="_blank" rel="external">这篇文章</a>。由于这个不足，你在查找system32下的文件的时候，往往搜索不到，搜索到的又往往在其他目录，出现尤其多的应该是Winsxs目录了（而关于Winsxs可以看看<a href="http://sysdbg.com/index.php/2013/04/08/everything-you-never-wanted-to-know-about-winsxs/" target="_blank" rel="external">这篇翻译</a>，翻译质量很不错）。例如我们搜索C盘下的notepad.exe，everythings搜索的结果是这样的：<br><a href="/uploads/2013/04/20130409021029.png"><img src="/uploads/2013/04/20130409021029.png" alt="20130409021029"></a></p>
<p>可以注意到并没有system32下notepad.exe的身影。我们的demo同样也会遇到这样的情况：<br><a href="/uploads/2013/04/20130409021252.png"><img src="/uploads/2013/04/20130409021252.png" alt="20130409021252"></a></p>
<p>下图显示的是同一个notepad.exe的4个存储位置。<br><a href="/uploads/2013/04/20130409021829.png"><img src="/uploads/2013/04/20130409021829.png" alt="20130409021829"></a></p>
<p>虽然everythings有这样的一个不足，但是瑕不掩瑜，他的的确确是一个非常非常优秀的工具！我这里探讨的也仅仅是他的大概原理。实际上这个工具如此优秀，必然是在很多细节上做的非常好才行的。强烈推荐大家使用！</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[proc_dump_study —— 进程dump工具]]></title>
      <url>/2013/04/06/proc_dump_study-e8bf9be7a88bdumpe5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>proc_dump_study是逆向sysinternals的Procdump的一个工具。在功能上几乎和procdump一模一样。有一点差距就是目前没有支持clr的异常，也就是procdump的-g参数。其他的usage基本上相同，这里也不细说了。想说的一点是，proc_dump_study和procdump一样，功能比较强大，参数也比较多。所以为了方便使用，我把用的比较多的功能总结了一下，写了一个带UI shell程序。这样就方便测试人员或者不想深入理解命令行程序的人员使用。</p>
<p><a href="/uploads/2013/04/20130404013936.png"><img src="/uploads/2013/04/20130404013936.png" alt="20130404013936"></a></p>
<p>简单介绍一下使用方法<br>1.选择要监控或者dump的进程，确定生成dump的文件位置。<br>2.选择dump类型，包括mini dump，full dump以及effective dump，dump的大小分别为小，大，中等。<br>3.选择是否监控进程的cpu使用率<br>4.选择是否监控进程的内存提交数量<br>5.选择是否监控进程窗口是否挂起<br>6.选择是否监控进程发生异常<br>7.选择是否监控进程推出<br>8.最后点击dump按钮  </p>
<p>这样，一旦监控的时候任何监控点达到要求，就会产生dump文件了。如果不需要监控任何进程窗口，程序会立刻dump进程。实际上直接使用proc_dump_study会有更多的功能可以使用，不过这个UI版本应该可以应付大多数的情况了吧。</p>
<p>下载<a href="/uploads/2013/04/proc_dump_ui.zip">proc_dump_ui</a></p>
<p>最后放一张测试图<br><a href="/uploads/2013/04/20130402230714.png"><img src="/uploads/2013/04/20130402230714.png" alt="20130402230714"></a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[find_links_study —— 仿FindLinks的文件硬链接查找工具]]></title>
      <url>/2013/03/16/find_links_study-e4bbbffindlinkse79a84e69687e4bbb6e7a1ace993bee68ea5e69fa5e689bee5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在上一篇讨论<a href="http://0cch.net/wordpress/?p=179" target="_blank" rel="external">hardlink</a>的文章中，我在最后提到要写一个查找hardlinks的工具。正如上一篇文章中介绍这种工具的工作原理一样，他的代码比较简单。所以前几天find_links_study就已经写完了，只是一直没空发出来。这个工具的使用和FindLinks一模一样，这里也不多做介绍了。下图是工具的工作效果：</p>
<p><a href="/uploads/2013/03/20130316214417.png"><img src="/uploads/2013/03/20130316214417.png" alt="20130316214417"></a></p>
<p>从图中我们可以发现，原来我们在系统中看到的多个notepad文件实际上就是一个文件而已，只不过他利用了hardlink的技术，产生了多个路径罢了。我感觉hardlink还是一个非常实用的技术，具体用在哪大家可以发挥想象力。就我个人看来，在某些情况下，用hardlink来备份文件，倒是一种不错的选择。</p>
<p>下载<a href="/uploads/2013/03/find_links_study.zip">find_links_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ntfs_study探寻hardlink的本质]]></title>
      <url>/2013/03/12/e4bdbfe794a8ntfs_studye68ea2e5afbbhardlinke79a84e69cace8b4a8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在推出<a href="http://0cch.net/wordpress/?p=117" target="_blank" rel="external">ntfs_study的博文</a>中，我谈到过要用一些例子来简单介绍这个工具的用法，本文就算是这个工具的使用介绍以及hardlink在ntfs文件系统底层的简单探讨。</p>
<p>MSDN中写到，hardlink是在文件系统中，用多个在同一个卷的路径表示同一个文件的方法。那么在ntfs格式中这些被link的文件是怎么存在的呢？下面进行一些简单的探讨。</p>
<p>首先，我们需要去创建hardlink的文件。<br><a href="/uploads/2013/03/20130312202150.png"><img src="/uploads/2013/03/20130312202150.png" alt="20130312202150"></a></p>
<p>图中，第一个命令，在target_file.txt的同目录下，创建了hardlink文件link_file.txt。第二个命令，在不同目录（otherdir）下创建了第二个hardlink文件，link_file_in_otherdir.txt。第三个命令返回了错误，原因是我试图在不同卷里面来创建hardlink文件。失败的原因文章后面会介绍。</p>
<p>现在，让我们用ntfs_study来查看ntfs对这三个文件的处理到底是怎么样的。<br><a href="/uploads/2013/03/20130312202324.png"><img src="/uploads/2013/03/20130312202324.png" alt="20130312202324"></a></p>
<p>在这张图中，我们可以清楚的看到，这三个文件的file reference，也就是在主文件表（MFT）的id都是一样的！有一点我们必须明白，一个文件的存在不是因为在目录里面显示了文件名，而是他在MFT中有自己的位置，另外文件名只是文件的一个属性而已，没什么特别的。这也就解释了，看似三个文件为什么会指向同一个文件，因为在目录的记录中，他们指向了同一个id。</p>
<p>为了更加深入的探讨这个问题，我们来看一看id为0xB4A6这个具体情况。首先看看他的file record的数据。</p>
<p><a href="/uploads/2013/03/20130312202509.png"><img src="/uploads/2013/03/20130312202509.png" alt="20130312202509"></a></p>
<p>这里可以看到hardlinks的值是4！看到这里，应该就感到奇怪了，我们明明只创建了两个hardlink的文件，为什么这里写的是4呢？实际上，对于ntfs的文件而已，文件名以及他们在那个目录，这些都是属性而已，没有本体和hardlink之分，也就是说，我们原始创建的target_file.txt对于文件本身，也是一个hardlink。那么这个问题还是没解决啊，就算加上本身，最多也就是3个hardlinks，但是这里明明写的是4个！</p>
<p>让我们更加具体的看一看到底是什么回事吧。</p>
<p><a href="/uploads/2013/03/20130312202536.png"><img src="/uploads/2013/03/20130312202536.png" alt="20130312202536"></a></p>
<p>首先，我们看到了这个文件的属性中，居然有4个文件名，其中有三个实际上我们已经能够猜到，他们应该分别是target_file，link_file和link_file_in_otherdir这三个名称，那么第四个又是什么呢？只能再进一步看了。</p>
<p><a href="/uploads/2013/03/20130312202616.png"><img src="/uploads/2013/03/20130312202616.png" alt="20130312202616"></a></p>
<p>看了这幅图，估计大家就明白了，这个是为了兼容8.3文件名而产生的一个hardlink，只不过在我们现在的系统上隐藏了这个文件hardlink而已。其他三个文件名，如我们刚刚所料，就是那三个文件的名字。</p>
<p>现在解释下为什么hardlink只能在同一个卷里了。原因很显而易见，hardlink实际上是依赖于ntfs的MFT的，而不同的卷，会有不同的MFT，所以不能在不同卷之间创建hardlink也是理所当然的。</p>
<p>SysinternalsSuite中有一个工具叫做findlinks，用来找到一个文件所有的hardlink。其中实现的方法在不同的系统中有所不同，在vista以下的系统中程序调用GetFileInformationByHandle获得文件的MFT id，然后查找整个卷的文件，打开他们获得句柄，再调用GetFileInformationByHandle得到这些文件的id，与之前的id进行比对。可以说，这是非常费时的。而在vista中，这个耗时的问题得到了解决，调用FindFirstFileNameW和FindNextFileNameW就能够文件所有的hardlinks了。</p>
<p>我也计划过两天写一个find_links_study。</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[access_enum_study —— 仿AccessEnum的工具]]></title>
      <url>/2013/03/09/access_enum_study-e4bbbfaccessenume79a84e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>access_enum_study 是我逆向AccessEnum所写的程序。写这个逆向加上写这个程序大概用了1个多星期的时间吧。不过说实话，逆向算法还是比较麻烦的事情，所以这个程序里面有一些算法是我自己想的。不过果然不出我所料，效率比起Mark的正牌工具差了不少。这下，真的只能当作玩具玩玩了。</p>
<p><a href="/uploads/2013/03/20130309230748.png"><img src="/uploads/2013/03/20130309230748.png" alt="20130309230748"></a></p>
<p>下载<a href="/uploads/2013/03/access_enum_study.zip">access_enum_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ntfs_info_study —— 仿NtfsInfo工具]]></title>
      <url>/2013/02/27/ntfs_info_study-e4bbbfntfsinfoe5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>ntfs_info_study 这个工具可以显示ntfs卷的一些信息。主要也是学习NtfsInfo的功能，而仿造的一个小工具。ntfs_info_study能显示的信息包括卷大小，扇区数量，簇数量，扇区字节数，簇字节数，主文件表每条记录字节数以及主文件表的一些信息。当然它还可以显示部分NTFS系统文件的信息，例如：$Volume。</p>
<p>实际上ntfs_info_study稍微修复了NtfsInfo的一个问题。原来的NtfsInfo已经无法显示NTFS系统文件的信息了。原因是这个工具调用FindFirstFile这样的函数来查找NTFS系统文件。我不知道什么版本的Windows可以这么做，至少现在Windows 7上，这个方法是行不通的。所以在我从写的工具里，是先打开系统文件，然后查询文件信息，但是普通的CreateFile是打不开这些文件的，这里我的方法是调用OpenFileById。不过实际上，我还没找到正规而且完美显示所有NTFS系统文件的方法，因为部分系统文件在打开的时候会提示访问拒绝。</p>
<p>当然不正规的但是却比较完美的查看NTFS系统文件的方法也有，就是直接打开卷，解析NTFS文件系统数据结构。这个功能已经在<a href="http://0cch.net/wordpress/?p=117" target="_blank" rel="external">ntfs_study</a>中实现了，具体可以移步这个<a href="http://0cch.net/wordpress/?p=117" target="_blank" rel="external">链接</a>。</p>
<p><a href="/uploads/2013/02/20130227235402.png"><img src="/uploads/2013/02/20130227235402.png" alt="20130227235402"></a></p>
<p>以上是一副对比图，其他功能是一样的，唯一的区别就是最后一项中，ntfs_info_study能够显示部分NTFS系统文件信息。</p>
<blockquote>
<p>Usage: ntfs_info_study.exe <drive letter=""></drive></p>
</blockquote>
<p>使用方法自然也不必说明了，有兴趣的各位可以下载玩玩。</p>
<p>下载<a href="/uploads/2013/02/ntfs_info_study.zip">ntfs_info_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[pipe_list_study —— 仿PipeList的小工具]]></title>
      <url>/2013/02/21/pipe_list_study-e4bbbfpipeliste79a84e5b08fe5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>昨天在家看完笑傲江湖,没事可做，看了sysinternals的一个很简单的小工具PipeList，然后逆了下，山寨了一个，并且加按照管道名筛选的功能。工具很简单，一共也就200行代码。使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Usage: pipe_list_study.exe [search_pipe_name]</div><div class="line"></div><div class="line">search_pipe_name  ---  List the pipes that has search_pipe_name in the pipe name string.</div><div class="line">                       Without this argument pipe_list_study will list all pipes.</div></pre></td></tr></table></figure>
<p><a href="/uploads/2013/02/20130221114347.png"><img src="/uploads/2013/02/20130221114347.png" alt="20130221114347"></a></p>
<p>下载<a href="/uploads/2013/02/pipe_list_study.zip">pipe_list_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[又是总结和展望：没有世界末日，生活还要继续]]></title>
      <url>/2013/02/17/e6b2a1e69c89e4b896e7958ce69cabe697a5efbc8ce7949fe6b4bbe8bf98e8a681e7bba7e7bbad/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天总算是有时间，有心情写一篇总结去年生活，展望今年的文章了。</p>
<p>过去的2012年对我来说并不是末日，恰恰相反，他更像是一个新的开始。年初加入新公司，感觉选择还是比较正确的。在新的公司工作，工作不算忙，考勤也比较人性化，环境也还不错。主要是新同事们都还不错，别的不说，侃大山的能力还是很让人钦佩的。所以工作之余也非常娱乐。他们负责娱，我负责乐就行了，哈哈哈哈。刚刚说到工作不算忙，说起来本人也确实在这个环境中挺酱油的，不过俺也不是偷懒，主要是工作上合适我的活不算多。我去小组之后，发现本来打打杀杀的软件，现在要做良民了，不过其实这个做产品的思路是正确的，我也落得点清闲，实在不错。</p>
<p>当然了，本人实际上不甘于清闲。没事的时候还是跟哥们研究了许多编译器和系统底层的机制。除此之外，今年最大的一个收获是把COM这套东西了解一下，这样不仅对今后的工作有所帮助，而且自己本身对代码应该如何写方面也有一些收获。了解了COM当然要了解ATL，因为ATL过于强大，大部分代码我也没有去读，现在而言主要停留在能合理的使用，对于这点我也比较满意，实际上没打算把ATL搞得太清楚。至于编译器，学的也不多，刚刚把语法分析那块弄得一知半解吧。系统底层倒是一直在研究，尤其是文件系统，注册表等。关于系统底层这些，可以看我去年发的几篇blog，都是一些研究后自己写的工具。包括ntfs文件系统学习工具，注册表格式学习工具，pdb的解析工具等等。</p>
<p>回头再看看去年定的目标。。。我只能说“呵呵”。。。没有一个完成的啊有木有！！！果然奇迹没有发生啊有木有！！！那么，我又要给今年定目标了。。。</p>
<p>1.写一个study系列的工具，可以从山寨sysinternals的工具开始做起。</p>
<p>没了，对！就这一条！！！我就不信这一条我也搞不定！！！！！</p>
<p>去年写了总结后，同学们说我生活上的写的太少了，好吧那我简单总结下生活上的开心事！最开心的是，哥开始健身了！！！每周固定和一哥们去三次健身房，每次25分钟跑4k多米，并且锻炼腹肌和肱二头肌。现在人感觉就像回到高中状态。更让人欣慰的事情是能看到一点点腹肌了！另外精神方面，更多的相信“念念不忘，必有回响”，也有称这个为宇宙神秘力量的，不是迷信，而是一种信念，是一种相信只要你不断努力，不断追求就一定能达到目标的执念。不过可惜，我一直念念不忘年会大奖，可惜大宇宙送了我两个字——“呵呵”。。。关于练字，总是断断续续，貌似没啥进步。关于英语，嗯，没了。关于更八卦的生活详情~呵呵~你们以为我会写么！</p>
<p>那么今年生活上的目标呢？！还是健身，练字，英语和嘿嘿~~~</p>
<p>最后还是送祝福时间：祝福我的家人，朋友和我自己，新春快乐，健康平安，家庭和睦温馨！！！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[proc_study —— 仿PsList的进程查看工具]]></title>
      <url>/2013/02/04/proc_study-e4bbbfpsliste79a84e8bf9be7a88be69fa5e79c8be5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>proc_study 是我通过逆向PsList而写出来的小工具，如果在本地查看进程，这个工具和pslist没有任何区别。因为实现查看进程的方式也是和pslist一模一样的。另一方面，他缺乏pslist的查看远程计算机的进程的功能。没有实现这个并不是不知道怎么实现，是我半天也没搭建出这样的一个远程环境，真够郁闷的。这个应该是年前的最后一个study系列的工具了。期待蛇年有时间山寨更多工具，嘿嘿~~~</p>
<p><a href="/uploads/2013/02/20130204204101.png"><img src="/uploads/2013/02/20130204204101.png" alt="20130204204101"></a></p>
<p>这个工具的使用方法和命令行参数可以直接参看PsList的。因为整个Usage我都是直接山寨过来的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Usage: proc_study [-d][-m][-x][-t][name|pid]</div><div class="line">-d      Show thread detail.</div><div class="line">-m     Show memory detail.</div><div class="line">-x      Show processes, memory information and threads.</div><div class="line">-t       Show process tree.</div><div class="line">name Show information about processes that begin with the name</div><div class="line">specified.</div><div class="line">-e      Exact match the process name.</div><div class="line">pid Show information about specified process.</div><div class="line"></div><div class="line">All memory values are displayed in KB.</div><div class="line">Abbreviation key:</div><div class="line">Pri Priority</div><div class="line">Thd Number of Threads</div><div class="line">Hnd Number of Handles</div><div class="line">VM Virtual Memory</div><div class="line">WS Working Set</div><div class="line">Priv Private Virtual Memory</div><div class="line">Priv Pk Private Virtual Memory Peak</div><div class="line">Faults Page Faults</div><div class="line">NonP Non-Paged Pool</div><div class="line">Page Paged Pool</div><div class="line">Cswtch Context Switches</div></pre></td></tr></table></figure>
<p>下载<a href="/uploads/2013/02/proc_study.zip">proc_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hive_study —— 注册表文件格式解析工具]]></title>
      <url>/2013/01/23/hive_study-e6b3a8e5868ce8a1a8e69687e4bbb6e6a0bce5bc8fe8a7a3e69e90e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这几天又写了个小工具，刚下班就在这发了算了。</p>
<p>hive_study 是一个注册表文件格式解析工具。功能也比较的简单，主要是dump出注册表里面的数据信息。例如显示子项，子键，显示键值以及他们的安全描述符。当然了，还是那样，注册表的hive文件实际上是不可读的，因为内核独占他了。想要获得可以读的hive文件，可以用ntfsstudy把hive文件dump出来，然后去读这个新的hive文件。以下是他的Usage。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Usage : hive_study.exe -f hive_path [-options]</div><div class="line"></div><div class="line">Options:</div><div class="line">[-k key_path] Specifies key path (e.g.: -k &quot;ControlSet001\Control\Session Manager&quot;)</div><div class="line">[-v value_name] Specifies value name (e.g.: -v BootExecute)</div><div class="line">[-l] List subkeys information</div><div class="line">[-e] List values information</div><div class="line">[-s] Show key security description information</div><div class="line">[-w output_file] Dump attribute to a file</div></pre></td></tr></table></figure>
<p><a href="/uploads/2013/01/20130123181723.png"><img src="/uploads/2013/01/20130123181723.png" alt="20130123181723"></a></p>
<p>下载<a href="/uploads/2013/01/hive_study.zip">hive_study</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[分享自己打造的BugReporter]]></title>
      <url>/2013/01/20/e58886e4baabe887aae5b7b1e68993e980a0e79a84bugreporter/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这份代码应该是将近一年前写的吧，应该是去年年初了。不像ntfsstudy和dia_study，这个工具应该比较的实用吧，实用场合可以比较多。所以也把源代码发出来。看工具名称基本上已经知道了是报告bug用的。其实这种工具倒是挺多的。不过我个人感觉自己写一个用起来顺手，而且代码量小，容易修改自定义。</p>
<p>工具代码有三个工程，分别是minidump_generator，dump_minidump，BugReporter。<br>minidump_generator是一个dll，当然也可以编译成静态库，他需要加入到你想使用BugReporter的工程里面。<br>dump_minidump是一个dump文件的解析库，他是BugReporter工程的依赖库。<br>BugReporter是一个窗口程序，在你融合了minidump_generator的程序崩溃的时候会弹出窗口。就像图中那样。  </p>
<p><a href="/uploads/2013/01/20130120193015.png"><img src="/uploads/2013/01/20130120193015.png" alt="20130120193015"></a></p>
<p>勾选send bug report并且点击ok，窗口里的完整log和dump文件会打包为zip文件储存，储存的地方可以由程序指定，也可以写注册表键值，reporter会去都键值然后存储到相应的位置。具体什么键值，看源代码吧。不完整和遗憾的地方也有，就是还没有http上传到提交dump收集服务器的代码。因为确实不会写php啥的。另外这个工程也用了不少开源代码，这里也感谢一下，其中包括反汇编引擎和ZIP代码。</p>
<p>下载源代码：<a href="/uploads/2013/01/BugReporter.zip">BugReporter</a></p>
<p>以下是完整的dump log：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">SYSTEM INFORMATIONS</div><div class="line">---------------</div><div class="line">ProcessorArchitecture : x86</div><div class="line">Number Of Processors : 16</div><div class="line">OS Version : 6.1</div><div class="line">BuildNumber : 7600</div><div class="line">CSDVersion :</div><div class="line">Platform : Windows Server 2003, Windows XP, or Windows 2000</div><div class="line"></div><div class="line">EXCEPTION INFORMATIONS</div><div class="line">---------------</div><div class="line">Thread id : 5744</div><div class="line">ExceptionCode : c00000fd</div><div class="line">ExceptionFlags : 00000000</div><div class="line">ExceptionRecord : 0000000000000000</div><div class="line">ExceptionAddress : 0000000000dea637</div><div class="line">ExceptionInformation0 = 0000000000000000</div><div class="line">ExceptionInformation1 = 0000000000102000</div><div class="line">Thread Context :</div><div class="line">EAX = 00102000 ECX = 00102050 EDX = 5eea2408 EBX = 7efde000</div><div class="line">ESP = 00103120 EBP = 00103128 ESI = 001ff9c8 EDI = 00104210</div><div class="line">EFLAGS = 00010206</div><div class="line"></div><div class="line">MODULE INFORMATIONS</div><div class="line">---------------</div><div class="line">Base Size Name FileVersion ProductVersion</div><div class="line">0000000000de0000 0001a000 D:\crashme\Debug\crashme.exe 0 0</div><div class="line">00000000772b0000 00180000 C:\Windows\SysWOW64\ntdll.dll 600011db040af 600011db040af</div><div class="line">0000000075ef0000 00100000 C:\Windows\SysWOW64\kernel32.dll 600011db04001 600011db04001</div><div class="line">00000000750f0000 00046000 C:\Windows\SysWOW64\KERNELBASE.dll 600011db04001 600011db04001</div><div class="line">000000005ed90000 00124000 C:\Windows\winsxs\x86_microsoft.vc90.debugcrt_1fc8b3b9a1e18e3b_9.0.30729.4148_none_2a4cbfc25558bcd3\msvcr90d.dll 9000078091034 9000078091034</div><div class="line">0000000074330000 000eb000 C:\Windows\System32\dbghelp.dll 600011db04001 600011db04001</div><div class="line">0000000076e00000 000ac000 C:\Windows\SysWOW64\msvcrt.dll 700001db04001 6000121be4001</div><div class="line">0000000076d10000 000f0000 C:\Windows\SysWOW64\rpcrt4.dll 600011db04001 600011db04001</div><div class="line">0000000074e20000 00060000 C:\Windows\SysWOW64\sspicli.dll 600011db04064 600011db04064</div><div class="line">0000000074e10000 0000c000 C:\Windows\SysWOW64\CRYPTBASE.dll 600011db04001 600011db04001</div><div class="line">00000000761e0000 00019000 C:\Windows\SysWOW64\sechost.dll 600011db04001 600011db04001</div><div class="line">00000000763e0000 000a0000 C:\Windows\SysWOW64\advapi32.dll 600011db04001 600011db04001</div><div class="line">000000006e810000 00025000 C:\Windows\System32\powrprof.dll 600011db04001 600011db04001</div><div class="line">00000000768e0000 0019d000 C:\Windows\SysWOW64\setupapi.dll 600011db04001 600011db04001</div><div class="line">0000000074f70000 00027000 C:\Windows\SysWOW64\cfgmgr32.dll 600011db04001 600011db04001</div><div class="line">0000000076c80000 00090000 C:\Windows\SysWOW64\gdi32.dll 600011db04001 600011db04001</div><div class="line">0000000076a80000 00100000 C:\Windows\SysWOW64\user32.dll 600011db04001 600011db04001</div><div class="line">0000000077280000 0000a000 C:\Windows\SysWOW64\lpk.dll 600011db04001 600011db04001</div><div class="line">0000000075140000 0009d000 C:\Windows\SysWOW64\usp10.dll 102721db04001 102721db04001</div><div class="line">0000000076150000 0008f000 C:\Windows\SysWOW64\oleaut32.dll 600011db04001 600011db04001</div><div class="line">0000000075ff0000 0015c000 C:\Windows\SysWOW64\ole32.dll 600011db04001 600011db04001</div><div class="line">0000000074fa0000 00012000 C:\Windows\SysWOW64\devobj.dll 600011db04001 600011db04001</div><div class="line">0000000074f10000 00060000 C:\Windows\System32\imm32.dll 600011db04001 600011db04001</div><div class="line">0000000075020000 000cc000 C:\Windows\SysWOW64\msctf.dll 600011db04001 600011db04001</div><div class="line">000000006fa00000 0003e000 C:\Program Files (x86)\Sophos\Sophos Anti-Virus\sophos_detoured.dll 900000000235f 9000000000000</div><div class="line">00000000763d0000 00005000 C:\Windows\SysWOW64\psapi.dll 600011db04001 600011db04001</div><div class="line"></div><div class="line">Crash IP Disasm :</div><div class="line">test dword ptr [eax], eax</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Dia_study —— PDB查看工具]]></title>
      <url>/2013/01/20/dia_study-pdbe69fa5e79c8be5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>没事在家翻代码，发现大半年前的一份代码，写的是一个调用DIA SDK查看PDB文件的小工具。仔细想想我觉得还有点用处，而且使用方式简单，所以现在就发到blog上来吧。</p>
<p>简单介绍一下这个小工具。它可以dump出pdb的函数和数据结构的信息。下面两张图分别dump的是数据结构和函数的信息。</p>
<p>图一中，命令行为 dia_study.exe -p xxx.pdb -n <em>processor</em> -t 其实 -p是指pdb路径，-n是要获得的符号（支持通配符），-t说明要看的是数据结构而不是函数。然后所有带有processor的数据结构就会dump出来了。</p>
<p><a href="/uploads/2013/01/20130120165712.png"><img src="/uploads/2013/01/20130120165712.png" alt="20130120165712"></a></p>
<p>图二中，命令行为 dia_study.exe -p xxx.pdb -n <em>processor</em> -f 唯一的区别就是-t变成了-f。指明要dump的是函数而非数据结构。</p>
<p><a href="/uploads/2013/01/20130120165737.png"><img src="/uploads/2013/01/20130120165737.png" alt="20130120165737"></a></p>
<p>ok，使用方式就是如此简单。注意一点，请自备vs2010的c runtime 以及 msdia100.dll（需要注册），否则程序无法运行。</p>
<p>下载 <a href="/uploads/2013/01/dia_study.zip">dia_study</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[NtfsStudy —— ntfs磁盘格式学习工具]]></title>
      <url>/2013/01/19/ntfsstudy-ntfse7a381e79b98e6a0bce5bc8fe5ada6e4b9a0e5b7a5e585b7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>经过将近一个月业余时间的开发，终于完成了NtfsStudy这个小工具的第一版。</p>
<p>简单介绍一下这个工具，NtfsStudy这个工具是我在学习Ntfs文件系统磁盘格式的时候，为了自己更加方便快捷的查看磁盘格式而开发的工具。可以说这个工具从开始写到现在发布，实际上也是一个学习ntfs的过程。我一边研究理解这个格式，一边把理解的东西写成代码，加入这个工具，然后再用这些功能去理解新的内容。反复这样做，这个工具就也不知不觉成型了。</p>
<p>NtfsStudy这个工具的主要功能是：枚举目录文件，查看和dump文件属性。这些功能都没用调用windows 文件操作类的API完成，而是依靠直接读取磁盘信息，并且解析磁盘信息来完成的。例如，如果尝试去复制注册表的系统hive文件，那是一定会被系统拒绝的，这个文件是系统读写独占的，但是通过这个工具就能绕过“ntfsstudy.exe -f c:\ -r e0a2 -w 3 d:\system.hiv”， 这个命令行的意思是把volume C上的引用数为0xe0a2文件中的3号属性的内容写到d:\system.hiv文件中。其实id为3的属性正好就是data属性，也就是文件本身的内容。这样就可以dump不能读的注册表hive文件了。下面是“ntfsstudy.exe -f c:\ -r e0a2 -d 8”的结果：</p>
<p><a href="/uploads/2013/01/ntfs_hive.png"><img src="/uploads/2013/01/ntfs_hive.png" alt="ntfs_hive"></a></p>
<p>更多的详细用法和例子等我有空会在blog里面写一些。</p>
<p>下面就是他的Usage，也是目前该工具具有的功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">NtfsStudy v1.0 - Ntfs format study tool.</div><div class="line">Copyright (C) 2012-2013 nightxie</div><div class="line">0CCh - www.0cch.net</div><div class="line"></div><div class="line">Usage : NtfsStudy.exe [options] -f file_path_name</div><div class="line">-f file_path_name Specifies the target file path to parse.</div><div class="line"></div><div class="line">options:</div><div class="line"></div><div class="line"></div><div class="line">[-r file_reference]   Specifies the target file reference.</div><div class="line">NtfsStudy will parse the REFERENCE rather than the path which</div><div class="line">Specifies by -f. NtfsStudy will just use the path root.</div><div class="line">[-a] Show the file record information of the target file.</div><div class="line">[-l]   List the files in the directory.</div><div class="line">[-w attribute_id output_file_path] Write target attribute to a file.</div><div class="line">(The attribute size must less than 128mb)</div><div class="line">[-v attribute_type] Show detail attribute information specified by attribute_type.</div><div class="line">[-d attribute_type [start_offset range]] Show binary information specified by attribute_type.</div><div class="line">[-s secure_id] Show the security descriptor specified by secure_id.</div><div class="line">[-c] Show the attributes definition columns.</div><div class="line"></div><div class="line"></div><div class="line">About attribute type:</div><div class="line"></div><div class="line"></div><div class="line">$STANDARD_INFORMATION         = 1</div><div class="line">$ATTRIBUTE_LIST               = 2</div><div class="line">$FILE_NAME                    = 3</div><div class="line">$OBJECT_ID                    = 4</div><div class="line">$SECURITY_DESCRIPTOR          = 5</div><div class="line">$VOLUME_NAME                  = 6</div><div class="line">$VOLUME_INFORMATION           = 7</div><div class="line">$DATA                         = 8</div><div class="line">$INDEX_ROOT                   = 9</div><div class="line">$INDEX_ALLOCATION             = 10</div><div class="line">$BITMAP                       = 11</div><div class="line">$REPARSE_POINT                = 12</div><div class="line">$EA_INFORMATION               = 13</div><div class="line">$EA                           = 14</div><div class="line">$LOGGED_UTILITY_STREAM        = 16</div><div class="line"></div><div class="line">About secure id:</div><div class="line"></div><div class="line">To get the secure id of target file.</div><div class="line">Use &apos;-v 1&apos; command, secure id will displayed in STANDARD_INFORMATION.</div></pre></td></tr></table></figure>
<p>另外我还会继续完善这个工具。如果发现bug请与我联系。</p>
<p>下载<a href="/uploads/2013/01/NtfsStudy.zip">NtfsStudy</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设置线程名]]></title>
      <url>/2013/01/12/e8aebee7bdaee7babfe7a88be5908d/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>给线程命名的作用主要还是为了调试方便。其他的好处也没有了，至少我没想出来。这里说一下MS_VC_EXCEPTION这个异常，调试器（vs，windbg）默认情况下应该会在收到这个异常的时候，他会自动处理这个异常，具体操作应该是记录下线程对应的名称，然后将异常设置为Handle状态。什么意思呢？就是说，即使下面这段代码中的RaiseException不在try-except中，在调试器attach的情况下也能顺畅执行，调试器不会因为异常把执行中断下了，而是默默设置了线程名之后继续后面的代码。而下面的代码之所以要放在try-except中，是因为希望没有调试器的情况下，也能顺利执行不被中断。另外一点，windbg可以设置让这个异常中断下来（命令 sxe vcpp），而vs貌似没有这样的方法，可能是我vs调试器用的比较少，没找到吧。对于托管代码，设置这个就更简单了，详见 <a href="http://msdn.microsoft.com/en-us/library/581hfskb(v=vs.100" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/581hfskb(v=vs.100).aspx</a>.aspx)</p>
<p><a href="/uploads/2013/01/QQ截图20130112151544.png"><img src="/uploads/2013/01/QQ截图20130112151544.png" alt=""></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></div><div class="line"><span class="keyword">const</span> DWORD MS_VC_EXCEPTION=<span class="number">0x406D1388</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(push,8)</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagTHREADNAME_INFO</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    DWORD dwType; <span class="comment">// Must be 0x1000.</span></div><div class="line">    LPCSTR szName; <span class="comment">// Pointer to name (in user addr space).</span></div><div class="line">    DWORD dwThreadID; <span class="comment">// Thread ID (-1=caller thread).</span></div><div class="line">    DWORD dwFlags; <span class="comment">// Reserved for future use, must be zero.</span></div><div class="line">&#125; THREADNAME_INFO;</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(pop)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetThreadName</span><span class="params">( DWORD dwThreadID, <span class="keyword">char</span>* threadName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    THREADNAME_INFO info;</div><div class="line">    info.dwType = <span class="number">0x1000</span>;</div><div class="line">    info.szName = threadName;</div><div class="line">    info.dwThreadID = dwThreadID;</div><div class="line">    info.dwFlags = <span class="number">0</span>;</div><div class="line"></div><div class="line">    __try</div><div class="line">    &#123;</div><div class="line">        RaiseException( MS_VC_EXCEPTION, <span class="number">0</span>, <span class="keyword">sizeof</span>(info)/<span class="keyword">sizeof</span>(ULONG_PTR), (ULONG_PTR*)&amp;info; );</div><div class="line">    &#125;</div><div class="line">    __except(EXCEPTION_EXECUTE_HANDLER)</div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[R3卸载任意消息钩子]]></title>
      <url>/2012/12/26/r3e58db8e8bdbde4bbbbe6848fe6b688e681afe992a9e5ad90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这是工作中遇到的一个问题。一个程序每次起来后会去挂鼠标键盘低级钩子，这类钩子恶心的地方是如果你用调试工具attach上去，鼠标键盘就会急剧的延时，就跟挂起差不多了，根本无法使用键盘鼠标。MSDN上面指明，设置LowLevelHooksTimeout可以帮助解决这个问题。但是无奈的是，似乎没起什么作用，渣英语，不知道是不是我的理解有误。</p>
<p>其他比较好的解决方案也有。比较好的一个就是用远程调试的方式，这种方式可以在hook存在的情况下调试程序，甚至调试hook的函数。另一个办法就是attach之前，卸载低级钩子。对于调试和钩子无关地方的时候，第二个选择也还是不错的。所以，Xuetr的卸载消息钩子的功能派上了用场。每次调试此程序之前，都先卸载钩子。但是还是有问题，我们都有这样的经验，在进行调试的时候经常需要restart程序，并且重新开始调试。这样可就恶心了，每次都要卸载一次钩子。于是，我就写了一个程序，循环查询低级鼠标键盘钩子，发现后立刻卸载，这样调试这个程序就会比较轻松了。</p>
<p>虽然说用驱动写这个功能看起来比较轻松，实际上R3实现也很简单。这里用到的关键之时是Desktop Heap会在GUI进程中映射到用户态内存上，这也就给了我们可乘之机。简单介绍一些Desktop Heap是什么。我们都知道一个桌面都有个Desktop Object的对象，而实际上美国Desktop Object都会有一个对应他的Desktop Heap。Desktop Heap主要存储用户交互对象（user interface objects），这其中就包括Window，Menu，Hook等等。既然Hook存储在Desktop heap，而且Desktop heap又刚好映射到R3内存，那么我们就可以顺利的读取他了。这里，可能会有一个疑问，怎么知道Hook存储在Desktop Heap，而不是Share Heap或者其他。实际上Windows的Win32k中有一个Handle Information Table，指明了每种Object的存储类型。</p>
<p>现在是已经知道了可以去读Hook对象，但是上哪去读就是要解决的问题了。这里就要提到老生常谈的Sharedinfo了。用户态的Sharedinfo获取方法很多，顺手就行。与上面问题相关的就是Sharedinfo里面会有一个Handle Entry Table，里面存储的就是包括Hook在内的User Object。Entry的结构如下（来自reactos）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">HANDLEENTRY</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">PHEAD pHead;</div><div class="line">PVOID pOwner;</div><div class="line">BYTE bType;</div><div class="line">BYTE bFlags;</div><div class="line">WORD wUniq;</div><div class="line">&#125; HANDLEENTRY, *PHE, *PHANDLEENTRY;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
<p>其中pHead指向Object，bType表示object类型。HOOK的bType是5。所以这里我们只需要在bType为5的时候继续下面的操作。</p>
<p>pHead肯定是指向的内核内存，所以我们无法直接访问HOOK的内部情况。我们需要找到这个Object映射到R3的内存地址才行。幸运的是这种关系也比较简单明了。在Teb-&gt;Win32ClientInfo.ulClientDelta就存放了对应的关系Delta值。计算方法如下</p>
<p>ObjectInR3 = HANDLEENTRY.pHead - Teb-&gt;Win32ClientInfo.ulClientDelta。</p>
<p><a href="/uploads/2012/12/20121226220202.png"><img src="/uploads/2012/12/20121226220202.png" alt="20121226220202"></a></p>
<p>这样也就得到了HOOK Object。接下来的事情就好办了，HOOK Object的第一项就是HHOOK。只需要UnhookWindowsHookEx((HHOOK)Hook-&gt;head.h);就能卸载钩子了。</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于整型数符号位扩展的一点心得]]></title>
      <url>/2012/11/13/e585b3e4ba8ee695b4e59e8be695b0e7aca6e58fb7e4bd8de689a9e5b195e79a84e4b880e782b9e5bf83e5be97/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近写的程序中遇到了整型数符号位扩展的小问题。稍稍看了下，写在这里备忘。</p>
<p>这里举个例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// case 1</span></div><div class="line"><span class="keyword">long</span> i = <span class="number">-1</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> q = i;</div><div class="line"> </div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// case 2</span></div><div class="line"><span class="keyword">long</span> i = <span class="number">-1</span>;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> q = i;</div><div class="line"> </div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// case 3</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0xffffffff</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> q = i;</div><div class="line"> </div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// case 4</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0xffffffff</span>;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> q = i;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>那么这4肿情况中q都是多少呢？<br>实验结果是case 1 和 2，他们的q的值（这里都表示为无符号）0xffffffff<code>ffffffff，而case 3 和 4 中q的值为0x00000000</code>ffffffff。<br>看到这里，大概就能推测c++的转换策略。即以源操作数的类型为依据，对其进行扩展，然后赋值到目标操作数，他并不在乎目标的类型有无符号。</p>
<p>看了相关编译完成后的汇编代码可以确认这一点，case 1和2的汇编代码完全相同，而3和4也是一样。更具体一点来说。有符号的情况下调用了cdq对符号位进行扩展，然后将edx赋值到q的高位，而无符号的情况下，简单xor了寄存器，然后赋值到q的高位。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[dbgLua，让lua脚本也能控制windbg进行调试(更新1.0.1.1)]]></title>
      <url>/2012/08/15/dbgluaefbc8ce8aea9luae8849ae69cace4b99fe883bde68ea7e588b6windbge8bf9be8a18ce8b083e8af95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>关于dbgLua：<br>这是一个让windbg支持lua脚步的扩展程序。写这个程序的主要目的是希望能简单的取代windbg本身的脚本。因为我确实不喜欢windbg那种形式的脚本。</p>
<p>使用方法：将dbgLua.dll拷贝到windbg的winext下，编写lua脚本。调试的时候，在输入框中输入“!dbgLua.run d:\sample.lua”其中“d:\sample.lua”是你的脚步路径。</p>
<p>以下是1.0.0.1版本所支持的lua函数（后续可能会慢慢添加更多，看需求了）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">dbgLua 1.0.1.1 API</div><div class="line"></div><div class="line">dprint 输出信息到windbg command窗口，例如dprint(&quot;hello&quot;)</div><div class="line">exec 执行一条windbg命令，例如exec(&quot;bp kernel32!CreateFileW&quot;)</div><div class="line">getreg 获得当前被调试对象的寄存器数据，例如eax_val = getreg(&quot;eax&quot;)</div><div class="line">setreg 设置当前被调试对象的寄存器数据，例如setreg(&quot;eax&quot;, 123456)</div><div class="line">readbyte 读取当前被调试对象的内存器数据，大小1字节</div><div class="line">readword 同上，大小为2字节</div><div class="line">readdword 同上，大小为4字节，例如mem_val = readxxxx(0x410000)</div><div class="line">writebyte 写入当前被调试对象的内存器数据，大小1自己</div><div class="line">writeword 同上，大小为2字节</div><div class="line">writedword 同上，大小为4字节，例如writexxxx(0x410000, 654321)</div><div class="line">readunicode 读取一个unicode字符串，例如str = readunicode(0x410000)</div><div class="line">readascii 读取一个ascii字符串，例如str = readascii(0x410000)</div><div class="line">wait 等待事件，例如exec(&quot;bp kernel32!CreateFileW;g&quot;);wait();</div><div class="line">evalmasm masm表达式求值，例如val = evalmasm(&quot;11+2*3&quot;)</div><div class="line">evalcpp cpp表达式求值，例如val = evalcpp(&quot;sizeof(char)&quot;)</div><div class="line">getmoduleinfo 通过模块名获得模块基址和大学，例如base,size = getmoduleinfo(&quot;kernel32&quot;)</div><div class="line">search 二进制查找，例如found = search(base, size, &quot;cc 89 75 fc eb &quot;)&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<p>具体的结合这些函数进行调试的例子还没有准备好，等有机会了，我会准备好调试案例放到这里来。</p>
<p>另外这是一个初始版本，不保证没有bug，如果你在使用中发现了bug，或者有好的想法，例如添加什么函数功能，不妨联系我。</p>
<p>下载：</p>
<p><a href="/uploads/2012/08/dbgLua1.zip">dbgLua</a>(v1.0.1.1)</p>
<p><a href="/uploads/2012/08/dbgLua.zip">dbgLua</a>(v1.0.0.1)</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于判断文件是否存在最高效的函数]]></title>
      <url>/2012/08/01/e585b3e4ba8ee588a4e696ade69687e4bbb6e698afe590a6e5ad98e59ca8e69c80e9ab98e69588e79a84e587bde695b0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>判断文件存在方法有很多，例如CreateFile，FindFirstFile，GetFileAttributes，PathFileExists等等。但是哪一种更加高效呢？其实作为常识，可能都能判断出GetFileAttributes和PathFileExists会比较快（而实际上PathFileExists就是调用的GetFileAttributes）。</p>
<p>下面是google一份开源代码中提到的统计结果</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// <span class="doctag">NOTE:</span> This is the fastest implementation I found. The results were:</span></div><div class="line"><span class="comment">// CreateFile 1783739 avg ticks/call</span></div><div class="line"><span class="comment">// FindFirstFile 634148 avg ticks/call</span></div><div class="line"><span class="comment">// GetFileAttributes 428714 avg ticks/call</span></div><div class="line"><span class="comment">// GetFileAttributesEx 396324 avg ticks/call&lt;/blockquote&gt;</span></div></pre></td></tr></table></figure>
<p>为什么会这样呢？大概了看了下，原因应该是这样的。</p>
<p>1.CreateFile会创建句柄，需要一个完整IO流程，所以需要的时间比如非常长。<br>2.FindFirstFile回去查询文件夹的文件，虽然不会真正的打开文件句柄，并且在文件已经被缓存的情况下，走的是fastio流程，所以查询时间大幅下降，但是操作略微繁琐，导致他不是最好的选择。  </p>
<ol>
<li>GetFileAttributes 和GetFileAttributesEx 也设置了QueryOnly标志，不需要获得真正的句柄，并且能够走fastio流程，也没有文件夹查询等工作，所以速度最快。  </li>
</ol>
<p>那么为什么GetFileAttributesEx 会快那么一点点呢？因为这个函数少了一个获取BasicInformation，也就是少了一个fastio流程。所以速度更快。这样看来，自己实现一个PathFileExistsEx效率可以高过PathFileExists了。（其实没多大实际意义）</p>
<p>google就是这样做的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">bool</span> File::Exists(<span class="keyword">const</span> TCHAR* file_name) &#123;</div><div class="line">ASSERT1(file_name &amp;&amp; *file_name);</div><div class="line">ASSERT1(lstrlen(file_name) &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">NOTE:</span> This is the fastest implementation I found. The results were:</span></div><div class="line"><span class="comment">// CreateFile 1783739 avg ticks/call</span></div><div class="line"><span class="comment">// FindFirstFile 634148 avg ticks/call</span></div><div class="line"><span class="comment">// GetFileAttributes 428714 avg ticks/call</span></div><div class="line"><span class="comment">// GetFileAttributesEx 396324 avg ticks/call</span></div><div class="line">WIN32_FILE_ATTRIBUTE_DATA attrs = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> != ::GetFileAttributesEx(file_name, ::GetFileExInfoStandard, &amp;attrs);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PIO读IDE]]></title>
      <url>/2012/02/12/pioe8afbbide/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="/uploads/2012/02/read.jpg"><img src="/uploads/2012/02/read.jpg" alt=""></a></p>
<p>经过各种代码的东拼西凑、改来改去，总算是把PIO读取硬盘信息的代码“写”好了，上图是读取硬盘的前512字节的效果图。目前看来还是很挫，原因有两点：</p>
<p>1.只支持LBA48的读取方法，不支持CHS，LBA28，虽然这两个方法的读取范围很有限，但是感觉至少要把LBA28给支持了才行。<br>2.很郁闷的一点，这个读取代码读取成功了，但是IO后返回的状态值是错误的。不知道哪里出了问题，会不会是虚拟硬盘太小而不能用LBA48的问题呢？没有头绪。  </p>
<hr>
<p>补充1.通过IDENTIFY DEVICE命令发现，可能由于设置的虚拟硬盘比较小的原因，虚拟硬盘不支持48bit的地址。IDENTIFY DEVICE会通过PIO方式返回一个256字（512字节）的数据。其中第83个字的第10位表示是否支持48bit的地址。如下图（来自ATA官方手册AT Attachment with Packet Interface - 6）。<br><a href="/uploads/2012/02/48bitaddress.jpg"><img src="/uploads/2012/02/48bitaddress.jpg" alt=""></a><br>补充2.由于不支持LBA48，我还是实现了LBA28。不过这个只能访问128G的硬盘了。至于CHS目前还是不考虑实现。<br>补充3.PIO写的方式大概也是差不多的。准备慢慢实现，还有DMA读写硬盘也需要了解下。不过好消息是现在基本能看懂ATA的手册了。<br>补充4.MiniKernel的代码依然写得很挫，暂时不准备共享出来，因为共享出来也没啥用，想学写系统的也看不懂那种烂代码。<br>补充5.感觉读写硬盘是一个挺有意思地方，完全可以单独拿出来写一个系列的blog。只是有没有时间和懒不懒的问题。<br>补充6.补充5的最后一句是P话，时间肯定是有的，就是懒而已。。。  </p>
<p>一个月一篇文章。。。多一点都没有。。。我果然是个需要被监督的人。。。  </p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kernel </tag>
            
            <tag> IDE </tag>
            
            <tag> MiniKernel </tag>
            
            <tag> OS </tag>
            
            <tag> PIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结2011，展望2012]]></title>
      <url>/2011/12/31/e680bbe7bb932011efbc8ce5b195e69c9b2012/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>2011还是过去了，2012来了。觉得有点必要写点东西，总结一下过去，展望一下未来。如果要用几个词来总结我的2011，那应该是天真，失望，浮躁。可以说我对我的2011是比较不满意的。</p>
<p>天真，我自认为自己还算是个性情中人，所以很多事情对我来说就是讲得就是个胃口。我是很愿意把结识的人当作朋友处。但是，在工作中，有些“朋友”确实是建立在利益基础上的。如果把所有说过“我们是朋友”的人当作朋友，很有可能吃亏是自己。工作也是一样，代入太多感情色彩也是很天真的一种做法。为了讲胃口，有时候退一步，多干一些活。做的好当然没事，但是做的不尽如人意有时候给你带来的真的会是麻烦。</p>
<p>失望，在去年对一些人失望了，对工作的事情也失望，对自己也挺失望的。有些事情自己也不想拿出来说，也不想以后看到在想起，能快点忘记就忘记。但是对自己失望需要深刻的自我剖析检讨了。技术上提高真的不大，基本上都看不出自己做成了什么厉害的事情，决定的事情大部分没有坚持下来，空余的时间大部分花在娱乐上。</p>
<p>浮躁，一整年，都是浮躁的。买的书一本一本的增多，耐心看完的，甚至说看了一大半的都没几本。想学习的东西很多很多，但是没有一个耐心去学习的。给自己开的代码项目很多，也没见过几个写成的。做事情的思路大概是这样的：哎哟，这个东西挺好玩，去实现一个呗；恩，找点资料吧；我靠，资料不是很多嘛；晕，环境怎么这么难搭建；耐心点，慢慢来；好，环境搭建好了，可以开始了；哎，细节问题好多啊，一个人写这个真的大丈夫么；妈的，确实很难写，比想的难好多啊；不行了，弄不下去了；哎哟，弄这个意义大么；意义不是很多大吧，哎，还是弄点别的吧……</p>
<p>所以我觉得，我的2011基本上就是失败的。但是，我的字典里面没有后悔，因为后悔不能改变任何事情。而且不也不会激励自己明年一定要怎么样。因为貌似这种自我暗示已经被我免疫了。当然如果从过得怎么样的角度来看，我的2011还是相当精彩和快乐的。只不过说，这个人有点贱，快乐的事情总是记不住。</p>
<p>虽然说我现在已经不喜欢那些所谓的立志大湿，但是还是应该给自己一个2012的展望。怎么说呢？继续浮躁吧，想做的事情很多很多。</p>
<p>1.写完自己的mini kernel。</p>
<p>2.看完几本书，包括：nt 文件系统的后半部分，编译原理，算法导论。说实话，我还是感觉自己能看完其中两本就算不错了。</p>
<p>3.完善自己的BaseLib，加上自己实现各种算法。</p>
<p>4.实现一个简单的脚本语言。</p>
<p>5.最后多看两眼wrk吧。</p>
<p>看吧，我真的很浮躁很浮躁，如果明年的这个时候的总结（当然，前提是别2012-12-21就结束了），其中有三条圆满完成，我就觉得很奇迹了。</p>
<p>最后，无论怎么说，2011已经过去，过去的事情无论好坏都过去了。期待2012自己的改变吧。祝福我的家人，朋友和我自己，新年快乐，健康平安，家庭和睦温馨。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[我本来不想写kernel，直到我的膝盖中了一箭]]></title>
      <url>/2011/12/11/e68891e69cace69da5e4b88de683b3e58699kernelefbc8ce79bb4e588b0e68891e79a84e8869de79b96e4b8ade4ba86e4b880e7aead/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近中箭体很火，我也凑个热闹。话说自从delete那篇文章过后，又有一个多月没写了。其实不是不想写，是不知道些什么才好。简单的东西不想写，难的东西写不出来。</p>
<p>正像标题写的，恩，我开始写kernel玩了。其实写一个简单，功能单一的kernel并不难。麻烦的只是搭建环境等等。kernel的编写资料也很多，但是可惜的是，绝大部分都是应用在linux环境。我是那种看到linux就头晕的人。所以还是坚持用windows和vc来开发kernel。令人惊喜的是grub能够帮助我们map kernel到内存中，所以boot loader这一步可以想放下。等kernel写了个大概再来写boot loader也不迟。</p>
<p>环境和工具：<br>环境正如我上面提到了windows xp 和 vs 2008。其他工具包括winimage，virtual pc，bochsdbg（+ IDA）。当然还有grub4dos。</p>
<p>要高效的起步，先要了解mulitBoot的一些知识。还有就是写一套能够在text mode下打印信息的函数，例如printf。这样在不用调试的情况下，就能了解一些信息。说实在的bochsdbg的调试功能真心不好用，但是加上IDA可能是一个比较好的做法。具备以上条件后，就可以开始kernel之旅了。</p>
<p><a href="/uploads/2011/12/20111211174748.png"><img src="/uploads/2011/12/20111211174748.png" alt=""></a></p>
<p>可以看出内存的基本状况已经可以从boot_info中获取了。接下来要做的事情也很明了。就是需要一个物理内存管理器，实现最基本的物理内存管理器也不算难，不过那就是下篇文章的事情了。现在的kernel大小为7168字节，慢慢玩，看我能坚持多久。</p>
]]></content>
      
        <categories>
            
            <category> MiniKernel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kernel </tag>
            
            <tag> Windows </tag>
            
            <tag> grub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么必须用delete[]释放数组]]></title>
      <url>/2011/10/31/e4b8bae4bb80e4b988e5bf85e9a1bbe794a8deletee9878ae694bee695b0e7bb84/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近不知哪来的好奇心，对C++产生了一些兴趣，要知道我通常情况下都是cpp文件中写c代码，c代码中嵌汇编。不过，在做了一些大点的项目之后，确确实实发现了，这种编码方式麻烦的一面。有时候甚至自己都难得维护以前写的东西。所以选择性看了google的c++编程规范，而且对scoped_ptr和auto_ptr的区别参数兴趣。然后我得出的结论是这两种实际上是其实差不多，只不过scoped_ptr拷贝构造函数和赋值构造函数都是私有的。这样就避免粗心大意的程序员调用他。其他的区别还真没看出来。</p>
<p>OK，这些都不是记录这篇tip的重点。重点在于boost，或者说是google的scoped_ptr代码里面实现了scoped_array。而要用在数组上使用智能指针，就必须用数组的智能指针类。而auto_ptr刚好没有数组部分，所以对于数组，就不能用auto_ptr了。（为什么不用vector？这也不是重点）</p>
<p>作为一个蹩脚的C++程序员，我这时候开始犯晕了。我们知道只能指针都是帮助程序员去释放资源，让程序员把精力放到更重要的地方。那么在我看来那么所需要做的就是析构的时候 delete 或者 delete[] 就行了。要知道，delete[] 就是调用的delete，他们只是单纯的释放内存。那么数组和非数组又有什么区别？</p>
<p>光想肯定不行，写两个例子。</p>
<p>首先是new 一个char数组，分别用delete和delete[]释放。结果表明，没有任何问题，而且不会产生内存泄露。坑爹么？NO，还没完，其实咱们最怀疑的一直都是数组对象，因为他们都有构造和析构函数。而char这样的系统内建类型，想象得出不会出什么问题。new一个对象数组，分别用delete和delete[] 释放。果然问题暴露了，delete的时候出了问题。</p>
<p>知其然，不足以满足好奇心。下面才是拿手的，精彩的要放在后面嘛。</p>
<p>先看测试代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">A() &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"start 1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</div><div class="line">~A() &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"End 1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">A *a = <span class="keyword">new</span> A[<span class="number">10</span>]();</div><div class="line"></div><div class="line"><span class="keyword">delete</span>[] a;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>编译后看到代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0040103D push 0Eh</div><div class="line">0040103F call operator new[] (403ED0h)</div></pre></td></tr></table></figure><br>注意到这里传入的大小时0Eh，也就是说申请分配14个字节大小的内存。但是我们知道C++标准中空类的大小应该是1字节。那么多出的dword我们就很容易想到他的用处，应该是记录数组大小的。事实也确实如此。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mov dword ptr [eax],0Ah</div></pre></td></tr></table></figure>  
<p>这里明确交代，给分配内存的第一个dword传入10。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">00401069 push offset A::~A (4011D0h)</div><div class="line">0040106E push offset A::A (401120h)</div><div class="line">00401073 push 0Ah</div><div class="line">00401075 push 1</div><div class="line">00401077 mov ecx,dword ptr [ebp-0F8h]</div><div class="line">0040107D add ecx,4</div><div class="line">00401080 push ecx</div><div class="line">00401081 call `eh vector constructor iterator&apos; (40A010h)</div></pre></td></tr></table></figure>  
<p>这里是调用构造函数，注意是vector版本的构造函数。参数分别是数组的this指针，sizeof(A)，数组数量，构造和析构函数。这样，在这个函数内部循环10次调用构造函数，构造完毕。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">004010BD mov eax,dword ptr [ebp-14h]</div><div class="line">004010C0 mov dword ptr [ebp-0E0h],eax</div><div class="line">004010C6 mov ecx,dword ptr [ebp-0E0h]</div><div class="line">004010CC mov dword ptr [ebp-0ECh],ecx</div><div class="line">004010D2 cmp dword ptr [ebp-0ECh],0</div><div class="line">004010D9 je main+0F0h (4010F0h)</div><div class="line">004010DB push 3</div><div class="line">004010DD mov ecx,dword ptr [ebp-0ECh]</div><div class="line">004010E3 call A::`vector deleting destructor&apos; (401230h)</div></pre></td></tr></table></figure>  
<p>这里是析构部分传入数组的this指针，传入flag(3)，调用析构函数。</p>
<p>继续看call之后的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">00401253 mov eax,dword ptr [ebp+8]</div><div class="line">00401256 and eax,2</div><div class="line">00401259 je A::`vector deleting destructor&apos;+61h (401291h)</div><div class="line">0040125B push offset A::~A (4011D0h)</div><div class="line">00401260 mov eax,dword ptr [this]</div><div class="line">00401263 mov ecx,dword ptr [eax-4]</div><div class="line">00401266 push ecx</div><div class="line">00401267 push 1</div><div class="line">00401269 mov edx,dword ptr [this]</div><div class="line">0040126C push edx</div><div class="line">0040126D call `eh vector destructor iterator&apos; (40A920h)</div><div class="line">00401272 mov eax,dword ptr [ebp+8]</div></pre></td></tr></table></figure><br>如果flag中位1是set，那么调用eh_vector_destructor_iterator调用每个析构函数。参数分别是this，sizeof(A)，数组个数（这里很明显是从eax-4中拿出来的）以及析构函数地址。</p>
<p>OK，明白了delete[]的做法，我们看看delete为什么失败。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">004010BD mov eax,dword ptr [ebp-14h]</div><div class="line">004010C0 mov dword ptr [ebp-0E0h],eax</div><div class="line">004010C6 mov ecx,dword ptr [ebp-0E0h]</div><div class="line">004010CC mov dword ptr [ebp-0ECh],ecx</div><div class="line">004010D2 cmp dword ptr [ebp-0ECh],0</div><div class="line">004010D9 je main+0F0h (4010F0h)</div><div class="line">004010DB push 1</div><div class="line">004010DD mov ecx,dword ptr [ebp-0ECh]</div><div class="line">004010E3 call A::`scalar deleting destructor&apos; (4012D0h)</div></pre></td></tr></table></figure><br>这里调用的析构函数都不一样是一个scalar版本的函数。</p>
<p>继续看这个函数的关键部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">004012F3 mov ecx,dword ptr [this]</div><div class="line">004012F6 call A::~A (4011D0h)</div><div class="line">004012FB mov eax,dword ptr [ebp+8]</div><div class="line">004012FE and eax,1</div><div class="line">00401301 je A::`scalar deleting destructor&apos;+3Fh (40130Fh)</div><div class="line">00401303 mov eax,dword ptr [this]</div><div class="line">00401306 push eax</div><div class="line">00401307 call operator delete (40A890h)</div></pre></td></tr></table></figure><br>这里很清楚的看到，只进行一次析构，然后就释放内存。所以我们看到的现象是只调用一次析构函数。那么为什么会崩溃呢？因为delete错了地址。看上面的对比的值，eax-4才是new返回的地址，所以delete的不应该是eax，而是eax-4。</p>
<p>真相大白？NO，还有一个问题，delete[] 和delete 内建类型真的成功了么？<br>看看我贴出的代码吧，这里不解释了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">;delete[] version</div><div class="line">0040101E push 0Ah</div><div class="line">00401020 call operator new[] (4014C0h)</div><div class="line">00401025 add esp,4</div><div class="line">00401028 mov dword ptr [ebp-0E0h],eax</div><div class="line">0040102E mov eax,dword ptr [ebp-0E0h]</div><div class="line">00401034 mov dword ptr [a],eax</div><div class="line">00401037 mov eax,dword ptr [a]</div><div class="line">0040103A mov dword ptr [ebp-0D4h],eax</div><div class="line">00401040 mov ecx,dword ptr [ebp-0D4h]</div><div class="line">00401046 push ecx</div><div class="line">00401047 call operator delete[] (401600h) `</div><div class="line"></div><div class="line">;delete version</div><div class="line">0040101E push 0Ah</div><div class="line">00401020 call operator new[] (4014C0h)</div><div class="line">00401025 add esp,4</div><div class="line">00401028 mov dword ptr [ebp-0E0h],eax</div><div class="line">0040102E mov eax,dword ptr [ebp-0E0h]</div><div class="line">00401034 mov dword ptr [a],eax</div><div class="line">00401037 mov eax,dword ptr [a]</div><div class="line">0040103A mov dword ptr [ebp-0D4h],eax</div><div class="line">00401040 mov ecx,dword ptr [ebp-0D4h]</div><div class="line">00401046 push ecx</div><div class="line">00401047 call operator delete (401600h)</div></pre></td></tr></table></figure>
<p>就像我刚刚所说的delete[]会调用delete。所以不会出任何问题。</p>
<p>如果汇编看的头疼的话，这里我写了两个函数的逆向代码（说了精彩的应该放在后面的）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">void A::'scalar deleting destructor'(unsigned int flags)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">this</span>-&gt;~A();</div><div class="line">	<span class="keyword">if</span> (flags &amp; <span class="number">1</span>) &#123;</div><div class="line">	A::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void A::'vector deleting destructor'(unsigned int flags)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (flags &amp; <span class="number">2</span>) &#123;</div><div class="line">		count = *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)<span class="keyword">this</span> - <span class="number">4</span>);</div><div class="line">		'eh vector destructor iterator'(this, sizeof(A), count, A::~A);</div><div class="line">		<span class="keyword">if</span> (flags&amp;<span class="number">1</span>) &#123;</div><div class="line">			A::operator delete((void *)((int)this - 4));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">this</span>-&gt;~A();</div><div class="line">		<span class="keyword">if</span> (flags &amp; <span class="number">1</span>) &#123;</div><div class="line">			A::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>分析到这，终于明白。数组一定要用delete[]释放才安全。所以千万不要用auto_ptr作为数组的智能指针，不然会死的很惨。这里还要提一点，auto_ptr也不要用到容器里面去了，也是不允许的。非要这么做就用shared_ptr吧， C++0x已经在stl中加入的这部分。从vs2008 sp1开始支持。低版本的vs的话就去boost里面找吧。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Volume snapshot]]></title>
      <url>/2011/10/30/volume-snapshot/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>上个月说了，准备放一份基于卷磁盘快照代码。拖到现在也没有更新了，就把它放出来，留着也没啥用。本来就是为了做一个演示demo，没考虑效率和稳定性，只是提供一种思路，其实思路也很简单，有人已经把他完善的很好了。感觉博客更新确实慢，但是也没什么想写的，其实也写不出来什么。悲剧啊！</p>
<p>和我其他代码一样，这么代码同样没有注释。需要的讲究读读吧。那啥，最近昨天把google的代码规范看了看，确实有很多值得学习的地方。不过呢，有些地方可能个性使然，不太认同。不过风格的问题，其实也没什么。</p>
<p>最近还写了hive文件读解析的代码，还没完善，然后又转去看系统缓存那部分的东西了。有时间完善完善。还要完善了是自己写的一个ini文件解析的类。哎，都是一些自己造轮子的活。不过还挺有意思。</p>
<p>下载：<a href="/uploads/2011/10/SectorMon.zip">SectorMon</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
        <tags>
            
            <tag> snapshot </tag>
            
            <tag> Volume </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NTSTATUS Lookup]]></title>
      <url>/2011/09/17/ntstatus-lookup/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>磁盘快照写好了后，闲着无聊写了个nslookup，用来看驱动返回值解释的。写这个程序还先写了个nsstatus.h的解析工具。生成了一个超大的switch case。没啥技术含量。至于那个磁盘快照的代码，过段时间如果合适也可以共享出来。</p>
<p><a href="/uploads/2011/09/ntstatus.jpg"><img src="/uploads/2011/09/ntstatus.jpg" alt=""></a></p>
<p>1.0.0.2 更新：</p>
<p>1.增加程序初始化时，直接读取剪切板中的数据功能。<br>2.增加对输入的判断，支持“0x”前缀。</p>
<p>下载：<a href="/uploads/2011/09/nslookup1002.zip">nslookup</a></p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NTSTATUS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一份简陋的NTFS Parse代码]]></title>
      <url>/2011/08/28/e4b880e4bbbde7ae80e9998be79a84ntfs-parsee4bba3e7a081/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>研究了近两周的NTFS文件格式，初步了解了一些NTFS基本属性的解析方法。<br>为了自己研究方便，写了点简单的解析代码。发出来以方便需要的人。<br>话说这份代码的解析类只是属于demo阶段，而且没有注释。不过代码写的还算清晰。  </p>
<p>参考资料方面，我是转了一份NTFS 3G的文档，这份文档把NTFS的基本特点写的比较清晰了。值得一看</p>
<p><a href="http://0cch.net/ntfsdoc/" target="_blank" rel="external">http://0cch.net/ntfsdoc/</a></p>
<p>代码：<a href="/uploads/2011/08/NtfsParse.zip">NtfsParse</a></p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kernel </tag>
            
            <tag> NTFS </tag>
            
            <tag> System </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ReactOS-Freeldr磁盘及文件管理2]]></title>
      <url>/2011/06/10/reactos-freeldre7a381e79b98e58f8ae69687e4bbb6e7aea1e790862/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>ArcOpen的大体流程我们看过了。大致分为这几步</p>
<ol>
<li>函数会尝试找到文件所在分区的设备句柄，如果还没有对应的句柄。那么使用DEVICE.FuncTable中的Open函数打开设备，并为这个设备分配句柄。</li>
</ol>
<ol>
<li>打开设备后条用XxxMount识别分区格式，识别成功返回另外的FuncTable，存储到设备的FileData.FileFuncTable域。</li>
</ol>
<ol>
<li>为文件分配一个句柄，在对应的FileData.DeviceId为上面创建设备句柄，FileData.FuncTable为设备的FileData.FileFuncTable。</li>
</ol>
<ol>
<li>最后调用文件的FileData.FuncTable.Open函数打开文件。</li>
</ol>
<p><strong>挂载分区时做了什么</strong></p>
<p>之前我们忽略了XxxMount函数。现在来读读比较简单的FatMount (freeldr\freeldr\fs\fat.c)。</p>
<ol>
<li><p><em>const</em> DEVVTBL<strong>*</strong> FatMount<strong>(</strong>ULONG DeviceId<strong>)</strong></p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p><strong>.**</strong>.<strong><strong>.</strong></strong>.<strong><strong>.</strong></strong>.<strong><strong>.</strong></strong>.**</p>
</li>
<li><p>// 生成一个FAT_VOLUME_INFO结构</p>
</li>
<li><p>Volume <strong>=</strong> MmHeapAlloc<strong>(</strong><em>sizeof</em><strong>(</strong>FAT_VOLUME_INFO<strong>)**</strong>)<strong>**;</strong></p>
</li>
<li><p><em>if</em> <strong>(**</strong>!<strong>Volume</strong>)**</p>
</li>
<li><p><em>return</em> <em>NULL</em><strong>;</strong></p>
</li>
<li><p><em>RtlZeroMemory</em><strong>(</strong>Volume, <em>sizeof</em><strong>(</strong>FAT_VOLUME_INFO<strong>)**</strong>)<strong>**;</strong></p>
</li>
<li><p>// 读第一个扇区</p>
</li>
<li><p>Position<strong>.</strong>HighPart <strong>=</strong> 0<strong>;</strong></p>
</li>
<li><p>Position<strong>.</strong>LowPart <strong>=</strong> 0<strong>;</strong></p>
</li>
<li><p>ret <strong>=</strong> ArcSeek<strong>(</strong>DeviceId, <strong>&amp;</strong>Position, SeekAbsolute<strong>)**</strong>;**</p>
</li>
<li><p><em>if</em> <strong>(</strong>ret <strong>!**</strong>=<strong> ESUCCESS</strong>)**</p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>MmHeapFree<strong>(</strong>Volume<strong>)**</strong>;**</p>
</li>
<li><p><em>return</em> <em>NULL</em><strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
<li><p>ret <strong>=</strong> ArcRead<strong>(</strong>DeviceId, Buffer, <em>sizeof</em><strong>(</strong>Buffer<strong>)</strong>, <strong>&amp;</strong>Count<strong>)**</strong>;**</p>
</li>
<li><p><em>if</em> <strong>(</strong>ret <strong>!**</strong>=<strong> ESUCCESS </strong>|<strong>**|</strong> Count <strong>!**</strong>=<strong> <em>sizeof</em></strong>(<strong>Buffer</strong>)<strong>**)</strong></p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>MmHeapFree<strong>(</strong>Volume<strong>)**</strong>;**</p>
</li>
<li><p><em>return</em> <em>NULL</em><strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
<li><p>// 判断是否有fat分区标志</p>
</li>
<li><p><em>if</em> <strong>(**</strong>!<strong>RtlEqualMemory</strong>(<strong>BootSector</strong>-<strong>**&gt;</strong>FileSystemType, “FAT12 “, 8<strong>)</strong> <strong>&amp;**</strong>&amp;**</p>
</li>
<li><p><strong>!</strong>RtlEqualMemory<strong>(</strong>BootSector<strong>-**</strong>&gt;<strong>FileSystemType, “FAT16 “, 8</strong>)<strong> </strong>&amp;<strong>**&amp;</strong></p>
</li>
<li><p><strong>!</strong>RtlEqualMemory<strong>(</strong>BootSector32<strong>-**</strong>&gt;<strong>FileSystemType, “FAT32 “, 8</strong>)<strong> </strong>&amp;<strong>**&amp;</strong></p>
</li>
<li><p><strong>!</strong>RtlEqualMemory<strong>(</strong>BootSectorX<strong>-**</strong>&gt;<strong>FileSystemType, “FATX”, 4</strong>)<strong>**)</strong></p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>MmHeapFree<strong>(</strong>Volume<strong>)**</strong>;**</p>
</li>
<li><p><em>return</em> <em>NULL</em><strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
<li><p>// 获得分区大小等信息</p>
</li>
<li><p>ret <strong>=</strong> ArcGetFileInformation<strong>(</strong>DeviceId, <strong>&amp;</strong>FileInformation<strong>)**</strong>;**</p>
</li>
<li><p><em>if</em> <strong>(</strong>ret <strong>!**</strong>=<strong> ESUCCESS</strong>)**</p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>MmHeapFree<strong>(</strong>Volume<strong>)**</strong>;**</p>
</li>
<li><p><em>return</em> <em>NULL</em><strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
<li><p>SectorCount<strong>.</strong>HighPart <strong>=</strong> FileInformation<strong>.</strong>EndingAddress<strong>.</strong>HighPart<strong>;</strong></p>
</li>
<li><p>SectorCount<strong>.</strong>LowPart <strong>=</strong> FileInformation<strong>.</strong>EndingAddress<strong>.</strong>LowPart<strong>;</strong></p>
</li>
<li><p>SectorCount<strong>.</strong>QuadPart <strong>/**</strong>=<strong> SECTOR_SIZE</strong>;**</p>
</li>
<li><p>Volume<strong>-**</strong>&gt;<strong>DeviceId </strong>=<strong> DeviceId</strong>;**</p>
</li>
<li><p>// 打开分区</p>
</li>
<li><p><em>if</em> <strong>(**</strong>!<strong>FatOpenVolume</strong>(<strong>Volume, BootSector, SectorCount</strong>.<strong>QuadPart</strong>)<strong>**)</strong></p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>MmHeapFree<strong>(</strong>Volume<strong>)**</strong>;**</p>
</li>
<li><p><em>return</em> <em>NULL</em><strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
<li><p>// 存储FAT_VOLUME_INFO结构</p>
</li>
<li><p>FatVolumes<strong>[</strong>DeviceId<strong>]</strong> <strong>=</strong> Volume<strong>;</strong></p>
</li>
<li><p>// 返回fat文件读写的FuncTable</p>
</li>
<li><p><em>return</em> <strong>&amp;</strong>FatFuncTable<strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
<li><p><strong>           
</strong></p>
</li>
</ol>
<p>函数中的DeviceId是设备的句柄。</p>
<p>生成FAT_VOLUME_INFO结构。这个结构里面存储了FAT分区的基本信息。包括扇区大小，每个簇的扇区数等等。</p>
<ol>
<li><p><em>typedef</em> <em>struct</em> _FAT_VOLUME_INFO </p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>ULONG BytesPerSector<strong>;</strong> /<em> Number of bytes per sector </em>/</p>
</li>
<li><p>ULONG SectorsPerCluster<strong>;</strong> /<em> Number of sectors per cluster </em>/</p>
</li>
<li><p>ULONG FatSectorStart<strong>;</strong> /<em> Starting sector of 1st FAT table </em>/</p>
</li>
<li><p>ULONG ActiveFatSectorStart<strong>;</strong> /<em> Starting sector of active FAT table </em>/</p>
</li>
<li><p>ULONG NumberOfFats<strong>;</strong> /<em> Number of FAT tables </em>/</p>
</li>
<li><p>ULONG SectorsPerFat<strong>;</strong> /<em> Sectors per FAT table </em>/</p>
</li>
<li><p>ULONG RootDirSectorStart<strong>;</strong> /<em> Starting sector of the root directory (non-fat32) </em>/</p>
</li>
<li><p>ULONG RootDirSectors<strong>;</strong> /<em> Number of sectors of the root directory (non-fat32) </em>/</p>
</li>
<li><p>ULONG RootDirStartCluster<strong>;</strong> /<em> Starting cluster number of the root directory (fat32 only) </em>/</p>
</li>
<li><p>ULONG DataSectorStart<strong>;</strong> /<em> Starting sector of the data area </em>/</p>
</li>
<li><p>ULONG FatType<strong>;</strong> /<em> FAT12, FAT16, FAT32, FATX16 or FATX32 </em>/</p>
</li>
<li><p>ULONG DeviceId<strong>;</strong></p>
</li>
<li><p><strong>}</strong> FAT_VOLUME_INFO<strong>;</strong></p>
</li>
<li><p><strong>             
</strong></p>
</li>
</ol>
<p>  读取第一个山区，判断是否有fat标志。如果没有直接返回，挂载失败。之后使用ArcGetFileInformation获得分区大小。ArcGetFileInformation里面调用了FileData.FuncTable.GetFileInformation。因为当前DeviceId是设备句柄，所以他实际调用的是DiskGetFileInformation(freeldr\freeldr\arch\i386\hardware.c)。这个函数很简单，通过FileInformation返回分区开始和结束的地址，这里就不列出了。     </p>
<p>这里的代码用FileInformation<strong>.</strong>EndingAddress / SECTOR_SIZE计算出了该分区的扇区数SectorCount。这里应该BUG。因为EndingAddress是分区结束地址，真的扇区数应该是 (分区开始地址 - EndingAddress ) / SECTOR_SIZE。好在SectorCount只是判断fat分区的一个依据，而且一般C盘计算出的SectorCount误差不会很大，影响不大。</p>
<p>最后执行FatOpenVolume真正执行分区的挂载、初始化。初始化结束后将生成的Volume放到fat.c维护的全局数组FatVolumes里，之后对fat分区进行操作（读写）时，通过设备的DeviceId就可以找到对应的FAT_VOLUME_INFO结构。</p>
<p>最后函数返回FatFuncTable函数数组</p>
<ol>
<li><p><em>const</em> DEVVTBL FatFuncTable <strong>=</strong></p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p>FatClose, </p>
</li>
<li><p>FatGetFileInformation, </p>
</li>
<li><p>FatOpen, </p>
</li>
<li><p>FatRead, </p>
</li>
<li><p>FatSeek, </p>
</li>
<li><p>L”fastfat”, </p>
</li>
<li><p><strong>}**</strong>;**</p>
</li>
<li></li>
</ol>
<p>用户可以通过这些函数就读写改fat分区啦。</p>
<p>那么FatOpenVolume都干了什么呢。</p>
<p>这个函数简单来说就是根据分区内容填写了Volume结构，已经算是一个分区的具体实现细节了，和整体架构无关，不多说了。这个函数在freeldr\freeldr\fs\fat.c中。</p>
<p><strong><strong>打开文件时做了什么</strong></strong></p>
<p>上一篇文章中还有一个地方没说，就是打开设备并创建完文件的句柄后，ArcOpen调用了文件对应的FileData.FuncTable.Open。对于fat分区而言这个函数是FatOpen(freeldr\freeldr\fs\fat.c). 这个函数也是和分区结构有关的了，有一点比较重要就是函数最后调用了FsSetDeviceSpecific把一个和文件相关的内部结构与文件句柄相关联。以后使用FatRead对文件句柄进行读操作时直接就可以获得这个结构啦。</p>
<ol>
<li><p>LONG FatOpen<strong>(</strong>CHAR<strong>*</strong> Path, OPENMODE OpenMode, ULONG<strong>*</strong> FileId<strong>)</strong></p>
</li>
<li><p><strong>{</strong></p>
</li>
<li><p><strong>.**</strong>.<strong><strong>.</strong></strong>.<strong><strong>.</strong></strong>.**</p>
</li>
<li></li>
<li><p>// 根据文件的FileId获得文件所在的设备句柄FileData.DeviceId, 从而获得FatMount时生成的Volume结构。</p>
</li>
<li><p>DeviceId <strong>=</strong> FsGetDeviceId<strong>(<strong>*</strong></strong>FileId<strong>)**</strong>;**</p>
</li>
<li><p>FatVolume <strong>=</strong> FatVolumes<strong>[</strong>DeviceId<strong>]**</strong>;**</p>
</li>
<li><p>// 从DeviceId设备中读取并查询fat表，判断path表示的文件是否存在</p>
</li>
<li><p><em>RtlZeroMemory</em><strong>(**</strong>&amp;<strong>TempFileInfo, <em>sizeof</em></strong>(<strong>TempFileInfo</strong>)<strong><strong>)</strong></strong>;**</p>
</li>
<li><p>ret <strong>=</strong> FatLookupFile<strong>(</strong>FatVolume, Path, DeviceId, <strong>&amp;</strong>TempFileInfo<strong>)**</strong>;**</p>
</li>
<li><p><em>if</em> <strong>(</strong>ret <strong>!**</strong>=<strong> ESUCCESS</strong>)**</p>
</li>
<li><p><em>return</em> ENOENT<strong>;</strong></p>
</li>
<li><p>// 判断是否是目录</p>
</li>
<li><p>IsDirectory <strong>=</strong> <strong>(</strong>TempFileInfo<strong>.</strong>Attributes <strong>&amp;</strong> ATTR_DIRECTORY<strong>)</strong> <strong>!**</strong>=<strong> 0</strong>;**</p>
</li>
<li><p><em>if</em> <strong>(</strong>IsDirectory <strong>&amp;**</strong>&amp;<strong> OpenMode </strong>!<strong>**=</strong> OpenDirectory<strong>)</strong></p>
</li>
<li><p><em>return</em> EISDIR<strong>;</strong></p>
</li>
<li><p><em>else</em> <em>if</em> <strong>(**</strong>!<strong>IsDirectory </strong>&amp;<strong>**&amp;</strong> OpenMode <strong>!**</strong>=<strong> OpenReadOnly</strong>)**</p>
</li>
<li><p><em>return</em> ENOTDIR<strong>;</strong></p>
</li>
<li><p>// 生成FAT_FILE_INFO结构，里面存放了文件的信息(开始的扇区等)</p>
</li>
<li><p>FileHandle <strong>=</strong> MmHeapAlloc<strong>(</strong><em>sizeof</em><strong>(</strong>FAT_FILE_INFO<strong>)**</strong>)<strong>**;</strong></p>
</li>
<li><p><em>if</em> <strong>(**</strong>!<strong>FileHandle</strong>)**</p>
</li>
<li><p><em>return</em> ENOMEM<strong>;</strong></p>
</li>
<li><p>RtlCopyMemory<strong>(</strong>FileHandle, <strong>&amp;</strong>TempFileInfo, <em>sizeof</em><strong>(</strong>FAT_FILE_INFO<strong>)**</strong>)<strong>**;</strong></p>
</li>
<li><p>FileHandle<strong>-**</strong>&gt;<strong>Volume </strong>=<strong> FatVolume</strong>;**</p>
</li>
<li><p>// 把这个结构和文件对应的FileData.Specific关联。之后进行FatRead等操作时可以直接获得这个结构了</p>
</li>
<li><p>FsSetDeviceSpecific<strong>(<strong>*</strong></strong>FileId, FileHandle<strong>)**</strong>;**</p>
</li>
<li><p><em>return</em> ESUCCESS<strong>;</strong></p>
</li>
<li><p><strong>}</strong></p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ReactOS-Freeldr磁盘及文件管理]]></title>
      <url>/2011/06/02/reactos-freeldre7a381e79b98e58f8ae69687e4bbb6e7aea1e79086/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Freeldr提供了对fat12、fat32、fatx、ntfs等文件系统的只读功能。这部分代码主要集中在boot\freeldr\freeldr\fs\fs.c文件中。<br>首先计算机加电后会把mbr读取到物理内存的0x7c00位置，mbr搜索活动分区并加载活动分区根目录下的Freeldr.sys文件。加载后跳入Freeldr入口start。Freeldr进行32为初始化后跳入主初始化函数BootMain(boot\freeldr\freeldr\Freeldr.c)中。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">VOID <span class="title">BootMain</span><span class="params">(LPSTR CmdLine)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">......</div><div class="line">MachInit(CmdLine);</div><div class="line">FsInit();</div><div class="line">......</div><div class="line">RunLoader();</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>BootMain会对硬件(MachInit)和文件系统(FsInit)进行检测和初始化。所有准备工作进行完毕后就会调用RunLoader进行系统的加载工作。<br>Fs初始化和DEVICE、FILEDATA结构<br>下面看一下文件系统的初始化 FsInit(boot\freeldr\freeldr\fs\fs.c)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">VOID <span class="title">FsInit</span><span class="params">(VOID)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">ULONG i;</div><div class="line">RtlZeroMemory(FileData, <span class="keyword">sizeof</span>(FileData));</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_FDS; i++)</div><div class="line">FileData[i].DeviceId = (ULONG)<span class="number">-1</span>;</div><div class="line">InitializeListHead(&amp;DeviceListHead);</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>FsInit初始化FileData数组。和一个和磁盘分区相关的链表DeviceListHead。<br>首先fs.c维护了一个MAX_FDS(60)大小的数组 static FILEDATA FileData[MAX_FDS];  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagDEVVTBL</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">ARC_CLOSE Close;</div><div class="line">ARC_GET_FILE_INFORMATION GetFileInformation;</div><div class="line">ARC_OPEN Open;</div><div class="line">ARC_READ Read;</div><div class="line">ARC_SEEK Seek;</div><div class="line">LPCWSTR ServiceName;</div><div class="line">&#125; DEVVTBL;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagFILEDATA</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">ULONG DeviceId;            <span class="comment">// 文件所在磁盘的磁盘文件句柄, 同样也是FileData的索引</span></div><div class="line">ULONG ReferenceCount;       <span class="comment">// 引用计数</span></div><div class="line"><span class="keyword">const</span> DEVVTBL* FuncTable;    <span class="comment">// 对文件进行读写的指针</span></div><div class="line"><span class="keyword">const</span> DEVVTBL* FileFuncTable; <span class="comment">// 对文件进行读写的函数数组</span></div><div class="line">VOID* Specific;             <span class="comment">// 文件系统自定义指针</span></div><div class="line">&#125; FILEDATA;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>每一个成功打开的文件会返回一个文件句柄，这个句柄实际上就是FileData数组的索引。所以每个打开的文件都有一个对应的FileData。这个结构就类似windows中的FILE_OBJECT<br>FileData中DeviceId是文件所在磁盘的句柄。这个句柄同样也是FileData数组的索引，通过这个句柄可以找到”磁盘文件”，对”磁盘文件”的读写就是直接对相应的磁盘或磁盘分区的读写。类似Windows中直接对磁盘分区进行CreateFile返回的句柄。”磁盘文件”的DeviceId没有意义。<br>ReferenceCount是该文件的引用计数。<br>FuncTable这是一个函数数组指针，里面存放了对文件进行读写、SEEK等操作的函数指针。<br>FileFuncTable只对”磁盘文件”有意义。当Freeldr确定了磁盘文件对应的分区的分区格式后，会把与分区格式相关的函数指针数组放到这个字段里面。如Fat12分区”磁盘文件”的FileFuncTable字段存放的就是FatFuncTable指针。<br>Specific存放于文件有关的结构。磁盘文件就是DISKCONTEXT指针，fat12下的文件就是FAT_FILE_INFO指针 等等。<br>之后是DeviceListHead，这是DEVICE结构的链表头  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagDEVICE</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">LIST_ENTRY ListEntry;        <span class="comment">// 链表节点</span></div><div class="line"><span class="keyword">const</span> DEVVTBL* FuncTable;    <span class="comment">// 操作该分区的函数表</span></div><div class="line">CHAR* Prefix;              <span class="comment">// 分区对应的ArcName</span></div><div class="line">ULONG DeviceId;            <span class="comment">// FILEDATA中该分区对应的句柄</span></div><div class="line">ULONG ReferenceCount;      <span class="comment">// 引用计数</span></div><div class="line">&#125; DEVICE;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>用户电脑中的每一个硬盘和硬盘中的每一分区都对应了一个DEVICE结构。<br>FuncTable里面存放了对该分区进行读写等操作的指针，对于硬盘而言这个数组就是DiskVtbl。<br>Prefix是该分区或硬盘的ArcName。(如multi(0)disk(0)rdisk(0)partition(0))。Freeldr中的文件路径都是Arc形式的路径。而且0号分区代表整个硬盘，真正的分区从1号开始。如multi(0)disk(0)rdisk(0)partition(0)便代表第0块硬盘本身。multi(0)disk(0)rdisk(0)partition(1)代表第0块硬盘的第0个分区。<br>通过DeviceId字段可以找到该DEVICE的文件句柄。这个字段和FILEDATA相互配合，使系统可以遍历DEVICE结构快速找到某个分区的文件句柄。<br>DEVICE(磁盘及分区)的检测<br>上面说到Freeldr操作的路径都是存储在DEVICE结构中的ArcPath。那么这些DEVICE是怎么来的呢？<br>首先我们看一下DEVICE的注册函数，FsRegisterDevice(boot\freeldr\freeldr\fs\fs.c)  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">VOID <span class="title">FsRegisterDevice</span><span class="params">(CHAR* Prefix, <span class="keyword">const</span> DEVVTBL* FuncTable)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DEVICE* pNewEntry;</div><div class="line">ULONG dwLength;</div><div class="line">dwLength = <span class="built_in">strlen</span>(Prefix) + <span class="number">1</span>;</div><div class="line">pNewEntry = MmHeapAlloc(<span class="keyword">sizeof</span>(DEVICE) + dwLength);</div><div class="line"><span class="keyword">if</span> (!pNewEntry)</div><div class="line"><span class="keyword">return</span>;</div><div class="line">pNewEntry-&gt;FuncTable = FuncTable;</div><div class="line">pNewEntry-&gt;ReferenceCount = <span class="number">0</span>;</div><div class="line">pNewEntry-&gt;Prefix = (CHAR*)(pNewEntry + <span class="number">1</span>);</div><div class="line"><span class="built_in">memcpy</span>(pNewEntry-&gt;Prefix, Prefix, dwLength);</div><div class="line">InsertHeadList(&amp;DeviceListHead, &amp;pNewEntry-&gt;ListEntry);</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这么函数非常简单。Prefix就是Arc路径，FuncTable是操作这个分区（磁盘）对应的函数数组。FsRegisterDevice生成了一个DEVICE结构，把ArcName和FuncTable复制进去。之后连入了DeviceListHead链表。<br>那么又是谁调用的FsRegisterDevice呢？是DetectBiosDisks(boot\freeldr\freeldr\arch\i386\hardware.c)函数。虽然这一部分已经不属于FS的范畴，还是在这里简单讲一下便于理解。这里我略去了不必要的代码。<br>DetectBiosDisks的调用顺序是 RunLoader -&gt; MachHwDetect (PcHwDetect)-&gt; DetectISABios -&gt; DetectBiosDisks</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> VOID</div><div class="line">DetectBiosDisks(PCONFIGURATION_COMPONENT_DATA BusKey)</div><div class="line">&#123;</div><div class="line">BOOLEAN BootDriveReported = FALSE;</div><div class="line">ULONG i;</div><div class="line">ULONG DiskCount = GetDiskCount(BusKey);</div><div class="line">CHAR BootPath[<span class="number">512</span>];</div><div class="line">......</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; DiskCount; i++)</div><div class="line">&#123;</div><div class="line">ULONG Size;</div><div class="line">CHAR Identifier[<span class="number">20</span>];</div><div class="line">......</div><div class="line"><span class="keyword">if</span> (BootDrive == <span class="number">0x80</span> + i)</div><div class="line">BootDriveReported = TRUE;</div><div class="line"><span class="comment">/* Get disk values */</span></div><div class="line">GetHarddiskIdentifier(Identifier, <span class="number">0x80</span> + i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>首先使用GetDiskCount从Freeldr注册表的System键中读取硬盘总数。System键的初始化在DetectSystem(freeldr\freeldr\arch\i386\hardware.c)中，一会儿再看。<br>于是进入一个for循环，为每个硬盘调用GetHarddiskIdentifier函数。在BIOS中硬盘号是从0x80开始的，所以GetHarddiskIdentifier的硬盘号加了0x80。<br>GetHarddiskIdentifier的作用是为制定硬盘生成一个唯一的ID，并通过Identifier参数返回。但这个函数名起得并不好，因为生成ID其实只是这个函数的功能之一。另外的一大功能是检测硬盘，并且为硬盘本身和硬盘分区调用FsRegisterDevice函数进行注册。通过这个注册后硬盘才能真正被文件系统识别。<br>freeldr\freeldr\arch\i386\hardware.c中</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> VOID</div><div class="line">GetHarddiskIdentifier(PCHAR Identifier,</div><div class="line">ULONG DriveNumber)</div><div class="line">&#123;</div><div class="line">PMASTER_BOOT_RECORD Mbr;</div><div class="line">ULONG *Buffer;</div><div class="line">ULONG i;</div><div class="line">ULONG Checksum;</div><div class="line">ULONG Signature;</div><div class="line">CHAR ArcName[<span class="number">256</span>];</div><div class="line">PARTITION_TABLE_ENTRY PartitionTableEntry;</div><div class="line"><span class="comment">/* Read the MBR */</span></div><div class="line"><span class="keyword">if</span> (!MachDiskReadLogicalSectors(DriveNumber, <span class="number">0U</span>LL, <span class="number">1</span>, (PVOID)DISKREADBUFFER))</div><div class="line">&#123;</div><div class="line">DPRINTM(DPRINT_HWDETECT, <span class="string">"Reading MBR failed\n"</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">Buffer = (ULONG*)DISKREADBUFFER;</div><div class="line">Mbr = (PMASTER_BOOT_RECORD)DISKREADBUFFER;</div><div class="line">Signature = Mbr-&gt;Signature;</div><div class="line">DPRINTM(DPRINT_HWDETECT, <span class="string">"Signature: %x\n"</span>, Signature);</div><div class="line"><span class="comment">/* Calculate the MBR checksum */</span></div><div class="line">Checksum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)</div><div class="line">&#123;</div><div class="line">Checksum += Buffer[i];</div><div class="line">&#125;</div><div class="line">Checksum = ~Checksum + <span class="number">1</span>;</div><div class="line">DPRINTM(DPRINT_HWDETECT, <span class="string">"Checksum: %x\n"</span>, Checksum);</div><div class="line"><span class="comment">/* Fill out the ARC disk block */</span></div><div class="line">reactos_arc_disk_info[reactos_disk_count].Signature = Signature;</div><div class="line">reactos_arc_disk_info[reactos_disk_count].CheckSum = Checksum;</div><div class="line"><span class="built_in">sprintf</span>(ArcName, <span class="string">"multi(0)disk(0)rdisk(%lu)"</span>, reactos_disk_count);</div><div class="line"><span class="built_in">strcpy</span>(reactos_arc_strings[reactos_disk_count], ArcName);</div><div class="line">reactos_arc_disk_info[reactos_disk_count].ArcName =</div><div class="line">reactos_arc_strings[reactos_disk_count];</div><div class="line">reactos_disk_count++;</div><div class="line"><span class="built_in">sprintf</span>(ArcName, <span class="string">"multi(0)disk(0)rdisk(%lu)partition(0)"</span>, DriveNumber - <span class="number">0x80</span>);</div><div class="line">FsRegisterDevice(ArcName, &amp;DiskVtbl);</div><div class="line"><span class="comment">/* Add partitions */</span></div><div class="line">i = <span class="number">1</span>;</div><div class="line">DiskReportError(FALSE);</div><div class="line"><span class="keyword">while</span> (DiskGetPartitionEntry(DriveNumber, i, &amp;PartitionTableEntry))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (PartitionTableEntry.SystemIndicator != PARTITION_ENTRY_UNUSED)</div><div class="line">&#123;</div><div class="line"><span class="built_in">sprintf</span>(ArcName, <span class="string">"multi(0)disk(0)rdisk(%lu)partition(%lu)"</span>, DriveNumber - <span class="number">0x80</span>, i);</div><div class="line">FsRegisterDevice(ArcName, &amp;DiskVtbl);</div><div class="line">&#125;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line">DiskReportError(TRUE);</div><div class="line"><span class="comment">/* Convert checksum and signature to identifier string */</span></div><div class="line">Identifier[<span class="number">0</span>] = Hex[(Checksum &gt;&gt; <span class="number">28</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">1</span>] = Hex[(Checksum &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">2</span>] = Hex[(Checksum &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">3</span>] = Hex[(Checksum &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">4</span>] = Hex[(Checksum &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">5</span>] = Hex[(Checksum &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">6</span>] = Hex[(Checksum &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">7</span>] = Hex[Checksum &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">8</span>] = <span class="string">'-'</span>;</div><div class="line">Identifier[<span class="number">9</span>] = Hex[(Signature &gt;&gt; <span class="number">28</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">10</span>] = Hex[(Signature &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">11</span>] = Hex[(Signature &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">12</span>] = Hex[(Signature &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">13</span>] = Hex[(Signature &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">14</span>] = Hex[(Signature &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">15</span>] = Hex[(Signature &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">16</span>] = Hex[Signature &amp; <span class="number">0x0F</span>];</div><div class="line">Identifier[<span class="number">17</span>] = <span class="string">'-'</span>;</div><div class="line">Identifier[<span class="number">18</span>] = <span class="string">'A'</span>;</div><div class="line">Identifier[<span class="number">19</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>函数首先使用MachDiskReadLogicalSectors读取指定硬盘的MBR。对于PC机而言MachDiskReadLogicalSectors使用int 13h中断实现对硬盘的读操作。里面包括了16、32位代码的互转，和本节内容无关，以后再做说明。<br>MBR结构为。详细信息可以参考(<a href="http://en.wikipedia.org/wiki/Master_boot_record" target="_blank" rel="external">http://en.wikipedia.org/wiki/Master_boot_record</a>)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MASTER_BOOT_RECORD</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">UCHAR        MasterBootRecordCodeAndData[<span class="number">0x1b8</span>];   <span class="comment">/* 0x000 */</span></div><div class="line">ULONG        Signature;          <span class="comment">/* 0x1B8 */</span></div><div class="line">USHORT        Reserved;          <span class="comment">/* 0x1BC */</span></div><div class="line">PARTITION_TABLE_ENTRY   PartitionTable[<span class="number">4</span>];        <span class="comment">/* 0x1BE */</span></div><div class="line">USHORT        MasterBootRecordMagic;        <span class="comment">/* 0x1FE */</span></div><div class="line">&#125; MASTER_BOOT_RECORD, *PMASTER_BOOT_RECORD;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>GetHarddiskIdentifier在获取了Signature、计算了Checksum后 。<br>sprintf(ArcName, “multi(0)disk(0)rdisk(%lu)partition(0)”, DriveNumber - 0x80);<br>FsRegisterDevice(ArcName, &amp;DiskVtbl);<br>生成对应硬盘的ArcName，使用FsRegisterDevice注册这块硬盘，这个函数我们已经看过。注意这里Partition为0，所以0号分区实际表示硬盘本身。<br>之后</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (DiskGetPartitionEntry(DriveNumber, i, &amp;PartitionTableEntry))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (PartitionTableEntry.SystemIndicator != PARTITION_ENTRY_UNUSED)</div><div class="line">&#123;</div><div class="line"><span class="built_in">sprintf</span>(ArcName, <span class="string">"multi(0)disk(0)rdisk(%lu)partition(%lu)"</span>, DriveNumber - <span class="number">0x80</span>, i);</div><div class="line">FsRegisterDevice(ArcName, &amp;DiskVtbl);</div><div class="line">&#125;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>DiskGetParititionEntry将会解析DriveNumber对应磁盘的分区表，填充第i个分区的信息到PartitionTableEntry结构。如果分区存在则使用FsRegisterDevice注册分区。<br>使用刚才计算的CheckSum和Signature组合一个ID返回给调用者。其实这个ID没有被使用过。。。<br>最后看一下调用FsRegisterDevice时的第二个参数DiskVtbl  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> DEVVTBL DiskVtbl = &#123;</div><div class="line">DiskClose,</div><div class="line">DiskGetFileInformation,</div><div class="line">DiskOpen,</div><div class="line">DiskRead,</div><div class="line">DiskSeek,</div><div class="line">&#125;;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这里面包含了对磁盘扇区读写的全部函数。我们之后再介绍。<br>至此硬盘的及硬盘分区的注册完成。<br>执行完DetectBiosDisks后，DeviceListHead里面就存放了当前计算机所有的磁盘和分区对应的DEVICE结构。<br>文件系统的识别和文件的打开<br>这时Fs模块已经知道的硬盘数量，分区信息。下面来看看一个文件的打开流程。<br>首先，Freeldr使用的是Arc路径，IDE硬盘以multi(0)disk(0)rdisk(n)开头，文件也是以Arc路径表示的。打开文件的函数在Freeldr\Freeldr\fs\fs.c中。这函数比较长，我们分段阅读。<br>Freeldr\Freeldr\fs\fs.c</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function">LONG <span class="title">ArcOpen</span><span class="params">(CHAR* Path, OPENMODE OpenMode, ULONG* FileId)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">......</div><div class="line">*FileId = MAX_FDS;</div><div class="line"><span class="comment">/* Search last ')', which delimits device and path */</span></div><div class="line">FileName = <span class="built_in">strrchr</span>(Path, <span class="string">')'</span>);</div><div class="line"><span class="keyword">if</span> (!FileName)</div><div class="line"><span class="keyword">return</span> EINVAL;</div><div class="line">FileName++;</div><div class="line"><span class="comment">/* Count number of "()", which needs to be replaced by "(0)" */</span></div><div class="line">dwCount = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (p = Path; p != FileName; p++)</div><div class="line"><span class="keyword">if</span> (*p == <span class="string">'('</span> &amp;&amp; *(p + <span class="number">1</span>) == <span class="string">')'</span>)</div><div class="line">dwCount++;</div><div class="line"><span class="comment">/* Duplicate device name, and replace "()" by "(0)" (if required) */</span></div><div class="line">dwLength = FileName - Path + dwCount;</div><div class="line"><span class="keyword">if</span> (dwCount != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">DeviceName = MmHeapAlloc(FileName - Path + dwCount);</div><div class="line"><span class="keyword">if</span> (!DeviceName)</div><div class="line"><span class="keyword">return</span> ENOMEM;</div><div class="line"><span class="keyword">for</span> (p = Path, q = DeviceName; p != FileName; p++)</div><div class="line">&#123;</div><div class="line">*q++ = *p;</div><div class="line"><span class="keyword">if</span> (*p == <span class="string">'('</span> &amp;&amp; *(p + <span class="number">1</span>) == <span class="string">')'</span>)</div><div class="line">*q++ = <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">DeviceName = Path;</div><div class="line">......</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这个函数有三个参数Path是文件名的Arc路径，如multi(0)disk(0)rdisk(0)partition(1)Freeldr.sys就表示C盘中的Freeldr.sys文件。<br>OpenMode是打开模式(OpenReadOnly、OpenReadWrite等)。<br>如果打开成功，文件句柄将通过FileId参数返回。<br>首先这一部分代码分理出Arc磁盘路径中的”()”替换成”(0)”并存入DeviceName中，如multi()disk()rdisk()partition(1)Freeldr.sys处理后，DeviceName将指向multi(0)disk(0)rdisk(0)partition(1)。注意这个DeviceName是不以NULL结尾的。。。这是个很蛋疼的设计。<br>FileName会指向Arc路径中的文件名部分，上面的例子将是Freeldr.sys。<br>文件打开分为两步，第一步是开个文件所在的设备、创建设备的句柄。第二部才是打开文件本身。<br>这里是第一步打开设备的代码。  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">pEntry = DeviceListHead.Flink;</div><div class="line"><span class="keyword">while</span> (pEntry != &amp;DeviceListHead)</div><div class="line">&#123;</div><div class="line">pDevice = CONTAINING_RECORD(pEntry, DEVICE, ListEntry);</div><div class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>(pDevice-&gt;Prefix, DeviceName, dwLength) == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* OK, device found. It is already opened? */</span></div><div class="line"><span class="keyword">if</span> (pDevice-&gt;ReferenceCount == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* Search some room for the device */</span></div><div class="line"><span class="keyword">for</span> (DeviceId = <span class="number">0</span>; DeviceId &lt; MAX_FDS; DeviceId++)</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FuncTable)</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span> (DeviceId == MAX_FDS)</div><div class="line"><span class="keyword">return</span> EMFILE;</div><div class="line"><span class="comment">/* Try to open the device */</span></div><div class="line">FileData[DeviceId].FuncTable = pDevice-&gt;FuncTable;</div><div class="line">ret = pDevice-&gt;FuncTable-&gt;Open(pDevice-&gt;Prefix, DeviceOpenMode, &amp;DeviceId);</div><div class="line"><span class="keyword">if</span> (ret != ESUCCESS)</div><div class="line">&#123;</div><div class="line">FileData[DeviceId].FuncTable = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!*FileName)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* Done, caller wanted to open the raw device */</span></div><div class="line">*FileId = DeviceId;</div><div class="line">pDevice-&gt;ReferenceCount++;</div><div class="line"><span class="keyword">return</span> ESUCCESS;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* Try to detect the file system */</span></div><div class="line">FileData[DeviceId].FileFuncTable = FatMount(DeviceId);</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FileFuncTable)</div><div class="line">FileData[DeviceId].FileFuncTable = NtfsMount(DeviceId);</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FileFuncTable)</div><div class="line">FileData[DeviceId].FileFuncTable = Ext2Mount(DeviceId);</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FileFuncTable)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* Error, unable to detect file system */</span></div><div class="line">pDevice-&gt;FuncTable-&gt;Close(DeviceId);</div><div class="line">FileData[DeviceId].FuncTable = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> ENODEV;</div><div class="line">&#125;</div><div class="line">pDevice-&gt;DeviceId = DeviceId;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">DeviceId = pDevice-&gt;DeviceId;</div><div class="line">&#125;</div><div class="line">pDevice-&gt;ReferenceCount++;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">pEntry = pEntry-&gt;Flink;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (pEntry == &amp;DeviceListHead)</div><div class="line"><span class="keyword">return</span> ENODEV;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>一个循环，遍历DEVICE链表，找到DEVICE-&gt;Prefix (磁盘、分区的Arc路径，上一节说过)和刚刚分解出来的DeviceName相等的节点。如果没有则函数直接失败。<br>找到DEVICE节点后判断DEVICE-&gt;ReferenceCount是否为0。这个代表该DEVICE被打开的次数，如果ReferenceCount不为0，说明DEVICE已经被打开。那个直接从Device-&gt;DeviceId中获得设备的文件句柄。可以看出无论打开一个设备多少次，只会有ReferenceCount的变化，而句柄都是相同的。所以如果设备打开两次，SEEK时会相互影响。读写之前最好重新调用SEEK函数。<br>当DEVICE-&gt;ReferenceCount为0时是Freeldr需要调用进行打开和文件系统的识别。我们仔细读读。  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Search some room for the device */</span></div><div class="line"><span class="keyword">for</span> (DeviceId = <span class="number">0</span>; DeviceId &lt; MAX_FDS; DeviceId++)</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FuncTable)</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span> (DeviceId == MAX_FDS)</div><div class="line"><span class="keyword">return</span> EMFILE;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>首先在FileData数组中找到空闲项，数组的索引即将成为设备句柄。  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Try to open the device */</span></div><div class="line">FileData[DeviceId].FuncTable = pDevice-&gt;FuncTable;</div><div class="line">ret = pDevice-&gt;FuncTable-&gt;Open(pDevice-&gt;Prefix, DeviceOpenMode, &amp;DeviceId);</div><div class="line"><span class="keyword">if</span> (ret != ESUCCESS)</div><div class="line">&#123;</div><div class="line">FileData[DeviceId].FuncTable = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!*FileName)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* Done, caller wanted to open the raw device */</span></div><div class="line">*FileId = DeviceId;</div><div class="line">pDevice-&gt;ReferenceCount++;</div><div class="line"><span class="keyword">return</span> ESUCCESS;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>之后把DEVICE中存储的设别操作函数数组FuncTable赋值给对应FileData中的FuncTable。之后对该句柄的读写操作将直接传递给FileData.FuncTable中的函数。<br>调用FuncTable-&gt;Open打开设备。上面我们看过这个函数实际是freeldr\freeldr\arch\i386\hardware.c中的DiskOpen。<br>打开成功后，如果FileName（需要打开的文件名）为空，说明这次请求只打开设备，于是直接返回设备的句柄。<br>如果不为空，则下面开始识别分区格式，打开文件的操作。<br>在继续读ArcOpen函数前我们先看看DiskOpen在打开设备时都做了什么。  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">ArcOpen -&gt; DiskOpen (freeldr\freeldr\arch\i386\hardware.c)</div><div class="line"><span class="function"><span class="keyword">static</span> LONG <span class="title">DiskOpen</span><span class="params">(CHAR* Path, OPENMODE OpenMode, ULONG* FileId)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">......</div><div class="line"><span class="keyword">if</span> (!DissectArcPath(Path, FileName, &amp;DriveNumber, &amp;DrivePartition))</div><div class="line"><span class="keyword">return</span> EINVAL;</div><div class="line"><span class="keyword">if</span> (DrivePartition == <span class="number">0xff</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* This is a CD-ROM device */</span></div><div class="line">SectorSize = <span class="number">2048</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">SectorSize = <span class="number">512</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (DrivePartition != <span class="number">0xff</span> &amp;&amp; DrivePartition != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (!DiskGetPartitionEntry(DriveNumber, DrivePartition, &amp;PartitionTableEntry))</div><div class="line"><span class="keyword">return</span> EINVAL;</div><div class="line">SectorOffset = PartitionTableEntry.SectorCountBeforePartition;</div><div class="line">SectorCount = PartitionTableEntry.PartitionSectorCount;</div><div class="line">&#125;</div><div class="line">Context = MmHeapAlloc(<span class="keyword">sizeof</span>(DISKCONTEXT));</div><div class="line"><span class="keyword">if</span> (!Context)</div><div class="line"><span class="keyword">return</span> ENOMEM;</div><div class="line">Context-&gt;DriveNumber = DriveNumber;</div><div class="line">Context-&gt;SectorSize = SectorSize;</div><div class="line">Context-&gt;SectorOffset = SectorOffset;</div><div class="line">Context-&gt;SectorCount = SectorCount;</div><div class="line">Context-&gt;SectorNumber = <span class="number">0</span>;</div><div class="line">FsSetDeviceSpecific(*FileId, Context);</div><div class="line"><span class="keyword">return</span> ESUCCESS;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这个函数非常简单，使用DissectArcPath根据设备的Arc路径分解出文件名FileName、BIOS驱动器号DriveNumber、和分区号DrivePartition（第0个分区的编号是1，0代表整个硬盘）<br>之后确定扇区大小，分区开始的扇区号、分区扇区数等信息，存入DISKCONTEXT结构。使用FsSetDeviceSpecific和FildId相关联。<br>还记得FILEDATA的结构么？FsSetDeviceSpecific就是填充里面的Specific指针 ：）  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">VOID <span class="title">FsSetDeviceSpecific</span><span class="params">(ULONG FileId, VOID* Specific)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (FileId &gt;= MAX_FDS || !FileData[FileId].FuncTable)</div><div class="line"><span class="keyword">return</span>;</div><div class="line">FileData[FileId].Specific = Specific;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>实际上DiskOpen的作用就是获得该设备（分区）的基本信息——BIOS驱动器号、扇区大小、开始扇区号、扇区数量和当前读写指针（SectorNumber）。生成DISKCONTENT结构使用FsSetDeviceSpecific和FileID绑定。<br>现在我们回到ArcOpen函数，希望你还记得 ：）  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Try to detect the file system */</span></div><div class="line">FileData[DeviceId].FileFuncTable = FatMount(DeviceId);</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FileFuncTable)</div><div class="line">FileData[DeviceId].FileFuncTable = NtfsMount(DeviceId);</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FileFuncTable)</div><div class="line">FileData[DeviceId].FileFuncTable = Ext2Mount(DeviceId);</div><div class="line"><span class="keyword">if</span> (!FileData[DeviceId].FileFuncTable)</div><div class="line">&#123;</div><div class="line"><span class="comment">/* Error, unable to detect file system */</span></div><div class="line">pDevice-&gt;FuncTable-&gt;Close(DeviceId);</div><div class="line">FileData[DeviceId].FuncTable = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">return</span> ENODEV;</div><div class="line">&#125;</div><div class="line">pDevice-&gt;DeviceId = DeviceId;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>现在FileData[DeviceId]已经代表刚刚打开的设备了，开始挂载分区。啥叫挂载分区，就是让文件系统提供个接口，能让我们操作分区里面的文件。而这个接口就是个DEVVTBL指针，和直接操作硬盘的接口一样，只不过这次这个可以操作文件了。如果分区识别成功，XxxMount函数将会返回另外一个DEVVTBL指针数组，这个指针赋值给设备对象的FileFuncTable成员。使用这个指针数组就可以在文件级别操作了。比如打开freeldr.sys文件就可以调用FileData[DeviceId].FileFuncTable-&gt;open函数。FileFuncTable和FuncTable是不同的哦！ ：）<br>注意FileFuncTable其实是不直接使用的，这个指针的作用是为之后打开的文件对应的FileData.FileTable赋值。于是操作文件和操作磁盘都是用对应的FileData.FileTable，实现形式上的统一。而且这种架构还可以轻易的实现将一个文件虚拟成为一个分区，只要为文件对象调用XxxMount并且给FileFuncTable域赋值就可以了，非常易于扩展。Freeldr并没有实现这种功能，文件的FileData.FileFuncTable没有使用～<br>下面我们就来看看第二步，打开文件<br>首先为文件找一个空闲的FileData  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_FDS; i++)</div><div class="line"><span class="keyword">if</span> (!FileData[i].FuncTable)</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span> (i == MAX_FDS)</div><div class="line"><span class="keyword">return</span> EMFILE;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>跳过文件名开始的 “\” 字符  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (*FileName == <span class="string">'\\'</span>)</div><div class="line">FileName++;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>我们前面说的，为FileData.FuncTable赋值。FileData.DeviceId是文件所在分区的句柄。FuncTable内部函数将通过这个句柄调用读写分区内容，为用户提供文件的读写接口。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FileData[i].FuncTable = FileData[DeviceId].FileFuncTable;</div><div class="line">FileData[i].DeviceId = DeviceId;</div><div class="line">*FileId = i;</div><div class="line">ret = FileData[i].FuncTable-&gt;Open(FileName, OpenMode, FileId);</div><div class="line"><span class="keyword">if</span> (ret != ESUCCESS)</div><div class="line">&#123;</div><div class="line">FileData[i].FuncTable = <span class="literal">NULL</span>;</div><div class="line">*FileId = MAX_FDS;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>至此打开文件的操作结束。这里略去了XxxMount和文件的Open函数。以后再说。 ：）  </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于文件ShareAccess]]></title>
      <url>/2011/05/22/e585b3e4ba8ee69687e4bbb6shareaccess/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我是真心太懒了，虽然平时也在研究一些东西，但是总是理解了就算了，没有把他们记录下来的想法。虽然不记录下来也不至于会忘记，但是人的记忆总是有限的我也不敢保证记忆完全不错。好不容易说服自己写点东西，就从今天看的那点东西写起吧。</p>
<p>（吐槽：我尽量把以后的文章写得详细以至于啰嗦，免得以后自己又看不懂了。）</p>
<p>什么是ShareAccess。我们做一个简单的实验，进入系统目录(一般就是C:\Windows)。在C:\Windows\system32\config中，复制一个SYSTEM文件，然后把文件粘贴到另一个地方。如果我们的系统正常，那么我们看到肯定是一个错误框。（图1）“无法复制 system: 文件正在被另一个人或程序使用。关闭任何可能使用这个文件的程序，重新试一次。”无论懂不懂编程，这样一个令人蛋疼的错误框应该会看过无数次吧。这里我就不解释Windows为什么要这么做，假设所有读者都是了解其中的原因了。这篇文章想介绍的是，Windows怎么做到“访问拒绝”的。简单的来说就是当一个进程打开该文件的时候ShareAccess中没有ShareRead属性，所以其他的进程无法访问他。</p>
<p><a href="/uploads/2011/05/Windows-XP-Professional-2011-05-23-01-51-31.png"><img src="/uploads/2011/05/Windows-XP-Professional-2011-05-23-01-51-31-300x225.png" alt=""></a></p>
<p>（图1）</p>
<p>在我们平时打开文件中（CreateFile）总是需要我们传入一个dwShareMode的参数。它有三个值分别是FILE_SHARE_DELETE，FILE_SHARE_READ，FILE_SHARE_WRITE。如果一个打开一个文件的时候，没有传入了FILE_SHARE_READ，那么如果有另一段代码对文件用FILE_READ_DATA权限打开的时候一定返回的是一个失败。其他两个SHARE也是一样。那么是不是设置了FILE_SHARE_READ，其他代码用FILE_READ_DATA权限打开该文件都会成功呢？答案是不一定，主要要看在这段代码CreateFile的dwShareMode。如果也设置的FILE_SHARE_READ，那么打开文件就会成功，否则返回一个SHARE错误。</p>
<p>（吐槽：上面说了一堆，还是没进入正题，貌似有点太详细了。接下来才是重头戏。）</p>
<p>来看看NTFS文件系统是怎么来Check权限的。<br>每个文件打开的时候系统会为文件分配一个FILE_OBJECT（文件对象）。在这里我们主要关注的是以下几个域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">nt!_FILE_OBJECT</div><div class="line">...</div><div class="line">+0x00c FsContext        : Ptr32 Void</div><div class="line">...</div><div class="line">+0x026 ReadAccess       : UChar</div><div class="line">+0x027 WriteAccess      : UChar</div><div class="line">+0x028 DeleteAccess     : UChar</div><div class="line">+0x029 SharedRead       : UChar</div><div class="line">+0x02a SharedWrite      : UChar</div><div class="line">+0x02b SharedDelete     : UChar</div><div class="line">...</div></pre></td></tr></table></figure><br>熟悉NTFS文件系统的同学都知道FsContext实际上是对应着一个SCB。SCB的数据结构是未公开的，所以只有逆向或者通过其他途径获得。而这篇文章只需要关注的是SCB的SHARE_ACCESS。SHARE_ACCESS在SCB的0x60的偏移处，这个和NT的SCB有些不同。SHARE_ACCESS的数据结构是这样</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SHARE_ACCESS</span> &#123;</span></div><div class="line">ULONG OpenCount;</div><div class="line">ULONG Readers;</div><div class="line">ULONG Writers;</div><div class="line">ULONG Deleters;</div><div class="line">ULONG SharedRead;</div><div class="line">ULONG SharedWrite;</div><div class="line">ULONG SharedDelete;</div><div class="line">&#125; SHARE_ACCESS, *PSHARE_ACCESS;</div></pre></td></tr></table></figure>
<p>这个就是这篇文章的关键。</p>
<p>当一个文件被打开的时候，系统会初始化这个数据结构。根据CreateFile的权限设置来填充这个结构。<br>比如DesiredAccess中设置了FILE_READ_DATA，那么Readers，OpenCount就会增加1，如果在此同时设置了ShareMode为FILE_SHARE_READ，那么SharedRead也会加1。同时FILE_OBJECT的ReadAccess和SharedRead会被设置为TRUE。那么在文件被关闭的时候，如果FILE_OBJECT的ReadAccess和SharedRead为TRUE，那么SHARE_ACCESS的Readers，OpenCount，SharedRead就会减1。</p>
<p>在进程准备去打开一个已经打开的文件时，文件系统会做一系列的检查，包括文件权限（比如如果是只读文件，你却想要写权限，这样就会失败），安全描述符，以及共享权限（ShareAccess）。假设前面两个都符合要求，那么就到了共享权限的检查了。</p>
<p>还是以刚才那个SYSTEM文件为例，他打开的权限是FILE_READ_DATA，FILE_WRITE_DATA，DELETE。那么SHARE_ACCESS的OpenCount，Readers，Writers，Deleters都为1，而完全没有Share的意图，所以其他的域都是0。</p>
<p>当有另外一段代码去试图用FILE_READ_DATA权限打开这个文件的时候，那么文件系统就会去检查第一个打开这个文件的操作共享权限。这时的OpenCount是1，SharedRead是0，他会发现SharedRead小于OpenCount，那么他认为这个文件并没有SHARE_READ，所以参数检查返回失败，你会得到一个共享错误。这就是为什么我们复制粘贴SYSTEM文件的时候会失败。</p>
<p>原因分析到这里就结束了。但是我就这样满足了么？显然我没那么容易满足滴~</p>
<p>我想做的就是复制出这个SYSTEM文件，实际上网上已经有很多做法，什么底层磁盘解析读取数据，句柄复制大法。而我这次是修改底层SCB的ShareAccess来达到复制的目的。如果读懂了上面的原理，看下面这段代码就很轻松了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">kfile File;</div><div class="line">ns = File.Create(FILENAME, FILE_OPEN, FILE_READ_ATTRIBUTES, <span class="number">0</span>);</div><div class="line">FileObj = File.GetObject();</div><div class="line">ShareAccess = (SHARE_ACCESS *)((ULONG)FileObj-&gt;FsContext + Offset);</div><div class="line">ShareAccess-&gt;SharedRead = ShareAccess-&gt;Readers;</div><div class="line">File.Release();</div><div class="line"> </div></pre></td></tr></table></figure>
<p>OK，编写好测试代码，生成一个驱动。运行即可。接下来就是见证奇迹的时刻了。还是用同样的方法复制看看，完全没有问题了。（图2）</p>
<p><a href="/uploads/2011/05/Windows-XP-Professional-2011-05-23-01-53-40.png"><img src="/uploads/2011/05/Windows-XP-Professional-2011-05-23-01-53-40-300x225.png" alt=""></a></p>
<p>（图2）</p>
<p>（吐槽：好久没写这么长的文章，写的我都崩溃了。说到写文章，我发现现在我如果拿起笔去写字，经常会发生提笔忘字的情况！！！天啊！！！）</p>
]]></content>
      
        <categories>
            
            <category> NTInternals </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NTFS </tag>
            
            <tag> File System </tag>
            
            <tag> NTInternals </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让程序等待调试器附加]]></title>
      <url>/2011/04/01/e8aea9e7a88be5ba8fe7ad89e5be85e8b083e8af95e599a8e99984e58aa0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>有的时候出于一些目的，我们会希望程序等待调试器Attach上去以后才开始继续往前跑。例如，我们写了一堆console程序，同时又有个shell去调用这些console，而这个时候我们却想去调试shell运行起来的这个console。当然Windbg本身就有调试debugee子进程的功能，但是身为懒人，这种方式太麻烦。我还是更愿意加入几行代码解决这个问题。</p>
<p>要解决这个问题，原理上很简单。无非是程序运行初期不断的去检测本进程是否被调试，如果是就把自己断下来，如果不是继续等待。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">WaitDebuggerAttach</span><span class="params">(DWORD Second)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	DWORD CurSec = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>((!IsDebuggerPresent()) &amp;&amp; (CurSec &lt; Second)) &#123;</div><div class="line">		</div><div class="line">		CurSec++;</div><div class="line">		Sleep(<span class="number">1000</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (IsDebuggerPresent()) &#123;</div><div class="line"></div><div class="line">		__asm <span class="keyword">int</span> <span class="number">3</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>这个函数可以指定等待时间，如果Debugger Attach上去了，那么就断下来方便调试，否则会超时，正常执行。<br>这里我是用的IsDebuggerPresent这个API来获得进程的调试状态。实际上检测自己调试状态的方法很多，只不过这个用起来最方便而已。比如可以用测试断点异常的方法来检测自己的调试状态。  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">CheckForDebugger</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    __try </div><div class="line">    &#123;</div><div class="line">        DebugBreak();</div><div class="line">    &#125;</div><div class="line">    __except(GetExceptionCode() == EXCEPTION_BREAKPOINT ? </div><div class="line">             EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) </div><div class="line">    &#123;</div><div class="line">        <span class="comment">// No debugger is attached, so return FALSE </span></div><div class="line">        <span class="comment">// and continue.</span></div><div class="line">        <span class="keyword">return</span> FALSE;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"> </div></pre></td></tr></table></figure>
<p>本Blog的第一篇文章总算是出炉了~~~我太懒了哇~</p>
]]></content>
      
        <categories>
            
            <category> Debugging </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello world!]]></title>
      <url>/2011/02/28/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"hello world!"</span>); </div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
